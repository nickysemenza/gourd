// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get foods
	// (GET /data/recipe_dependencies)
	RecipeDependencies(ctx echo.Context) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Get recipes
	// (GET /recipes/bulk)
	GetRecipesByIds(ctx echo.Context, params GetRecipesByIdsParams) error
	// scrape a recipe by URL
	// (POST /recipes/scrape)
	ScrapeRecipe(ctx echo.Context) error
	// sum up recipes
	// (POST /recipes/sum)
	SumRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// recipe as latex
	// (GET /recipes/{recipe_id}/latex)
	GetLatexByRecipeId(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// RecipeDependencies converts echo context to params.
func (w *ServerInterfaceWrapper) RecipeDependencies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RecipeDependencies(ctx)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "data_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "data_types", ctx.QueryParams(), &params.DataTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data_types: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "fdc_id", runtime.ParamLocationPath, ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ingredient_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "ingredient_id", ctx.QueryParams(), &params.IngredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipesByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipesByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecipesByIdsParams
	// ------------- Required query parameter "recipe_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "recipe_id", ctx.QueryParams(), &params.RecipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipesByIds(ctx, params)
	return err
}

// ScrapeRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ScrapeRecipe(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ScrapeRecipe(ctx)
	return err
}

// SumRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) SumRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SumRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// GetLatexByRecipeId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLatexByRecipeId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLatexByRecipeId(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/albums", wrapper.ListAllAlbums)
	router.POST(baseURL+"/auth", wrapper.AuthLogin)
	router.GET(baseURL+"/data/recipe_dependencies", wrapper.RecipeDependencies)
	router.GET(baseURL+"/foods/bulk", wrapper.GetFoodsByIds)
	router.GET(baseURL+"/foods/search", wrapper.SearchFoods)
	router.GET(baseURL+"/foods/:fdc_id", wrapper.GetFoodById)
	router.GET(baseURL+"/ingredients", wrapper.ListIngredients)
	router.POST(baseURL+"/ingredients", wrapper.CreateIngredients)
	router.GET(baseURL+"/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST(baseURL+"/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST(baseURL+"/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST(baseURL+"/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET(baseURL+"/meals", wrapper.ListMeals)
	router.GET(baseURL+"/meals/:meal_id", wrapper.GetMealById)
	router.PATCH(baseURL+"/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.GET(baseURL+"/photos", wrapper.ListPhotos)
	router.GET(baseURL+"/recipes", wrapper.ListRecipes)
	router.POST(baseURL+"/recipes", wrapper.CreateRecipes)
	router.GET(baseURL+"/recipes/bulk", wrapper.GetRecipesByIds)
	router.POST(baseURL+"/recipes/scrape", wrapper.ScrapeRecipe)
	router.POST(baseURL+"/recipes/sum", wrapper.SumRecipes)
	router.GET(baseURL+"/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET(baseURL+"/recipes/:recipe_id/latex", wrapper.GetLatexByRecipeId)
	router.GET(baseURL+"/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
