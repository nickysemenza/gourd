// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get app config
	// (GET /config)
	GetConfig(ctx echo.Context) error
	// Get foods
	// (GET /data/recipe_dependencies)
	RecipeDependencies(ctx echo.Context) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// load mappings
	// (POST /meta/load_ingredient_mappings)
	LoadIngredientMappings(ctx echo.Context) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Get recipes
	// (GET /recipes/bulk)
	GetRecipesByIds(ctx echo.Context, params GetRecipesByIdsParams) error
	// scrape a recipe by URL
	// (POST /recipes/scrape)
	ScrapeRecipe(ctx echo.Context) error
	// sum up recipes
	// (POST /recipes/sum)
	SumRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// recipe as latex
	// (GET /recipes/{recipe_id}/latex)
	GetLatexByRecipeId(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// RecipeDependencies converts echo context to params.
func (w *ServerInterfaceWrapper) RecipeDependencies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RecipeDependencies(ctx)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "data_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "data_types", ctx.QueryParams(), &params.DataTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data_types: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "fdc_id", runtime.ParamLocationPath, ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ingredient_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "ingredient_id", ctx.QueryParams(), &params.IngredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// LoadIngredientMappings converts echo context to params.
func (w *ServerInterfaceWrapper) LoadIngredientMappings(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LoadIngredientMappings(ctx)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipesByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipesByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecipesByIdsParams
	// ------------- Required query parameter "recipe_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "recipe_id", ctx.QueryParams(), &params.RecipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipesByIds(ctx, params)
	return err
}

// ScrapeRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ScrapeRecipe(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ScrapeRecipe(ctx)
	return err
}

// SumRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) SumRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SumRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// GetLatexByRecipeId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLatexByRecipeId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLatexByRecipeId(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/albums", wrapper.ListAllAlbums)
	router.POST(baseURL+"/auth", wrapper.AuthLogin)
	router.GET(baseURL+"/config", wrapper.GetConfig)
	router.GET(baseURL+"/data/recipe_dependencies", wrapper.RecipeDependencies)
	router.GET(baseURL+"/foods/bulk", wrapper.GetFoodsByIds)
	router.GET(baseURL+"/foods/search", wrapper.SearchFoods)
	router.GET(baseURL+"/foods/:fdc_id", wrapper.GetFoodById)
	router.GET(baseURL+"/ingredients", wrapper.ListIngredients)
	router.POST(baseURL+"/ingredients", wrapper.CreateIngredients)
	router.GET(baseURL+"/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST(baseURL+"/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST(baseURL+"/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST(baseURL+"/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET(baseURL+"/meals", wrapper.ListMeals)
	router.GET(baseURL+"/meals/:meal_id", wrapper.GetMealById)
	router.PATCH(baseURL+"/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.POST(baseURL+"/meta/load_ingredient_mappings", wrapper.LoadIngredientMappings)
	router.GET(baseURL+"/photos", wrapper.ListPhotos)
	router.GET(baseURL+"/recipes", wrapper.ListRecipes)
	router.POST(baseURL+"/recipes", wrapper.CreateRecipes)
	router.GET(baseURL+"/recipes/bulk", wrapper.GetRecipesByIds)
	router.POST(baseURL+"/recipes/scrape", wrapper.ScrapeRecipe)
	router.POST(baseURL+"/recipes/sum", wrapper.SumRecipes)
	router.GET(baseURL+"/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET(baseURL+"/recipes/:recipe_id/latex", wrapper.GetLatexByRecipeId)
	router.GET(baseURL+"/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w9XXPbOJJ/BcW9qkuqaCszN3cPejpPMsl5N9lz5ePmIeXSQiQkYUwCDABK1qb836/w",
	"RYJkkyJlK6PMzsNuRsRXf6HRaHS3v0YJzwvOCFMymn+NCixwThQR5ldGc6pu9Cf9KyUyEbRQlLNoHn3c",
	"EMTKfEmERHyFqCK5RIojQVQp2GUUR1R3+1ISsY/iiOGcRHM7YxRHMtmQHNtZV7jMVDT/8UUc5fie5mUe",
	"zf9T/6DM/vghjtS+0MMpU2RNRPTwYGccgE0SLJINMuujZ7rz8z6gzD9xJMiXkgqSRnMlShLC6FaXSlC2",
	"Novz1UqSw6RpUEbe0QItyYoLgqTCQlG21t8TnmUkUUhtCBJElplCkqg+YO3KDRJWhHoBEOrB9zQcvcp5",
	"yVQXZGy+I8xSVDLDoULwgghFiRkneSkS0h1HNX5ohyUi90VGE6piRNmKCEHSGBGVRHGbenFkVuhM5dbt",
	"9i4KIhZbnJXA+vZzHK24yLGK5lHKy2VG6nksH/Q8j53hIZSQzx5cO/y26s2Xv5FE6fWuSrV5T2TRXVLx",
	"lHco/NtOAaIWR6UkImjw87eh0b1iMwkEy88Cs5SkrzlPu+AsbeNipVvbYJnGBd+xBhQ1eOHgRYIVWXOx",
	"B3tueCnJhmfpQhKx1R+hXpStBUmp10eddjd2Iek/DTNHMD4csvCy193SITkbq0AzQER+ydmKrl9hhbs0",
	"TkwbSnVjm8RrztcZWSSZxnpBUxBv10kmvCDyMALN7nF3DQiBX5iiav+hzHNsedjEQfNOIq2GZjQ1qiIv",
	"M0WLjBKBVlwgjP5GWap1HjEzdTClgPQJktCCLFKiMM0QF6iWAERTSCHcUWbm+TdBVtE8+susPsJmTtXN",
	"rqtJNEh6VA1rF4agbZQqsaoYxqSFgjtbhrll8HQ9G7AYVEFWCcEBRK7QmjAiaIKI7oByIiVe62nJPc6L",
	"zEDtP86jDzwnaqOPoZ2GdSe4pXCTa1V/QCyVwAmBZbaFo58FwgbWS1dI8QJlZEsy1K+bSLqgbMUPCUSo",
	"AR/iKNRUQ8N0/5e+70Mc6Q28sPAfHqhVwUfdVw8MUWtjqjuj8BMg9as0WUD75/Wrl+g62CfVyR9HrFSi",
	"0qTgEWRskzGo/N1NZXhuF8JCYEOTggs9K7CKazFqr+BUQzJhzRs7GlpS6+BFjouCsjWwrm8xquhLSbc4",
	"0/KtR42G4BOj6p2dpwtBS7Ydb5pcDoUl5EUb+r4N8TIQ0SZ6ejMgL8GxNhaN+pXcKJDmHkl4So4TuEdK",
	"bItEBo7mpH2IV9tm/jUiTNu1n6MVL1mK9TBvpkijz/yvHIs7ohY4+VJSSR1EshRbsl+sWJrKali5XDSH",
	"4rWgSZmpUuCsPYFYZGSNk73v2zCVbgGiNfbKOMMPVyb5iJPHiJTbSrXKBfb8IfGuN3SLUdUEsYesuWof",
	"1/yEn5yB5Tn36U0UR/p/15/0gfbXKI7+9vLqbRRH796Y/1tcffwliqMPN4s373tp6nUBuBcWTs88jrRr",
	"gfPFjtD1ZuyIxrEX8CDnKV3RHoPZwbpoba8RBkLFDmiKYNUmKhC/3hhr8GbDFZdX2bIE7rCYIaxbUMKZ",
	"wpRpI+EfZsQ/Rpl1sOlWCJ6WiVqUIgNOi6ARGKuoygBVZj/H4MUpwRIY4RtGWWV++iZwfgqIuLXpCZg0",
	"DAXNbToOHfE0DU8yxZHaUBkYmqHhSpn6r59Ai2A8p2AT9/qQYRtHBRYg6oFNfP3KXRckzWmGBXqW0TuS",
	"7RFGKV2tiJ4AyYJkGWXr5xOs52F2vDJXjKlMSTY0SwVhQ8SQSG2wQliQgEljDY0OgIC9s3IG8iGTqXmD",
	"Hr/yozhu7z2AGfbeNiBBDE8T4+/qiO0oItmp+gl0ZgahI1UDT0+mMfZf6/oaHKfAlOChWc/gYe4QxV65",
	"JcJLXioUOl4652hGsXS63pOqq5/bMltpM8BKcbIGugbPj48e/2msc4vIG7zPOAY0b0al0ph0edU5Yase",
	"JyZOF5RDJIJAG6bLJ+9NGG0cy16XDUGuhzkSjZ98FJ7ODw6I7VP6iTydFsv9adjV9NgdYpUnZhOwBsog",
	"5zwkfb4mI8fP9JFe4DVl5pqGSkmed9hpn386U/0P36Ecs717K9kRQZAGkUhFUmMrmGOjsK6srjpxbyJ9",
	"ItUdoGdaJPBTyEeucBa83+i+EuEtphlu8Lk9n+N7Z8JftW3g5tMd3RkowZmUXn0saJZcOBFcSoSzzMIa",
	"gc9loSCE4MbVm1y4dFy/MwW0gqTjHcGQTYVygrMY7TY02aCloOnaGALWIFAcFeby0d3viiwwgPluQ5h/",
	"aVL4jrDGBsSKXCgKWyePNXmLcpnRBNG8IXyBvWsRCY/GoR1rrlCQ3gmsqFETabpbq+iwig7cy47AFdx9",
	"LHVTA4x1bm5t8f673pPCnGHYMBw9w75d28PaiE/oiiZOS3cVwpC2Heb5gNL1kI83KNu+6lDPd4wsiFCf",
	"Ci2E4DW6NE32ykaqLcCZJVl3BySwo8PpMm8H4jQ1sOV8CxuAjzjHgPfkNnnBe6olRcMb3XNlqydpPXg4",
	"7CFiT3SrQQD2ngfw1m92bxmpfshYz7nxiw3tzHpWCPsbe7LaFwzI1W5OKb5Cr6GXkpUfNNr5DppGxD5t",
	"DhqQZoHu44/Cw2hdN999e5Dr3JX7DeXx6I65gJ8Sda1FhpA2J2z3Uc4NGn1YfGu0bqqDsQevG9gEmADT",
	"U52+k3Gzmu5XgYvChUr14OiO0UfhONUyaAD3CGQNrQADwNC8+xiLJenx6x6woJZZKRYbLDdAaEpWCmSa",
	"gHGJIJoXT2ksbir3fyv0wXxHxf1Tu1n74qp2G30H0gaDoTZKcE7QSvA8MAFsTIc+QHjr0Kzn39FUAXQ1",
	"n0eiAx1ZFbNrLvi1KiJWyEHC5c2vgrCUsGQPRVMUgkjjXNU2ZWZulXJjQujUjhBWGZosDZxXsSFahpWy",
	"VyR7AUnMc4bkaEmQt1Avh7ws4zkYDDouMCWYADZD4HUH7LDQuuobN36pAdMtnCtuka+LWJdWQ5LR46tH",
	"gmyppJzZS4eA9asTyv6rpBaSLRFmIq0mail+6lsllYsMKyLVwq0HQqQ2WlwFYlxpzUWlgTDnUmkUCVMe",
	"2nqJJecZwexgPFKf257rNT1QwBn2vwamqv2JHPVfSmxjwzrruSA7VPUYpWolSXqCT3yLFpT65jUNjw92",
	"DggRBy6wMCtzVLWOQ8IoSmCqJed3Wix2ZCmpIhO58MHqXwB4hSHAzdd4gosfDuT1jOwL6O3dB35Dthl2",
	"1BHlxD6QJgdPJTE1JNAujUMl4ih2SF9ds6JURyst2IPgjRkHDZo5h8J4XXWUdvgu96ml/5+b9ck2K/wc",
	"NrinDmwUr1GBTSIVKRBlTSFobZFSYD983PPOMYYcQO37scysJDF8Wm+zgjKpRNm3IaavVc02zhXcWL6J",
	"+EHG9aq403DvNDzp1RMnY0zPip231GMYc/AK6VR9dYdEz+gluURaX82csup65s11Hb7QmybUE6ZVgI+7",
	"5t3LOpFnTlmgZ3RlYHg+NdpreCQIMgjsQy9NvfOk//ljR9UGyXIZpM91xL26w0wxmMcrrIyyO5IunsYT",
	"6CY7iT8t9b5aOnTlczQfsKFOR/hqe46lPowhhNwHk4f43uT1gXrT5im6xL+dJYJ/OHXBl2HElDQOjzqY",
	"aND/3c1LbIb5TPSPP9KFPBAq9rF+GptmNg25OQFetA/nwaA+ykyMIltnBDml1X2uS/XkdAu9/VVNwObt",
	"DWwxngksKC8lygmWpRhPkv6olmPMoGPeTY5zgXEDEhRHULVAbg8u6JqCwwTeoYwyYiIk0LNCkAuaF1yo",
	"mUwELsjzfs/YVH0ty6VUVJWKnNhs7A8Jl0OZYj3Gz7+K4B8nkENX5hk9HBJ7HgJ9ItHstZ4VFmuiBlzS",
	"swO5nb3xaoelu74CAZJdW9WjRHuKshxYN2wcFcMeDhiHbO9enorxk+FxCIUyl++JLDizmRmtN8T9olbC",
	"OE2p3Ss3TVhHBflKvCb/Z3LzIUFtgyXL/FTRxgOAtJPONRBxQASIgGH0ci/AXWU9XoEux3fte7y0370/",
	"L69img/sdo07jHNNw56kdMqs4w6W7bU8EAI10Qy2AcxH2sKdkF0Jpl9Vqu9R5183VltGdsW47+Hf+mpL",
	"oYHUs7udSbAg4qq0j8n212vvK/3rrx99PRJzoJnWmt8bpQpbiMQnaptrTWLTBHNzVYvYfzOa3O0lyQn7",
	"J75MeN7JQY2ubq5NMLCeUM5nszVVm3Kp+87CwbM1L0VqAlsT4vSMK57y7vpj4FyI3uiOLkYDvcIKL21e",
	"WPVCEf1w+eLyhT3RCcMFjebRf5hPcVRgtTG0mZlEOVvKYSAKWcukkdDrNJpHb6lUV1l2ZYdqNlmlaKb5",
	"8cULTyZnh+OiyGhihs9+k1ZL1wVg2tkaS1Cd6TuWTznAft1R4tXNFxxx3Xro8i/L6jhqB4J1SLlQBjPC",
	"lQOagP7gdjOFEgBgSkbuC5IoktpaCVbyfe0Lwx8TUl1RyrrhP3vy3ur+M+x2RMElwPkPJOEsta5Rvqrk",
	"NiVbkmmOyUuLuBFhmtqqGTNJ1+yCstmOLGdLnNwRll7odf4i9X+pDbmg6YXid4RdKH6x56W4kERszZZr",
	"Cpner2/5mhqlGFR2+twG1DIYuSRtqOyQaxpfI+n2kTI9qO58aR1IyEplvCnWxPj9Jcrp0mj++TaUL0dx",
	"wx2U4CzTnA6lrFQbLQ8WRCdttorMNEXzhihbmCY6IUOC0jcAYV4GxW/OaIu/IQrhokCJJ4+nvdxLRXJH",
	"cw31rCpS4+KVfOUeiAvOT9no22ZKK/zJdnnCI4DCKTs4y6bGcVQBWkdr/AYhuhywock18QMvYPj8YXhh",
	"+s6WZXbXS/21nxIt94imEtoPJoT65/21aR3Ui3YCSB9WJT/6NWL7aTbM8mlS8pS6shU4DjDpQ+iBHsMi",
	"+ztkiXViT1NMdtnXbu4WGyCM6i6zsPzeQ3ywe1DHcETvurCg7ty1obRGQJqDfbJR1X2RESgPU+oGnbWk",
	"nI8ud5AdltSvduM+TD5ENVG0zjikMrSErNIEOY+Oefs0YbHjFUcnvOmUXLfJHl2C/+LJ7VdGiiOMtjij",
	"qU/OPCcJ0Iofo9evXiLClNhb9d8jCq1Xsmm3tutmovw31Ftjz6Z2IG7/kdQXLfRt9ExISch4sNmyfBXW",
	"0/O6J442BKcu+eL+gpF78HU1o+zOp97pPtWUNXZDl5iHc7yRNp9wvXw3raW450YKSvVLE1rYlGu3w3/m",
	"6f7JMA9ft4BbgoFCIhyye7lHhS2fcImurT+RpuaERuSeSiVjRJUll+zo1IeOEP/wjXD5O9ll+ypkkzZe",
	"9c5Fniy9G+TuFaeW0px9baiY6YdpTb2xRypNvT85kA7FkVb7lJl8JOCwbWvC83BfdB/OAeXHzlRszK25",
	"Tux+vPDMsJQ8oVi5iny93jRQmK78YG3H/ErVplnK6RixempRAi8RrqaXW9xUdFS8cVx1AZp+BR0soX57",
	"QvXYSq/vU5CcbYmwRqavZHAucq4FS1J3Ihn+mMgzjNZ0Sxgs9/76MU3+HRUWigevn1OObzu+FvyPvE47",
	"PYcN8KegDZ7DFjaJMGudbT5TJLYpH5Stjf3nS0hYx5r+yhmiaqQPbUgScyLWU6XvnR4zeCcaf5ib9U93",
	"nB9n0Q7kiB6oiJbje1c7yf05C/frh/EltfQatyMcrc3QTkRTU2RnSSxJ0zMyjVuQki0Re1eDHEsHrhWB",
	"M9qjRshtTmYh+JamjUBan/aw5OnegG47mnv7kFFURW5Pc0DYehHf0PXwTZwBFqtBN4Cl1zleyXPHEs9r",
	"+zvg8uyr/ueou5ImzPRbkqnGZP8cj6BkS2CF6oA6m5uRzU74/p2R12zFfY1bf1PKbRmXESIyC8LkC6yS",
	"zUhhsUWoXNXV11z4wjFnIzVP71LqVOD6nRxLp98C1pB1ub9WmM5I4D+5ImdBhbPqWt+6OQ3uA4VnmieL",
	"noKnE+zStxyn3VqsJ/dstou+fhfyeNC8lGWSENl+G9bQoiDmtN/SqdPKppk6dYmoP5St49AaNHYcyc7R",
	"2qlqd3qG+1qShtfB4TWN2e/rnLY/FLdbxcJ6uZ4icx20r1OeFP+yr1w1CdpejaNet2rhOoX+BzJYBxW/",
	"ixE729etVm7loQeuM3Sq+cetqhRBV4oCZXU4psxbNf1RZU7CRsWVub921/+E36yyNTbC7Pd9zj+s5zSV",
	"B+LMhrZ8yCyb8jbRHvxgBlWO8afxBrpaA8OJLbrTGB+eLHMkVbla/bnVp2x1Kw0Npfrp/dvDQmTTbmAJ",
	"kmUuUVkYjWxvLbVstsSqzB9/tLRdzEU5oXzttL8B4CZ/anl8OnXSyBD8Lh90NN3KYrQ2+1rp+um+QSt6",
	"072Dvob7IU/PuGPoW3oID6qrP4KrcKTREkjOLMOK3E+Wn7d61M97S9TvWYiKdNVkVVXIbUkZNpZV59bT",
	"ZtTNq9fnJBi+vK1Elrd90nB87P3Zht2fUoE06vF8jzHulX+1Ufe4z/8Wh9LSzEdrZvV+vtVkt4mE0N5X",
	"Wm+66lompXc+m2U8wdmGSzX/6ceffpzhggJxyoUwf5CgHijnMxOMf9nO+LUT3FaI9Px9iUqUZVvHSGD5",
	"ZiIdOLiVawegYPxb4NjKTdfNtTLpreB6NoO0O8b4wsEh/umz/68qwuNCUeiONmFN0DAbyPRw+/D/AQAA",
	"//+gHalyIIQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
