// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get foods
	// (GET /data/recipe_dependencies)
	RecipeDependencies(ctx echo.Context) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it.
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Get recipes
	// (GET /recipes/bulk)
	GetRecipesByIds(ctx echo.Context, params GetRecipesByIdsParams) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// RecipeDependencies converts echo context to params.
func (w *ServerInterfaceWrapper) RecipeDependencies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RecipeDependencies(ctx)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "data_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "data_types", ctx.QueryParams(), &params.DataTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data_types: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "fdc_id", runtime.ParamLocationPath, ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ingredient_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "ingredient_id", ctx.QueryParams(), &params.IngredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipesByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipesByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecipesByIdsParams
	// ------------- Required query parameter "recipe_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "recipe_id", ctx.QueryParams(), &params.RecipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipesByIds(ctx, params)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/albums", wrapper.ListAllAlbums)
	router.POST(baseURL+"/auth", wrapper.AuthLogin)
	router.GET(baseURL+"/data/recipe_dependencies", wrapper.RecipeDependencies)
	router.GET(baseURL+"/foods/bulk", wrapper.GetFoodsByIds)
	router.GET(baseURL+"/foods/search", wrapper.SearchFoods)
	router.GET(baseURL+"/foods/:fdc_id", wrapper.GetFoodById)
	router.GET(baseURL+"/ingredients", wrapper.ListIngredients)
	router.POST(baseURL+"/ingredients", wrapper.CreateIngredients)
	router.GET(baseURL+"/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST(baseURL+"/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST(baseURL+"/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST(baseURL+"/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET(baseURL+"/meals", wrapper.ListMeals)
	router.GET(baseURL+"/meals/:meal_id", wrapper.GetMealById)
	router.PATCH(baseURL+"/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.GET(baseURL+"/photos", wrapper.ListPhotos)
	router.GET(baseURL+"/recipes", wrapper.ListRecipes)
	router.POST(baseURL+"/recipes", wrapper.CreateRecipes)
	router.GET(baseURL+"/recipes/bulk", wrapper.GetRecipesByIds)
	router.GET(baseURL+"/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET(baseURL+"/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
