// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get foods
	// (GET /data/recipe_dependencies)
	RecipeDependencies(ctx echo.Context) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it.
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Get recipes
	// (GET /recipes/bulk)
	GetRecipesByIds(ctx echo.Context, params GetRecipesByIdsParams) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// RecipeDependencies converts echo context to params.
func (w *ServerInterfaceWrapper) RecipeDependencies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RecipeDependencies(ctx)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "data_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "data_types", ctx.QueryParams(), &params.DataTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data_types: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "fdc_id", runtime.ParamLocationPath, ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ingredient_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "ingredient_id", ctx.QueryParams(), &params.IngredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipesByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipesByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecipesByIdsParams
	// ------------- Required query parameter "recipe_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "recipe_id", ctx.QueryParams(), &params.RecipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipesByIds(ctx, params)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/albums", wrapper.ListAllAlbums)
	router.POST(baseURL+"/auth", wrapper.AuthLogin)
	router.GET(baseURL+"/data/recipe_dependencies", wrapper.RecipeDependencies)
	router.GET(baseURL+"/foods/bulk", wrapper.GetFoodsByIds)
	router.GET(baseURL+"/foods/search", wrapper.SearchFoods)
	router.GET(baseURL+"/foods/:fdc_id", wrapper.GetFoodById)
	router.GET(baseURL+"/ingredients", wrapper.ListIngredients)
	router.POST(baseURL+"/ingredients", wrapper.CreateIngredients)
	router.GET(baseURL+"/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST(baseURL+"/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST(baseURL+"/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST(baseURL+"/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET(baseURL+"/meals", wrapper.ListMeals)
	router.GET(baseURL+"/meals/:meal_id", wrapper.GetMealById)
	router.PATCH(baseURL+"/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.GET(baseURL+"/photos", wrapper.ListPhotos)
	router.GET(baseURL+"/recipes", wrapper.ListRecipes)
	router.POST(baseURL+"/recipes", wrapper.CreateRecipes)
	router.GET(baseURL+"/recipes/bulk", wrapper.GetRecipesByIds)
	router.GET(baseURL+"/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET(baseURL+"/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Q9P0ZfbD7cP/BwAA//8yJV88+2oAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
