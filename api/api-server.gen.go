// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get foods
	// (GET /data/recipe_dependencies)
	RecipeDependencies(ctx echo.Context) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it.
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Get recipes
	// (GET /recipes/bulk)
	GetRecipesByIds(ctx echo.Context, params GetRecipesByIdsParams) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// RecipeDependencies converts echo context to params.
func (w *ServerInterfaceWrapper) RecipeDependencies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RecipeDependencies(ctx)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "data_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "data_types", ctx.QueryParams(), &params.DataTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data_types: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "fdc_id", runtime.ParamLocationPath, ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ingredient_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "ingredient_id", ctx.QueryParams(), &params.IngredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipesByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipesByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecipesByIdsParams
	// ------------- Required query parameter "recipe_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "recipe_id", ctx.QueryParams(), &params.RecipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipesByIds(ctx, params)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/albums", wrapper.ListAllAlbums)
	router.POST(baseURL+"/auth", wrapper.AuthLogin)
	router.GET(baseURL+"/data/recipe_dependencies", wrapper.RecipeDependencies)
	router.GET(baseURL+"/foods/bulk", wrapper.GetFoodsByIds)
	router.GET(baseURL+"/foods/search", wrapper.SearchFoods)
	router.GET(baseURL+"/foods/:fdc_id", wrapper.GetFoodById)
	router.GET(baseURL+"/ingredients", wrapper.ListIngredients)
	router.POST(baseURL+"/ingredients", wrapper.CreateIngredients)
	router.GET(baseURL+"/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST(baseURL+"/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST(baseURL+"/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST(baseURL+"/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET(baseURL+"/meals", wrapper.ListMeals)
	router.GET(baseURL+"/meals/:meal_id", wrapper.GetMealById)
	router.PATCH(baseURL+"/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.GET(baseURL+"/photos", wrapper.ListPhotos)
	router.GET(baseURL+"/recipes", wrapper.ListRecipes)
	router.POST(baseURL+"/recipes", wrapper.CreateRecipes)
	router.GET(baseURL+"/recipes/bulk", wrapper.GetRecipesByIds)
	router.GET(baseURL+"/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET(baseURL+"/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
