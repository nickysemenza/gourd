// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get foods
	// (GET /data/recipe_dependencies)
	RecipeDependencies(ctx echo.Context) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it.
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Get recipes
	// (GET /recipes/bulk)
	GetRecipesByIds(ctx echo.Context, params GetRecipesByIdsParams) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// RecipeDependencies converts echo context to params.
func (w *ServerInterfaceWrapper) RecipeDependencies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RecipeDependencies(ctx)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "data_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "data_types", ctx.QueryParams(), &params.DataTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data_types: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "fdc_id", runtime.ParamLocationPath, ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ingredient_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "ingredient_id", ctx.QueryParams(), &params.IngredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipesByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipesByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecipesByIdsParams
	// ------------- Required query parameter "recipe_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "recipe_id", ctx.QueryParams(), &params.RecipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipesByIds(ctx, params)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/albums", wrapper.ListAllAlbums)
	router.POST(baseURL+"/auth", wrapper.AuthLogin)
	router.GET(baseURL+"/data/recipe_dependencies", wrapper.RecipeDependencies)
	router.GET(baseURL+"/foods/bulk", wrapper.GetFoodsByIds)
	router.GET(baseURL+"/foods/search", wrapper.SearchFoods)
	router.GET(baseURL+"/foods/:fdc_id", wrapper.GetFoodById)
	router.GET(baseURL+"/ingredients", wrapper.ListIngredients)
	router.POST(baseURL+"/ingredients", wrapper.CreateIngredients)
	router.GET(baseURL+"/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST(baseURL+"/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST(baseURL+"/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST(baseURL+"/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET(baseURL+"/meals", wrapper.ListMeals)
	router.GET(baseURL+"/meals/:meal_id", wrapper.GetMealById)
	router.PATCH(baseURL+"/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.GET(baseURL+"/photos", wrapper.ListPhotos)
	router.GET(baseURL+"/recipes", wrapper.ListRecipes)
	router.POST(baseURL+"/recipes", wrapper.CreateRecipes)
	router.GET(baseURL+"/recipes/bulk", wrapper.GetRecipesByIds)
	router.GET(baseURL+"/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET(baseURL+"/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
