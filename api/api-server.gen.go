// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get foods
	// (GET /data/recipe_dependencies)
	RecipeDependencies(ctx echo.Context) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Get recipes
	// (GET /recipes/bulk)
	GetRecipesByIds(ctx echo.Context, params GetRecipesByIdsParams) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// recipe as latex
	// (GET /recipes/{recipe_id}/latex)
	GetLatexByRecipeId(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// RecipeDependencies converts echo context to params.
func (w *ServerInterfaceWrapper) RecipeDependencies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RecipeDependencies(ctx)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "data_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "data_types", ctx.QueryParams(), &params.DataTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data_types: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "fdc_id", runtime.ParamLocationPath, ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ingredient_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "ingredient_id", ctx.QueryParams(), &params.IngredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipesByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipesByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecipesByIdsParams
	// ------------- Required query parameter "recipe_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "recipe_id", ctx.QueryParams(), &params.RecipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipesByIds(ctx, params)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// GetLatexByRecipeId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLatexByRecipeId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLatexByRecipeId(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/albums", wrapper.ListAllAlbums)
	router.POST(baseURL+"/auth", wrapper.AuthLogin)
	router.GET(baseURL+"/data/recipe_dependencies", wrapper.RecipeDependencies)
	router.GET(baseURL+"/foods/bulk", wrapper.GetFoodsByIds)
	router.GET(baseURL+"/foods/search", wrapper.SearchFoods)
	router.GET(baseURL+"/foods/:fdc_id", wrapper.GetFoodById)
	router.GET(baseURL+"/ingredients", wrapper.ListIngredients)
	router.POST(baseURL+"/ingredients", wrapper.CreateIngredients)
	router.GET(baseURL+"/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST(baseURL+"/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST(baseURL+"/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST(baseURL+"/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET(baseURL+"/meals", wrapper.ListMeals)
	router.GET(baseURL+"/meals/:meal_id", wrapper.GetMealById)
	router.PATCH(baseURL+"/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.GET(baseURL+"/photos", wrapper.ListPhotos)
	router.GET(baseURL+"/recipes", wrapper.ListRecipes)
	router.POST(baseURL+"/recipes", wrapper.CreateRecipes)
	router.GET(baseURL+"/recipes/bulk", wrapper.GetRecipesByIds)
	router.GET(baseURL+"/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET(baseURL+"/recipes/:recipe_id/latex", wrapper.GetLatexByRecipeId)
	router.GET(baseURL+"/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
