// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get foods
	// (GET /data/recipe_dependencies)
	RecipeDependencies(ctx echo.Context) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Get recipes
	// (GET /recipes/bulk)
	GetRecipesByIds(ctx echo.Context, params GetRecipesByIdsParams) error
	// scrape a recipe by URL
	// (POST /recipes/scrape)
	ScrapeRecipe(ctx echo.Context) error
	// sum up recipes
	// (POST /recipes/sum)
	SumRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// recipe as latex
	// (GET /recipes/{recipe_id}/latex)
	GetLatexByRecipeId(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// RecipeDependencies converts echo context to params.
func (w *ServerInterfaceWrapper) RecipeDependencies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RecipeDependencies(ctx)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "data_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "data_types", ctx.QueryParams(), &params.DataTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data_types: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "fdc_id", runtime.ParamLocationPath, ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ingredient_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "ingredient_id", ctx.QueryParams(), &params.IngredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipesByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipesByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecipesByIdsParams
	// ------------- Required query parameter "recipe_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "recipe_id", ctx.QueryParams(), &params.RecipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipesByIds(ctx, params)
	return err
}

// ScrapeRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ScrapeRecipe(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ScrapeRecipe(ctx)
	return err
}

// SumRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) SumRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SumRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// GetLatexByRecipeId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLatexByRecipeId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLatexByRecipeId(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/albums", wrapper.ListAllAlbums)
	router.POST(baseURL+"/auth", wrapper.AuthLogin)
	router.GET(baseURL+"/data/recipe_dependencies", wrapper.RecipeDependencies)
	router.GET(baseURL+"/foods/bulk", wrapper.GetFoodsByIds)
	router.GET(baseURL+"/foods/search", wrapper.SearchFoods)
	router.GET(baseURL+"/foods/:fdc_id", wrapper.GetFoodById)
	router.GET(baseURL+"/ingredients", wrapper.ListIngredients)
	router.POST(baseURL+"/ingredients", wrapper.CreateIngredients)
	router.GET(baseURL+"/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST(baseURL+"/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST(baseURL+"/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST(baseURL+"/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET(baseURL+"/meals", wrapper.ListMeals)
	router.GET(baseURL+"/meals/:meal_id", wrapper.GetMealById)
	router.PATCH(baseURL+"/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.GET(baseURL+"/photos", wrapper.ListPhotos)
	router.GET(baseURL+"/recipes", wrapper.ListRecipes)
	router.POST(baseURL+"/recipes", wrapper.CreateRecipes)
	router.GET(baseURL+"/recipes/bulk", wrapper.GetRecipesByIds)
	router.POST(baseURL+"/recipes/scrape", wrapper.ScrapeRecipe)
	router.POST(baseURL+"/recipes/sum", wrapper.SumRecipes)
	router.GET(baseURL+"/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET(baseURL+"/recipes/:recipe_id/latex", wrapper.GetLatexByRecipeId)
	router.GET(baseURL+"/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"7UxomqmWebh9+FcAAAD//6OwhywWewAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
