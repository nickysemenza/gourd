// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get app config
	// (GET /config)
	GetConfig(ctx echo.Context) error
	// Get foods
	// (GET /data/recipe_dependencies)
	RecipeDependencies(ctx echo.Context) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// load mappings
	// (POST /meta/load_ingredient_mappings)
	LoadIngredientMappings(ctx echo.Context) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Get recipes
	// (GET /recipes/bulk)
	GetRecipesByIds(ctx echo.Context, params GetRecipesByIdsParams) error
	// scrape a recipe by URL
	// (POST /recipes/scrape)
	ScrapeRecipe(ctx echo.Context) error
	// sum up recipes
	// (POST /recipes/sum)
	SumRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// recipe as latex
	// (GET /recipes/{recipe_id}/latex)
	GetLatexByRecipeId(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// RecipeDependencies converts echo context to params.
func (w *ServerInterfaceWrapper) RecipeDependencies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RecipeDependencies(ctx)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "data_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "data_types", ctx.QueryParams(), &params.DataTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data_types: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "fdc_id", runtime.ParamLocationPath, ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ingredient_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "ingredient_id", ctx.QueryParams(), &params.IngredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// LoadIngredientMappings converts echo context to params.
func (w *ServerInterfaceWrapper) LoadIngredientMappings(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LoadIngredientMappings(ctx)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipesByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipesByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecipesByIdsParams
	// ------------- Required query parameter "recipe_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "recipe_id", ctx.QueryParams(), &params.RecipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipesByIds(ctx, params)
	return err
}

// ScrapeRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ScrapeRecipe(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ScrapeRecipe(ctx)
	return err
}

// SumRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) SumRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SumRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// GetLatexByRecipeId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLatexByRecipeId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLatexByRecipeId(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/albums", wrapper.ListAllAlbums)
	router.POST(baseURL+"/auth", wrapper.AuthLogin)
	router.GET(baseURL+"/config", wrapper.GetConfig)
	router.GET(baseURL+"/data/recipe_dependencies", wrapper.RecipeDependencies)
	router.GET(baseURL+"/foods/bulk", wrapper.GetFoodsByIds)
	router.GET(baseURL+"/foods/search", wrapper.SearchFoods)
	router.GET(baseURL+"/foods/:fdc_id", wrapper.GetFoodById)
	router.GET(baseURL+"/ingredients", wrapper.ListIngredients)
	router.POST(baseURL+"/ingredients", wrapper.CreateIngredients)
	router.GET(baseURL+"/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST(baseURL+"/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST(baseURL+"/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST(baseURL+"/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET(baseURL+"/meals", wrapper.ListMeals)
	router.GET(baseURL+"/meals/:meal_id", wrapper.GetMealById)
	router.PATCH(baseURL+"/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.POST(baseURL+"/meta/load_ingredient_mappings", wrapper.LoadIngredientMappings)
	router.GET(baseURL+"/photos", wrapper.ListPhotos)
	router.GET(baseURL+"/recipes", wrapper.ListRecipes)
	router.POST(baseURL+"/recipes", wrapper.CreateRecipes)
	router.GET(baseURL+"/recipes/bulk", wrapper.GetRecipesByIds)
	router.POST(baseURL+"/recipes/scrape", wrapper.ScrapeRecipe)
	router.POST(baseURL+"/recipes/sum", wrapper.SumRecipes)
	router.GET(baseURL+"/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET(baseURL+"/recipes/:recipe_id/latex", wrapper.GetLatexByRecipeId)
	router.GET(baseURL+"/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"HwAA//9cdvDbKoQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
