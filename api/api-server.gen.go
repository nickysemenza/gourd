// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get foods
	// (GET /data/recipe_dependencies)
	RecipeDependencies(ctx echo.Context) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Get recipes
	// (GET /recipes/bulk)
	GetRecipesByIds(ctx echo.Context, params GetRecipesByIdsParams) error
	// sum up recipes
	// (POST /recipes/sum)
	SumRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// recipe as latex
	// (GET /recipes/{recipe_id}/latex)
	GetLatexByRecipeId(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// RecipeDependencies converts echo context to params.
func (w *ServerInterfaceWrapper) RecipeDependencies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RecipeDependencies(ctx)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "data_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "data_types", ctx.QueryParams(), &params.DataTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data_types: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "fdc_id", runtime.ParamLocationPath, ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ingredient_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "ingredient_id", ctx.QueryParams(), &params.IngredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipesByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipesByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecipesByIdsParams
	// ------------- Required query parameter "recipe_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "recipe_id", ctx.QueryParams(), &params.RecipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipesByIds(ctx, params)
	return err
}

// SumRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) SumRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SumRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// GetLatexByRecipeId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLatexByRecipeId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLatexByRecipeId(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/albums", wrapper.ListAllAlbums)
	router.POST(baseURL+"/auth", wrapper.AuthLogin)
	router.GET(baseURL+"/data/recipe_dependencies", wrapper.RecipeDependencies)
	router.GET(baseURL+"/foods/bulk", wrapper.GetFoodsByIds)
	router.GET(baseURL+"/foods/search", wrapper.SearchFoods)
	router.GET(baseURL+"/foods/:fdc_id", wrapper.GetFoodById)
	router.GET(baseURL+"/ingredients", wrapper.ListIngredients)
	router.POST(baseURL+"/ingredients", wrapper.CreateIngredients)
	router.GET(baseURL+"/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST(baseURL+"/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST(baseURL+"/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST(baseURL+"/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET(baseURL+"/meals", wrapper.ListMeals)
	router.GET(baseURL+"/meals/:meal_id", wrapper.GetMealById)
	router.PATCH(baseURL+"/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.GET(baseURL+"/photos", wrapper.ListPhotos)
	router.GET(baseURL+"/recipes", wrapper.ListRecipes)
	router.POST(baseURL+"/recipes", wrapper.CreateRecipes)
	router.GET(baseURL+"/recipes/bulk", wrapper.GetRecipesByIds)
	router.POST(baseURL+"/recipes/sum", wrapper.SumRecipes)
	router.GET(baseURL+"/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET(baseURL+"/recipes/:recipe_id/latex", wrapper.GetLatexByRecipeId)
	router.GET(baseURL+"/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"1bLTnOt5AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
