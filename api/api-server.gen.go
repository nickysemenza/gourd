// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get foods
	// (GET /data/recipe_dependencies)
	RecipeDependencies(ctx echo.Context) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it.
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Get recipes
	// (GET /recipes/bulk)
	GetRecipesByIds(ctx echo.Context, params GetRecipesByIdsParams) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// RecipeDependencies converts echo context to params.
func (w *ServerInterfaceWrapper) RecipeDependencies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RecipeDependencies(ctx)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "data_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "data_types", ctx.QueryParams(), &params.DataTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data_types: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "fdc_id", runtime.ParamLocationPath, ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ingredient_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "ingredient_id", ctx.QueryParams(), &params.IngredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipesByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipesByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecipesByIdsParams
	// ------------- Required query parameter "recipe_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "recipe_id", ctx.QueryParams(), &params.RecipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipesByIds(ctx, params)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/albums", wrapper.ListAllAlbums)
	router.POST(baseURL+"/auth", wrapper.AuthLogin)
	router.GET(baseURL+"/data/recipe_dependencies", wrapper.RecipeDependencies)
	router.GET(baseURL+"/foods/bulk", wrapper.GetFoodsByIds)
	router.GET(baseURL+"/foods/search", wrapper.SearchFoods)
	router.GET(baseURL+"/foods/:fdc_id", wrapper.GetFoodById)
	router.GET(baseURL+"/ingredients", wrapper.ListIngredients)
	router.POST(baseURL+"/ingredients", wrapper.CreateIngredients)
	router.GET(baseURL+"/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST(baseURL+"/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST(baseURL+"/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST(baseURL+"/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET(baseURL+"/meals", wrapper.ListMeals)
	router.GET(baseURL+"/meals/:meal_id", wrapper.GetMealById)
	router.PATCH(baseURL+"/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.GET(baseURL+"/photos", wrapper.ListPhotos)
	router.GET(baseURL+"/recipes", wrapper.ListRecipes)
	router.POST(baseURL+"/recipes", wrapper.CreateRecipes)
	router.GET(baseURL+"/recipes/bulk", wrapper.GetRecipesByIds)
	router.GET(baseURL+"/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET(baseURL+"/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"fFHoztYnhKFp+kz7cHf4/wAAAP//ZigJyN1vAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
