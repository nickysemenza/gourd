// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get foods
	// (GET /data/recipe_dependencies)
	RecipeDependencies(ctx echo.Context) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it.
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Get recipes
	// (GET /recipes/bulk)
	GetRecipesByIds(ctx echo.Context, params GetRecipesByIdsParams) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// RecipeDependencies converts echo context to params.
func (w *ServerInterfaceWrapper) RecipeDependencies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RecipeDependencies(ctx)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "data_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "data_types", ctx.QueryParams(), &params.DataTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data_types: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "fdc_id", runtime.ParamLocationPath, ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ingredient_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "ingredient_id", ctx.QueryParams(), &params.IngredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipesByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipesByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecipesByIdsParams
	// ------------- Required query parameter "recipe_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "recipe_id", ctx.QueryParams(), &params.RecipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipesByIds(ctx, params)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/albums", wrapper.ListAllAlbums)
	router.POST(baseURL+"/auth", wrapper.AuthLogin)
	router.GET(baseURL+"/data/recipe_dependencies", wrapper.RecipeDependencies)
	router.GET(baseURL+"/foods/bulk", wrapper.GetFoodsByIds)
	router.GET(baseURL+"/foods/search", wrapper.SearchFoods)
	router.GET(baseURL+"/foods/:fdc_id", wrapper.GetFoodById)
	router.GET(baseURL+"/ingredients", wrapper.ListIngredients)
	router.POST(baseURL+"/ingredients", wrapper.CreateIngredients)
	router.GET(baseURL+"/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST(baseURL+"/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST(baseURL+"/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST(baseURL+"/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET(baseURL+"/meals", wrapper.ListMeals)
	router.GET(baseURL+"/meals/:meal_id", wrapper.GetMealById)
	router.PATCH(baseURL+"/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.GET(baseURL+"/photos", wrapper.ListPhotos)
	router.GET(baseURL+"/recipes", wrapper.ListRecipes)
	router.POST(baseURL+"/recipes", wrapper.CreateRecipes)
	router.GET(baseURL+"/recipes/bulk", wrapper.GetRecipesByIds)
	router.GET(baseURL+"/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET(baseURL+"/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
