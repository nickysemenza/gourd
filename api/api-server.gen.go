// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get foods
	// (GET /data/recipe_dependencies)
	RecipeDependencies(ctx echo.Context) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// load mappings
	// (POST /meta/load_ingredient_mappings)
	LoadIngredientMappings(ctx echo.Context) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Get recipes
	// (GET /recipes/bulk)
	GetRecipesByIds(ctx echo.Context, params GetRecipesByIdsParams) error
	// scrape a recipe by URL
	// (POST /recipes/scrape)
	ScrapeRecipe(ctx echo.Context) error
	// sum up recipes
	// (POST /recipes/sum)
	SumRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// recipe as latex
	// (GET /recipes/{recipe_id}/latex)
	GetLatexByRecipeId(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// RecipeDependencies converts echo context to params.
func (w *ServerInterfaceWrapper) RecipeDependencies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RecipeDependencies(ctx)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "data_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "data_types", ctx.QueryParams(), &params.DataTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data_types: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "fdc_id", runtime.ParamLocationPath, ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ingredient_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "ingredient_id", ctx.QueryParams(), &params.IngredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// LoadIngredientMappings converts echo context to params.
func (w *ServerInterfaceWrapper) LoadIngredientMappings(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LoadIngredientMappings(ctx)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipesByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipesByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecipesByIdsParams
	// ------------- Required query parameter "recipe_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "recipe_id", ctx.QueryParams(), &params.RecipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipesByIds(ctx, params)
	return err
}

// ScrapeRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ScrapeRecipe(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ScrapeRecipe(ctx)
	return err
}

// SumRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) SumRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SumRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// GetLatexByRecipeId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLatexByRecipeId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLatexByRecipeId(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/albums", wrapper.ListAllAlbums)
	router.POST(baseURL+"/auth", wrapper.AuthLogin)
	router.GET(baseURL+"/data/recipe_dependencies", wrapper.RecipeDependencies)
	router.GET(baseURL+"/foods/bulk", wrapper.GetFoodsByIds)
	router.GET(baseURL+"/foods/search", wrapper.SearchFoods)
	router.GET(baseURL+"/foods/:fdc_id", wrapper.GetFoodById)
	router.GET(baseURL+"/ingredients", wrapper.ListIngredients)
	router.POST(baseURL+"/ingredients", wrapper.CreateIngredients)
	router.GET(baseURL+"/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST(baseURL+"/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST(baseURL+"/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST(baseURL+"/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET(baseURL+"/meals", wrapper.ListMeals)
	router.GET(baseURL+"/meals/:meal_id", wrapper.GetMealById)
	router.PATCH(baseURL+"/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.POST(baseURL+"/meta/load_ingredient_mappings", wrapper.LoadIngredientMappings)
	router.GET(baseURL+"/photos", wrapper.ListPhotos)
	router.GET(baseURL+"/recipes", wrapper.ListRecipes)
	router.POST(baseURL+"/recipes", wrapper.CreateRecipes)
	router.GET(baseURL+"/recipes/bulk", wrapper.GetRecipesByIds)
	router.POST(baseURL+"/recipes/scrape", wrapper.ScrapeRecipe)
	router.POST(baseURL+"/recipes/sum", wrapper.SumRecipes)
	router.GET(baseURL+"/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET(baseURL+"/recipes/:recipe_id/latex", wrapper.GetLatexByRecipeId)
	router.GET(baseURL+"/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
