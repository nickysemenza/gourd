// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get app config
	// (GET /config)
	GetConfig(ctx echo.Context) error
	// Get foods
	// (GET /data/recipe_dependencies)
	RecipeDependencies(ctx echo.Context) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// load mappings
	// (POST /meta/load_ingredient_mappings)
	LoadIngredientMappings(ctx echo.Context) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Get recipes
	// (GET /recipes/bulk)
	GetRecipesByIds(ctx echo.Context, params GetRecipesByIdsParams) error
	// scrape a recipe by URL
	// (POST /recipes/scrape)
	ScrapeRecipe(ctx echo.Context) error
	// sum up recipes
	// (POST /recipes/sum)
	SumRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// recipe as latex
	// (GET /recipes/{recipe_id}/latex)
	GetLatexByRecipeId(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// RecipeDependencies converts echo context to params.
func (w *ServerInterfaceWrapper) RecipeDependencies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RecipeDependencies(ctx)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "data_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "data_types", ctx.QueryParams(), &params.DataTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data_types: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "fdc_id", runtime.ParamLocationPath, ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ingredient_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "ingredient_id", ctx.QueryParams(), &params.IngredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// LoadIngredientMappings converts echo context to params.
func (w *ServerInterfaceWrapper) LoadIngredientMappings(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LoadIngredientMappings(ctx)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipesByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipesByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecipesByIdsParams
	// ------------- Required query parameter "recipe_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "recipe_id", ctx.QueryParams(), &params.RecipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipesByIds(ctx, params)
	return err
}

// ScrapeRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ScrapeRecipe(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ScrapeRecipe(ctx)
	return err
}

// SumRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) SumRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SumRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// GetLatexByRecipeId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLatexByRecipeId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLatexByRecipeId(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/albums", wrapper.ListAllAlbums)
	router.POST(baseURL+"/auth", wrapper.AuthLogin)
	router.GET(baseURL+"/config", wrapper.GetConfig)
	router.GET(baseURL+"/data/recipe_dependencies", wrapper.RecipeDependencies)
	router.GET(baseURL+"/foods/bulk", wrapper.GetFoodsByIds)
	router.GET(baseURL+"/foods/search", wrapper.SearchFoods)
	router.GET(baseURL+"/foods/:fdc_id", wrapper.GetFoodById)
	router.GET(baseURL+"/ingredients", wrapper.ListIngredients)
	router.POST(baseURL+"/ingredients", wrapper.CreateIngredients)
	router.GET(baseURL+"/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST(baseURL+"/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST(baseURL+"/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST(baseURL+"/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET(baseURL+"/meals", wrapper.ListMeals)
	router.GET(baseURL+"/meals/:meal_id", wrapper.GetMealById)
	router.PATCH(baseURL+"/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.POST(baseURL+"/meta/load_ingredient_mappings", wrapper.LoadIngredientMappings)
	router.GET(baseURL+"/photos", wrapper.ListPhotos)
	router.GET(baseURL+"/recipes", wrapper.ListRecipes)
	router.POST(baseURL+"/recipes", wrapper.CreateRecipes)
	router.GET(baseURL+"/recipes/bulk", wrapper.GetRecipesByIds)
	router.POST(baseURL+"/recipes/scrape", wrapper.ScrapeRecipe)
	router.POST(baseURL+"/recipes/sum", wrapper.SumRecipes)
	router.GET(baseURL+"/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET(baseURL+"/recipes/:recipe_id/latex", wrapper.GetLatexByRecipeId)
	router.GET(baseURL+"/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//qPLBb1GCAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
