// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get foods
	// (GET /data/recipe_dependencies)
	RecipeDependencies(ctx echo.Context) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it.
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Get recipes
	// (GET /recipes/bulk)
	GetRecipesByIds(ctx echo.Context, params GetRecipesByIdsParams) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// RecipeDependencies converts echo context to params.
func (w *ServerInterfaceWrapper) RecipeDependencies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RecipeDependencies(ctx)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "data_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "data_types", ctx.QueryParams(), &params.DataTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data_types: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "fdc_id", runtime.ParamLocationPath, ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ingredient_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "ingredient_id", ctx.QueryParams(), &params.IngredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipesByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipesByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecipesByIdsParams
	// ------------- Required query parameter "recipe_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "recipe_id", ctx.QueryParams(), &params.RecipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipesByIds(ctx, params)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/albums", wrapper.ListAllAlbums)
	router.POST(baseURL+"/auth", wrapper.AuthLogin)
	router.GET(baseURL+"/data/recipe_dependencies", wrapper.RecipeDependencies)
	router.GET(baseURL+"/foods/bulk", wrapper.GetFoodsByIds)
	router.GET(baseURL+"/foods/search", wrapper.SearchFoods)
	router.GET(baseURL+"/foods/:fdc_id", wrapper.GetFoodById)
	router.GET(baseURL+"/ingredients", wrapper.ListIngredients)
	router.POST(baseURL+"/ingredients", wrapper.CreateIngredients)
	router.GET(baseURL+"/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST(baseURL+"/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST(baseURL+"/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST(baseURL+"/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET(baseURL+"/meals", wrapper.ListMeals)
	router.GET(baseURL+"/meals/:meal_id", wrapper.GetMealById)
	router.PATCH(baseURL+"/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.GET(baseURL+"/photos", wrapper.ListPhotos)
	router.GET(baseURL+"/recipes", wrapper.ListRecipes)
	router.POST(baseURL+"/recipes", wrapper.CreateRecipes)
	router.GET(baseURL+"/recipes/bulk", wrapper.GetRecipesByIds)
	router.GET(baseURL+"/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET(baseURL+"/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"BwAA///5CEzuoXAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
