// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get foods
	// (GET /data/recipe_dependencies)
	RecipeDependencies(ctx echo.Context) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Get recipes
	// (GET /recipes/bulk)
	GetRecipesByIds(ctx echo.Context, params GetRecipesByIdsParams) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// RecipeDependencies converts echo context to params.
func (w *ServerInterfaceWrapper) RecipeDependencies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RecipeDependencies(ctx)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "data_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "data_types", ctx.QueryParams(), &params.DataTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data_types: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "fdc_id", runtime.ParamLocationPath, ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ingredient_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "ingredient_id", ctx.QueryParams(), &params.IngredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipesByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipesByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecipesByIdsParams
	// ------------- Required query parameter "recipe_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "recipe_id", ctx.QueryParams(), &params.RecipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipesByIds(ctx, params)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/albums", wrapper.ListAllAlbums)
	router.POST(baseURL+"/auth", wrapper.AuthLogin)
	router.GET(baseURL+"/data/recipe_dependencies", wrapper.RecipeDependencies)
	router.GET(baseURL+"/foods/bulk", wrapper.GetFoodsByIds)
	router.GET(baseURL+"/foods/search", wrapper.SearchFoods)
	router.GET(baseURL+"/foods/:fdc_id", wrapper.GetFoodById)
	router.GET(baseURL+"/ingredients", wrapper.ListIngredients)
	router.POST(baseURL+"/ingredients", wrapper.CreateIngredients)
	router.GET(baseURL+"/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST(baseURL+"/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST(baseURL+"/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST(baseURL+"/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET(baseURL+"/meals", wrapper.ListMeals)
	router.GET(baseURL+"/meals/:meal_id", wrapper.GetMealById)
	router.PATCH(baseURL+"/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.GET(baseURL+"/photos", wrapper.ListPhotos)
	router.GET(baseURL+"/recipes", wrapper.ListRecipes)
	router.POST(baseURL+"/recipes", wrapper.CreateRecipes)
	router.GET(baseURL+"/recipes/bulk", wrapper.GetRecipesByIds)
	router.GET(baseURL+"/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET(baseURL+"/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
