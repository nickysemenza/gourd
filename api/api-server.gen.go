// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get app config
	// (GET /config)
	GetConfig(ctx echo.Context) error
	// Get foods
	// (GET /data/recipe_dependencies)
	RecipeDependencies(ctx echo.Context) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// load mappings
	// (POST /meta/load_ingredient_mappings)
	LoadIngredientMappings(ctx echo.Context) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Get recipes
	// (GET /recipes/bulk)
	GetRecipesByIds(ctx echo.Context, params GetRecipesByIdsParams) error
	// scrape a recipe by URL
	// (POST /recipes/scrape)
	ScrapeRecipe(ctx echo.Context) error
	// sum up recipes
	// (POST /recipes/sum)
	SumRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// recipe as latex
	// (GET /recipes/{recipe_id}/latex)
	GetLatexByRecipeId(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// RecipeDependencies converts echo context to params.
func (w *ServerInterfaceWrapper) RecipeDependencies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RecipeDependencies(ctx)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "data_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "data_types", ctx.QueryParams(), &params.DataTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data_types: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "fdc_id", runtime.ParamLocationPath, ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ingredient_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "ingredient_id", ctx.QueryParams(), &params.IngredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// LoadIngredientMappings converts echo context to params.
func (w *ServerInterfaceWrapper) LoadIngredientMappings(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LoadIngredientMappings(ctx)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipesByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipesByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecipesByIdsParams
	// ------------- Required query parameter "recipe_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "recipe_id", ctx.QueryParams(), &params.RecipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipesByIds(ctx, params)
	return err
}

// ScrapeRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ScrapeRecipe(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ScrapeRecipe(ctx)
	return err
}

// SumRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) SumRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SumRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// GetLatexByRecipeId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLatexByRecipeId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLatexByRecipeId(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/albums", wrapper.ListAllAlbums)
	router.POST(baseURL+"/auth", wrapper.AuthLogin)
	router.GET(baseURL+"/config", wrapper.GetConfig)
	router.GET(baseURL+"/data/recipe_dependencies", wrapper.RecipeDependencies)
	router.GET(baseURL+"/foods/bulk", wrapper.GetFoodsByIds)
	router.GET(baseURL+"/foods/search", wrapper.SearchFoods)
	router.GET(baseURL+"/foods/:fdc_id", wrapper.GetFoodById)
	router.GET(baseURL+"/ingredients", wrapper.ListIngredients)
	router.POST(baseURL+"/ingredients", wrapper.CreateIngredients)
	router.GET(baseURL+"/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST(baseURL+"/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST(baseURL+"/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST(baseURL+"/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET(baseURL+"/meals", wrapper.ListMeals)
	router.GET(baseURL+"/meals/:meal_id", wrapper.GetMealById)
	router.PATCH(baseURL+"/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.POST(baseURL+"/meta/load_ingredient_mappings", wrapper.LoadIngredientMappings)
	router.GET(baseURL+"/photos", wrapper.ListPhotos)
	router.GET(baseURL+"/recipes", wrapper.ListRecipes)
	router.POST(baseURL+"/recipes", wrapper.CreateRecipes)
	router.GET(baseURL+"/recipes/bulk", wrapper.GetRecipesByIds)
	router.POST(baseURL+"/recipes/scrape", wrapper.ScrapeRecipe)
	router.POST(baseURL+"/recipes/sum", wrapper.SumRecipes)
	router.GET(baseURL+"/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET(baseURL+"/recipes/:recipe_id/latex", wrapper.GetLatexByRecipeId)
	router.GET(baseURL+"/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
