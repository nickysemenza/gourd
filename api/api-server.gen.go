// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get foods
	// (GET /data/recipe_dependencies)
	RecipeDependencies(ctx echo.Context) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it.
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Get recipes
	// (GET /recipes/bulk)
	GetRecipesByIds(ctx echo.Context, params GetRecipesByIdsParams) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// RecipeDependencies converts echo context to params.
func (w *ServerInterfaceWrapper) RecipeDependencies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RecipeDependencies(ctx)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "data_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "data_types", ctx.QueryParams(), &params.DataTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data_types: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "fdc_id", runtime.ParamLocationPath, ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ingredient_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "ingredient_id", ctx.QueryParams(), &params.IngredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipesByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipesByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecipesByIdsParams
	// ------------- Required query parameter "recipe_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "recipe_id", ctx.QueryParams(), &params.RecipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipesByIds(ctx, params)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/albums", wrapper.ListAllAlbums)
	router.POST(baseURL+"/auth", wrapper.AuthLogin)
	router.GET(baseURL+"/data/recipe_dependencies", wrapper.RecipeDependencies)
	router.GET(baseURL+"/foods/bulk", wrapper.GetFoodsByIds)
	router.GET(baseURL+"/foods/search", wrapper.SearchFoods)
	router.GET(baseURL+"/foods/:fdc_id", wrapper.GetFoodById)
	router.GET(baseURL+"/ingredients", wrapper.ListIngredients)
	router.POST(baseURL+"/ingredients", wrapper.CreateIngredients)
	router.GET(baseURL+"/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST(baseURL+"/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST(baseURL+"/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST(baseURL+"/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET(baseURL+"/meals", wrapper.ListMeals)
	router.GET(baseURL+"/meals/:meal_id", wrapper.GetMealById)
	router.PATCH(baseURL+"/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.GET(baseURL+"/photos", wrapper.ListPhotos)
	router.GET(baseURL+"/recipes", wrapper.ListRecipes)
	router.POST(baseURL+"/recipes", wrapper.CreateRecipes)
	router.GET(baseURL+"/recipes/bulk", wrapper.GetRecipesByIds)
	router.GET(baseURL+"/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET(baseURL+"/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w8bXPbNpp/BcO9mUtmaCvt9e6Dvty5SePzbrPniZ3ph4xHC5GPJNQkwACgZG3G//0G",
	"byRIghQp26na7YfdxiJenvc3PMDXKGF5wShQKaL516jAHOcggeu/MpITea1+Un+lIBJOCkkYjebR7QYQ",
	"LfMlcIHYChEJuUCSIQ6y5PQ8iiOihn0pge+jOKI4h2huVoziSCQbyLFZdYXLTEbz79/EUY4fSF7m0fw/",
	"1R+Emj++iyO5L9R0QiWsgUePj2bFAdgEYJ5skN4fvVKDX/cBpf8TRxy+lIRDGs0lL8GH0e4uJCd0rTdn",
	"q5WAw6RpUEbckwItYcU4ICExl4Su1e8JyzJIJJIbQBxEmUkkQPYBa3ZukLAi1JsAoR7dSM3Ri5yVVHZB",
	"xvp3hGmKSqo5VHBWAJcE9DzBSp5Adx5R+KEdFggeiowkRMaI0BVwDmmMQCZR3KZeHOkdOkvZfTujtzgr",
	"Azubn+NoxXiOZTSPUlYuM6hXMBzQ3Ko5+9ltY6bfVaPZ8ldIpNrvopSbjyCK7paSpaxDmV93MiAicVQK",
	"4N4Ht34bGjUq1ouEYPmRY5pC+p6xtAvO0nxcrNTXNlj644LtaAOKGjx/8iLBEtaM74MjN6wUsGFZuhDA",
	"t+rH0ChC1xxS4uxI57uduxDkn5qZB9nWnLJwMtNVRZ+cjV1CK4SI/BPnjHfJe4HWQIGTBIEagHIQAq/V",
	"svCA8yLTaLgf59ENy0FulErvgEq048wg3mRLNf4QJm5gCOCwOFwgyQqUwRYy1C8SkC4IXTH1979xWEXz",
	"6C+z2gXMrKmY+YL3GEe+gAxNU+PfurGPcZRiiRcG/sMT32GJb9VYNdFHrY2pGoz8nwJWY5UmCxKg0vt3",
	"b9FVGnUNZRzRUvJKgIOar035GFT+bpdSy9qNMOdY06RgXK0a2MV+QYpqBSMKkgl7XpvZoS2V6C9yXBSE",
	"rgP7ui/KWykR3OJMibCaNRqCT5TID2adLgQt2ba8aXLZFxafF23o+xTirSeiTfSUMiAnwbHyrWjFOBJM",
	"e/2mjiQsheME7okS2yKRhqO5aB/ildrMv0ZAVRjwOVqxkqZYTXPeQWiT5f7KMb8HucDJl5IIYiESJd/C",
	"frGiaSqqaeVy0ZyK15wkZSZLjrP2AnyRwRoneze24aHuAkRr6Mo4f4urCGaEC9EiZVWpNrkBnT8k3rVC",
	"txhVLRA7yJq79nHNLfjJ+jXHuU+XURyp/119iuLo/q9RHP3t7cXPURx9uNT/t7i4/SmKo5vrxeXHXpo6",
	"WxDUhYW1M08j7ZrjfLEDst6MnWHMcZcHOUvJivTEKRbWRUu9hrVHG5eKHaElvF2bqIT4dcnYOoPrDZMs",
	"GCboz6jQ3ztOFwtYlDwLWPtymZEEkdwEFd0ILSv5YoPFJhD5ZSVH+lNgXsIBSwi4vt0GqIvWJb4H2oie",
	"sYQzSfIgKJuKzc0Vze+oePBXIlT+1w9BBxvyxyQNbdiXbuw2wEEnSpraKME5oBVnuYrKrAYZdigfwlp2",
	"s15/R1IZoKv+eSQ6IZGrmF1zwe1VEbFC7oCkiYtsWQaSS0wRVl9QwqjEhKqI8x/evH90RHA82QvO0jKR",
	"PfLqfQzMlURmAY6Zn+NgfpRgEZjhPsRjlNwt3wTOLREi8VWVqAR0mSLvc5uOQyElSf3ISTIkN0Qg4i/2",
	"rApiigHtsTXwyNY0uizGPIh6DSq6eqfjI4wEyUmGOXqVkXvI9gijlKxWoBZAooAsI3T9ehyfNDjD7HgH",
	"EpNsKlOSDclSDnSIGALJDZYIc/CYNDaw7QAYiK9XNiE7FKI3E+XxOz+J4xwSUkAg7P9oPiAOmqeJLkd1",
	"xHYUkcxS/QQ6sQTEkqqBpyNTXIvUmNSjZsDfCE39SC6wetAXXTns+soPGRESvVIqWeA1oTqsR6WA1x1l",
	"MNXVzlL/y3Yox3RvS5E75UMVOUBISLWua7YXjUDEM0u25NgXn3cnqJUWSbjSeMskzrzyqBorEN5ikuFG",
	"4NhezwaSnQV/Ubpt11MDrQyL4EpS7T4WNEMunHAmBMJZZmA9HAv44MZVydvfOq7LuB6tQvL1AXDIJqIc",
	"cBaj3YYkG7TkJF1rRTYKLZkJj0Q3wpewwPI5Q8OnuqxDUbBFRIUxY6yAH6oH7JBnC0ctp6hvbNtBm1K7",
	"udiRuYK+j7F26QB7DaDab/270kwulUBizXb0CrvvyqspV5yQFUmQyXi6ZiEvM0mKjIS0Z5jzvbkcryAf",
	"7xbaFc4aqoB9DBHqU6FEMRgSl/qTCbygUgRGDcm6epCE02Nr0ZwJx2mqYcvZNmy7hyjbwK9L0sChTZu8",
	"wWjTkKJRw+wJvOpF4iYwFvsQsScWY0IA9nqFsAFoDm8eEi3clLH1Vl1NGdLMetUQ9tfGv5q6d6hAq30V",
	"W6H3ofr6yk0aXbINmagcJD4YGeoNHh+HULhqHsj0INKJbjscbi7zbCHzc6GprMMQgtp/dk9h7KTRTuAl",
	"UbiuXFwPDr5T66IyGojndaaDKBkj9QvHRWFbCXpQsx7wSVhNdeoN4I5C7DQxGofKwZhjR+QGiXLpNYYc",
	"X1HaAhfhwy4VTytf7UYo2tW++3kSz5YjqIDRYetdL3HeQQE0BZoEDpMoS+G/B6zkYjxtvEn3NnccZ1V1",
	"ptlcIOxbw/sOBBd+yNA3b/xWA/GIv1bcIl8XsS6thpjXU0ZCHLZE8d9E0jysp7Zu258leTKrg+a60Pvc",
	"CRMRiwxLEHJh9wtCJDcqWeWIMqnieCI0hDkTUqEIVDpo6y2WjGWAaX9MZi1BX0WJqT0X/ar9fxomX9ue",
	"o4b0pcRUEhnQSdvmgaoRo4qtApKec3j35Skm6casEULEghvYmJY5qr6OQ0KfJQSWWjJ2r8RiB0tBJEzk",
	"wo05ouip5PVzoLeHq0+AnSa1KX3U8YuVV08MLDwVq2tIQuoV+9p/yMJc0aKUR5uZo/Tud6kBhk5/qkFf",
	"EXpAWvtF0FmXgPgJCQUitMm2pvClJcdu+hARbkkOHzFdw0S/NZR5PozlQCU+/iFImw2ECsnLPimevle1",
	"2rhyX2P7JuIHeddrP16MgS/Dll79fjHe9OzYZtBRvDnYd2BNdNV4gF6RczhHys7MrJHpFmAL2/LZTRnt",
	"acPM6jx6RVZ6rddTj9iHZwYP9IMH+f0po0uYn5Q5plV0PiUUHGt7WiKQupLWYLZn8Rrw5y+HXCXKT8Mw",
	"hNyNvv/wUd8nCJoZcz/CXjjYGSK4EyXbW+IfBQt9OaA+JR0sE3bvQ/gDJp+8P7H6NnAGflufFkwLDSaV",
	"j7q+bLBbgVDdfEHXGSBrGLonGKlanGxDxyHVp4AlMGdEoRZnlddiTlgpUA5YlHw8SeytkpATOCJqOKa8",
	"fFwBhWmQQges1ZdQ0sw4WZPgNI53KCMU9NExelVwOCN5wbiciYTjAl7311Wm2kRRLoUkspTwwlFWf2+l",
	"ko/eakxPoPCvIvjHCeRQWjgjh3t9TkOgX0g0eyNNifka5EBB0yfdCK86RbrrjCEg2XUEOkq0pxjLgX39",
	"j6Oa8/wJ45Dt1eWpGD8bHgdQqDOhUISnPuhSB8kBmdZH11PhUq3q8ytCFTqMpiLQaYEfwjGGvdhqWzTU",
	"YnYNHbdjA8LrYG0jJ7RnTdNBEFpTt3QB0i1HMSIrXR0e2KXdmkF0hzx+CNLS77TrbeXr2u3xtnQ5fmhf",
	"o7j53ZWvLFCHFT9Sm3dxNrWykhO5v1Eg2NZ+wBz4RWk6yc1f712t6q+/3Lo7utrY6q81ABspC3M5193G",
	"0yF3Yu6C5DqNiOj/UJLc7wXkQP+JzxOWdy4aRRfXV7qDTy0o5rPZmshNuVRjZ/7k2ZqVPNXdaAlQ03Zt",
	"LxR/uLr1ksvoUg20p5joHZZ4aZqxqxJu9N35m/M3xtsAxQWJ5tF/6J/iqMByo2kz0z3q+p/rgdZBJSBa",
	"va7SaB79TIS8yLILM1WxRhSMCkPt79+8cWSyMSIuiowkevrsV2EsSH0puiV9FThdPdL9lWyFsNt36uG4",
	"bdUfkQo8dvmXZXXzowXBFBbsPQY9w16Rn4D+EOjmwmsAmJLCQwGJhNTceTWSX+Y55nvLH90HWVFK4rXQ",
	"imN+uFPjZ9hqRMFEgPM32kaZKhdbVXKbwhYyxTFxbhDXIkxS0MXRmSBrekbobAfL2RIn90DTM7XPX4T6",
	"l9zAGUnPJLsHeibZ2Z6V/EwA32qVawqZ0tef2VpbOP+1g89tQA2Dkb2JF7qKbz+Nfzfg7okyPWgT3bX1",
	"kJCVUmf6eucTkChrS6P55ztfvizFNXdQgrNMcdqXslJulDwYEK20pVjimT1OTt3BvdX6oOmx9ZzG2LaQ",
	"tPoAzJBnNEck3PONs2zqaWnVqXC09WkQoqnwl/qqLEt9Va+Pguqc0XBCj5wty+y+l/ZrtyBa7hFJu4S/",
	"BKl7737cX+mvgxpqFghpZnXDuF83KyoHmsSbdHxJrW11HAZYdOPX6cYwyFy29ThiKn3TXLHZ9b1dusWF",
	"EEL1kJn/NspjfHC498jMiNH1qy9qcNeZK3OAFAP7RKO6ZS6ioDhMeaXgpAXldOIGC9lBQf1q1PZxmqha",
	"k6EsxiGDoQRklSbIZr36DEbfzRxvNjqZ00sy3fQId+n9k6O22xlJhjDa4oyk7mbPKQmAMvsYvX/3FgGV",
	"fG+Mf1gSWgcJ05KHq8Yhw7e0WmMdU7vTrd8fecd+v4GV8SkZihvMTSu28s51KssTRxvAqe37fTij8BA8",
	"gMoIvXcXNtSYaskau6FY+vEUE6PmKZcT78bZs37TQIyV6re6Iakp11bBf2Tp/tkw9w8AuugbKATCPruX",
	"e1TgfcZweo6uTJ2FpNo/I3ggQooYEWnIJTom9bEjxN99I1z+Drts77o2/auuJyRPht4NcveKU8tozr42",
	"TMx0X1pTb6xHJamrs3nSIRlSVp9QfWch4GvblvA0suju2WLA+NETFZtLaFwHfLrwzLAQLCFY2td/eos6",
	"QWG6cJNVGPMLkZvmNf5jxOq5RSmYQtj3HOzm+vUoyRruqgvQ9Pxz8HXLuxc0j61LmX0GktEtcBNjussl",
	"pyLnSrAEsR5J80c352C0JlugYbl3ycc0+bdUWEi2qE/pp7hvM78W/FtW3w86BQX4U9AG/bCBTSBMW77N",
	"NXbH5uYxoWsd/7mLx6ampn5lFBH9lmuzfjZdFHPg66ni90HNGUyKxntzvf/L+fPjQtqBW1hiOKnK8YN9",
	"eMM+NWz/+u5gW2ljj7sRRdZm+xsiqX6hYQmGpOkJxcYtSGELfG/fNMXCgmtE4ISUVAu5ufVUcLYlaaPZ",
	"0HVSL1m616CbgTpxH4qKqivC0yoQ5jryN6w9fJNqgMFqsA5g6HWKOXluWeJ4bf72uDz7qv5zVLKkCDM9",
	"TdKPeJin0jmBLYQNqgXqZFIjcw3+91+MvKIr5h44c6lSbl4JGCEiM6+VuMAy2YwUFvN2ib0+/p5x9y7B",
	"yUjN89eUOg+3/EaVpZdXARPJmjdoUiNMJyTwn+zbON7DOFVe30qdBvSgfjtimke8rl6i+kO5RIvWoE+0",
	"JDtFp1i9D+ZY7V6q0rz2bNw0Zn+sr4f8objt8Opld4p0umCOLxwN/mWPQWoStLPeo44/aql6CTcVuAU2",
	"6Khs/9DJHn+07icdOgE5waqLO/2oWo26UuRZqcMdR87r9fccWQkb1XVk7tyh/jPe5jsnY/uPftvz3taD",
	"TQGmKSoPdCH1qXyLV18r4kxPtgyM09Mt95biodB5HN++Zcp1UJX/CLnXAS0/vnvtZBvXXlJkGtd+f49d",
	"YlWKQtMR7RSxLy3N1uLmBY3Pd4rspic8ZDKk0hR7UV7fzpjPZhlLcLZhQs5/+P6H72e4IIFen4LrpyDr",
	"iWI+0/1s5+3LG2aBuwqRnpc9K1EWbdMkAts3e6KDk1tt0wEUdOwfnFulMN1WZX1TIbifuQzQnaPTyeAU",
	"Vz3sf5U+PM8Xhe5sfTQYmqYPsx/vHv8/AAD//6lsS6D+cAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
