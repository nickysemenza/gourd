// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get foods
	// (GET /data/recipe_dependencies)
	RecipeDependencies(ctx echo.Context) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it.
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Get recipes
	// (GET /recipes/bulk)
	GetRecipesByIds(ctx echo.Context, params GetRecipesByIdsParams) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// RecipeDependencies converts echo context to params.
func (w *ServerInterfaceWrapper) RecipeDependencies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RecipeDependencies(ctx)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "data_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "data_types", ctx.QueryParams(), &params.DataTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data_types: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "fdc_id", runtime.ParamLocationPath, ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ingredient_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "ingredient_id", ctx.QueryParams(), &params.IngredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipesByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipesByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecipesByIdsParams
	// ------------- Required query parameter "recipe_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "recipe_id", ctx.QueryParams(), &params.RecipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipesByIds(ctx, params)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/albums", wrapper.ListAllAlbums)
	router.POST(baseURL+"/auth", wrapper.AuthLogin)
	router.GET(baseURL+"/data/recipe_dependencies", wrapper.RecipeDependencies)
	router.GET(baseURL+"/foods/bulk", wrapper.GetFoodsByIds)
	router.GET(baseURL+"/foods/search", wrapper.SearchFoods)
	router.GET(baseURL+"/foods/:fdc_id", wrapper.GetFoodById)
	router.GET(baseURL+"/ingredients", wrapper.ListIngredients)
	router.POST(baseURL+"/ingredients", wrapper.CreateIngredients)
	router.GET(baseURL+"/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST(baseURL+"/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST(baseURL+"/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST(baseURL+"/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET(baseURL+"/meals", wrapper.ListMeals)
	router.GET(baseURL+"/meals/:meal_id", wrapper.GetMealById)
	router.PATCH(baseURL+"/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.GET(baseURL+"/photos", wrapper.ListPhotos)
	router.GET(baseURL+"/recipes", wrapper.ListRecipes)
	router.POST(baseURL+"/recipes", wrapper.CreateRecipes)
	router.GET(baseURL+"/recipes/bulk", wrapper.GetRecipesByIds)
	router.GET(baseURL+"/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET(baseURL+"/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
