// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get app config
	// (GET /config)
	GetConfig(ctx echo.Context) error
	// Get foods
	// (GET /data/recipe_dependencies)
	RecipeDependencies(ctx echo.Context) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// load mappings
	// (POST /meta/load_ingredient_mappings)
	LoadIngredientMappings(ctx echo.Context) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Get recipes
	// (GET /recipes/bulk)
	GetRecipesByIds(ctx echo.Context, params GetRecipesByIdsParams) error
	// scrape a recipe by URL
	// (POST /recipes/scrape)
	ScrapeRecipe(ctx echo.Context) error
	// sum up recipes
	// (POST /recipes/sum)
	SumRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// recipe as latex
	// (GET /recipes/{recipe_id}/latex)
	GetLatexByRecipeId(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// RecipeDependencies converts echo context to params.
func (w *ServerInterfaceWrapper) RecipeDependencies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RecipeDependencies(ctx)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "data_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "data_types", ctx.QueryParams(), &params.DataTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data_types: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "fdc_id", runtime.ParamLocationPath, ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ingredient_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "ingredient_id", ctx.QueryParams(), &params.IngredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// LoadIngredientMappings converts echo context to params.
func (w *ServerInterfaceWrapper) LoadIngredientMappings(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LoadIngredientMappings(ctx)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipesByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipesByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecipesByIdsParams
	// ------------- Required query parameter "recipe_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "recipe_id", ctx.QueryParams(), &params.RecipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipesByIds(ctx, params)
	return err
}

// ScrapeRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ScrapeRecipe(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ScrapeRecipe(ctx)
	return err
}

// SumRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) SumRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SumRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// GetLatexByRecipeId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLatexByRecipeId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLatexByRecipeId(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/albums", wrapper.ListAllAlbums)
	router.POST(baseURL+"/auth", wrapper.AuthLogin)
	router.GET(baseURL+"/config", wrapper.GetConfig)
	router.GET(baseURL+"/data/recipe_dependencies", wrapper.RecipeDependencies)
	router.GET(baseURL+"/foods/bulk", wrapper.GetFoodsByIds)
	router.GET(baseURL+"/foods/search", wrapper.SearchFoods)
	router.GET(baseURL+"/foods/:fdc_id", wrapper.GetFoodById)
	router.GET(baseURL+"/ingredients", wrapper.ListIngredients)
	router.POST(baseURL+"/ingredients", wrapper.CreateIngredients)
	router.GET(baseURL+"/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST(baseURL+"/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST(baseURL+"/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST(baseURL+"/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET(baseURL+"/meals", wrapper.ListMeals)
	router.GET(baseURL+"/meals/:meal_id", wrapper.GetMealById)
	router.PATCH(baseURL+"/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.POST(baseURL+"/meta/load_ingredient_mappings", wrapper.LoadIngredientMappings)
	router.GET(baseURL+"/photos", wrapper.ListPhotos)
	router.GET(baseURL+"/recipes", wrapper.ListRecipes)
	router.POST(baseURL+"/recipes", wrapper.CreateRecipes)
	router.GET(baseURL+"/recipes/bulk", wrapper.GetRecipesByIds)
	router.POST(baseURL+"/recipes/scrape", wrapper.ScrapeRecipe)
	router.POST(baseURL+"/recipes/sum", wrapper.SumRecipes)
	router.GET(baseURL+"/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET(baseURL+"/recipes/:recipe_id/latex", wrapper.GetLatexByRecipeId)
	router.GET(baseURL+"/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//6rWZWXqgwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
