// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get foods
	// (GET /data/recipe_dependencies)
	RecipeDependencies(ctx echo.Context) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it.
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Get recipes
	// (GET /recipes/bulk)
	GetRecipesByIds(ctx echo.Context, params GetRecipesByIdsParams) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// RecipeDependencies converts echo context to params.
func (w *ServerInterfaceWrapper) RecipeDependencies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RecipeDependencies(ctx)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "data_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "data_types", ctx.QueryParams(), &params.DataTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data_types: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "fdc_id", runtime.ParamLocationPath, ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ingredient_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "ingredient_id", ctx.QueryParams(), &params.IngredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipesByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipesByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecipesByIdsParams
	// ------------- Required query parameter "recipe_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "recipe_id", ctx.QueryParams(), &params.RecipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipesByIds(ctx, params)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/albums", wrapper.ListAllAlbums)
	router.POST(baseURL+"/auth", wrapper.AuthLogin)
	router.GET(baseURL+"/data/recipe_dependencies", wrapper.RecipeDependencies)
	router.GET(baseURL+"/foods/bulk", wrapper.GetFoodsByIds)
	router.GET(baseURL+"/foods/search", wrapper.SearchFoods)
	router.GET(baseURL+"/foods/:fdc_id", wrapper.GetFoodById)
	router.GET(baseURL+"/ingredients", wrapper.ListIngredients)
	router.POST(baseURL+"/ingredients", wrapper.CreateIngredients)
	router.GET(baseURL+"/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST(baseURL+"/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST(baseURL+"/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST(baseURL+"/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET(baseURL+"/meals", wrapper.ListMeals)
	router.GET(baseURL+"/meals/:meal_id", wrapper.GetMealById)
	router.PATCH(baseURL+"/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.GET(baseURL+"/photos", wrapper.ListPhotos)
	router.GET(baseURL+"/recipes", wrapper.ListRecipes)
	router.POST(baseURL+"/recipes", wrapper.CreateRecipes)
	router.GET(baseURL+"/recipes/bulk", wrapper.GetRecipesByIds)
	router.GET(baseURL+"/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET(baseURL+"/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
