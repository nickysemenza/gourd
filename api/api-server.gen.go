// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get foods
	// (GET /data/recipe_dependencies)
	RecipeDependencies(ctx echo.Context) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// load mappings
	// (POST /meta/load_ingredient_mappings)
	LoadIngredientMappings(ctx echo.Context) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Get recipes
	// (GET /recipes/bulk)
	GetRecipesByIds(ctx echo.Context, params GetRecipesByIdsParams) error
	// scrape a recipe by URL
	// (POST /recipes/scrape)
	ScrapeRecipe(ctx echo.Context) error
	// sum up recipes
	// (POST /recipes/sum)
	SumRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// recipe as latex
	// (GET /recipes/{recipe_id}/latex)
	GetLatexByRecipeId(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// RecipeDependencies converts echo context to params.
func (w *ServerInterfaceWrapper) RecipeDependencies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RecipeDependencies(ctx)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "data_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "data_types", ctx.QueryParams(), &params.DataTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data_types: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "fdc_id", runtime.ParamLocationPath, ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ingredient_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "ingredient_id", ctx.QueryParams(), &params.IngredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// LoadIngredientMappings converts echo context to params.
func (w *ServerInterfaceWrapper) LoadIngredientMappings(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LoadIngredientMappings(ctx)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipesByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipesByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecipesByIdsParams
	// ------------- Required query parameter "recipe_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "recipe_id", ctx.QueryParams(), &params.RecipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipesByIds(ctx, params)
	return err
}

// ScrapeRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ScrapeRecipe(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ScrapeRecipe(ctx)
	return err
}

// SumRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) SumRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SumRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// GetLatexByRecipeId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLatexByRecipeId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLatexByRecipeId(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/albums", wrapper.ListAllAlbums)
	router.POST(baseURL+"/auth", wrapper.AuthLogin)
	router.GET(baseURL+"/data/recipe_dependencies", wrapper.RecipeDependencies)
	router.GET(baseURL+"/foods/bulk", wrapper.GetFoodsByIds)
	router.GET(baseURL+"/foods/search", wrapper.SearchFoods)
	router.GET(baseURL+"/foods/:fdc_id", wrapper.GetFoodById)
	router.GET(baseURL+"/ingredients", wrapper.ListIngredients)
	router.POST(baseURL+"/ingredients", wrapper.CreateIngredients)
	router.GET(baseURL+"/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST(baseURL+"/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST(baseURL+"/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST(baseURL+"/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET(baseURL+"/meals", wrapper.ListMeals)
	router.GET(baseURL+"/meals/:meal_id", wrapper.GetMealById)
	router.PATCH(baseURL+"/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.POST(baseURL+"/meta/load_ingredient_mappings", wrapper.LoadIngredientMappings)
	router.GET(baseURL+"/photos", wrapper.ListPhotos)
	router.GET(baseURL+"/recipes", wrapper.ListRecipes)
	router.POST(baseURL+"/recipes", wrapper.CreateRecipes)
	router.GET(baseURL+"/recipes/bulk", wrapper.GetRecipesByIds)
	router.POST(baseURL+"/recipes/scrape", wrapper.ScrapeRecipe)
	router.POST(baseURL+"/recipes/sum", wrapper.SumRecipes)
	router.GET(baseURL+"/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET(baseURL+"/recipes/:recipe_id/latex", wrapper.GetLatexByRecipeId)
	router.GET(baseURL+"/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
