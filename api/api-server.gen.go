// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get foods
	// (GET /data/recipe_dependencies)
	RecipeDependencies(ctx echo.Context) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it.
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Get recipes
	// (GET /recipes/bulk)
	GetRecipesByIds(ctx echo.Context, params GetRecipesByIdsParams) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// RecipeDependencies converts echo context to params.
func (w *ServerInterfaceWrapper) RecipeDependencies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RecipeDependencies(ctx)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "data_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "data_types", ctx.QueryParams(), &params.DataTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data_types: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "fdc_id", runtime.ParamLocationPath, ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ingredient_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "ingredient_id", ctx.QueryParams(), &params.IngredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipesByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipesByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecipesByIdsParams
	// ------------- Required query parameter "recipe_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "recipe_id", ctx.QueryParams(), &params.RecipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipesByIds(ctx, params)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/albums", wrapper.ListAllAlbums)
	router.POST(baseURL+"/auth", wrapper.AuthLogin)
	router.GET(baseURL+"/data/recipe_dependencies", wrapper.RecipeDependencies)
	router.GET(baseURL+"/foods/bulk", wrapper.GetFoodsByIds)
	router.GET(baseURL+"/foods/search", wrapper.SearchFoods)
	router.GET(baseURL+"/foods/:fdc_id", wrapper.GetFoodById)
	router.GET(baseURL+"/ingredients", wrapper.ListIngredients)
	router.POST(baseURL+"/ingredients", wrapper.CreateIngredients)
	router.GET(baseURL+"/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST(baseURL+"/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST(baseURL+"/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST(baseURL+"/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET(baseURL+"/meals", wrapper.ListMeals)
	router.GET(baseURL+"/meals/:meal_id", wrapper.GetMealById)
	router.PATCH(baseURL+"/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.GET(baseURL+"/photos", wrapper.ListPhotos)
	router.GET(baseURL+"/recipes", wrapper.ListRecipes)
	router.POST(baseURL+"/recipes", wrapper.CreateRecipes)
	router.GET(baseURL+"/recipes/bulk", wrapper.GetRecipesByIds)
	router.GET(baseURL+"/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET(baseURL+"/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"57NCd7V+FQwt0+/Y9zf3/xcAAP//gkrWl/FmAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
