// Code generated by SQLBoiler 4.10.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package usdamodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UsdaFoodNutrientRaw is an object representing the database table.
type UsdaFoodNutrientRaw struct {
	ID              int          `boil:"id" json:"id" toml:"id" yaml:"id"`
	FDCID           null.Int     `boil:"fdc_id" json:"fdc_id,omitempty" toml:"fdc_id" yaml:"fdc_id,omitempty"`
	NutrientID      null.Int     `boil:"nutrient_id" json:"nutrient_id,omitempty" toml:"nutrient_id" yaml:"nutrient_id,omitempty"`
	Amount          null.Float32 `boil:"amount" json:"amount,omitempty" toml:"amount" yaml:"amount,omitempty"`
	DataPoints      null.Int     `boil:"data_points" json:"data_points,omitempty" toml:"data_points" yaml:"data_points,omitempty"`
	DerivationID    null.Int     `boil:"derivation_id" json:"derivation_id,omitempty" toml:"derivation_id" yaml:"derivation_id,omitempty"`
	Min             null.Float32 `boil:"min" json:"min,omitempty" toml:"min" yaml:"min,omitempty"`
	Max             null.Float32 `boil:"max" json:"max,omitempty" toml:"max" yaml:"max,omitempty"`
	Median          null.Float32 `boil:"median" json:"median,omitempty" toml:"median" yaml:"median,omitempty"`
	Loq             null.Float32 `boil:"loq" json:"loq,omitempty" toml:"loq" yaml:"loq,omitempty"`
	Footnote        null.String  `boil:"footnote" json:"footnote,omitempty" toml:"footnote" yaml:"footnote,omitempty"`
	MinYearAcquired null.String  `boil:"min_year_acquired" json:"min_year_acquired,omitempty" toml:"min_year_acquired" yaml:"min_year_acquired,omitempty"`

	R *usdaFoodNutrientRawR `boil:"rel" json:"rel" toml:"rel" yaml:"rel"`
	L usdaFoodNutrientRawL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UsdaFoodNutrientRawColumns = struct {
	ID              string
	FDCID           string
	NutrientID      string
	Amount          string
	DataPoints      string
	DerivationID    string
	Min             string
	Max             string
	Median          string
	Loq             string
	Footnote        string
	MinYearAcquired string
}{
	ID:              "id",
	FDCID:           "fdc_id",
	NutrientID:      "nutrient_id",
	Amount:          "amount",
	DataPoints:      "data_points",
	DerivationID:    "derivation_id",
	Min:             "min",
	Max:             "max",
	Median:          "median",
	Loq:             "loq",
	Footnote:        "footnote",
	MinYearAcquired: "min_year_acquired",
}

var UsdaFoodNutrientRawTableColumns = struct {
	ID              string
	FDCID           string
	NutrientID      string
	Amount          string
	DataPoints      string
	DerivationID    string
	Min             string
	Max             string
	Median          string
	Loq             string
	Footnote        string
	MinYearAcquired string
}{
	ID:              "usda_food_nutrient_raw.id",
	FDCID:           "usda_food_nutrient_raw.fdc_id",
	NutrientID:      "usda_food_nutrient_raw.nutrient_id",
	Amount:          "usda_food_nutrient_raw.amount",
	DataPoints:      "usda_food_nutrient_raw.data_points",
	DerivationID:    "usda_food_nutrient_raw.derivation_id",
	Min:             "usda_food_nutrient_raw.min",
	Max:             "usda_food_nutrient_raw.max",
	Median:          "usda_food_nutrient_raw.median",
	Loq:             "usda_food_nutrient_raw.loq",
	Footnote:        "usda_food_nutrient_raw.footnote",
	MinYearAcquired: "usda_food_nutrient_raw.min_year_acquired",
}

// Generated where

var UsdaFoodNutrientRawWhere = struct {
	ID              whereHelperint
	FDCID           whereHelpernull_Int
	NutrientID      whereHelpernull_Int
	Amount          whereHelpernull_Float32
	DataPoints      whereHelpernull_Int
	DerivationID    whereHelpernull_Int
	Min             whereHelpernull_Float32
	Max             whereHelpernull_Float32
	Median          whereHelpernull_Float32
	Loq             whereHelpernull_Float32
	Footnote        whereHelpernull_String
	MinYearAcquired whereHelpernull_String
}{
	ID:              whereHelperint{field: "\"usda_food_nutrient_raw\".\"id\""},
	FDCID:           whereHelpernull_Int{field: "\"usda_food_nutrient_raw\".\"fdc_id\""},
	NutrientID:      whereHelpernull_Int{field: "\"usda_food_nutrient_raw\".\"nutrient_id\""},
	Amount:          whereHelpernull_Float32{field: "\"usda_food_nutrient_raw\".\"amount\""},
	DataPoints:      whereHelpernull_Int{field: "\"usda_food_nutrient_raw\".\"data_points\""},
	DerivationID:    whereHelpernull_Int{field: "\"usda_food_nutrient_raw\".\"derivation_id\""},
	Min:             whereHelpernull_Float32{field: "\"usda_food_nutrient_raw\".\"min\""},
	Max:             whereHelpernull_Float32{field: "\"usda_food_nutrient_raw\".\"max\""},
	Median:          whereHelpernull_Float32{field: "\"usda_food_nutrient_raw\".\"median\""},
	Loq:             whereHelpernull_Float32{field: "\"usda_food_nutrient_raw\".\"loq\""},
	Footnote:        whereHelpernull_String{field: "\"usda_food_nutrient_raw\".\"footnote\""},
	MinYearAcquired: whereHelpernull_String{field: "\"usda_food_nutrient_raw\".\"min_year_acquired\""},
}

// UsdaFoodNutrientRawRels is where relationship names are stored.
var UsdaFoodNutrientRawRels = struct {
}{}

// usdaFoodNutrientRawR is where relationships are stored.
type usdaFoodNutrientRawR struct {
}

// NewStruct creates a new relationship struct
func (*usdaFoodNutrientRawR) NewStruct() *usdaFoodNutrientRawR {
	return &usdaFoodNutrientRawR{}
}

// usdaFoodNutrientRawL is where Load methods for each relationship are stored.
type usdaFoodNutrientRawL struct{}

var (
	usdaFoodNutrientRawAllColumns            = []string{"id", "fdc_id", "nutrient_id", "amount", "data_points", "derivation_id", "min", "max", "median", "loq", "footnote", "min_year_acquired"}
	usdaFoodNutrientRawColumnsWithoutDefault = []string{"id"}
	usdaFoodNutrientRawColumnsWithDefault    = []string{"fdc_id", "nutrient_id", "amount", "data_points", "derivation_id", "min", "max", "median", "loq", "footnote", "min_year_acquired"}
	usdaFoodNutrientRawPrimaryKeyColumns     = []string{"id"}
	usdaFoodNutrientRawGeneratedColumns      = []string{}
)

type (
	// UsdaFoodNutrientRawSlice is an alias for a slice of pointers to UsdaFoodNutrientRaw.
	// This should almost always be used instead of []UsdaFoodNutrientRaw.
	UsdaFoodNutrientRawSlice []*UsdaFoodNutrientRaw
	// UsdaFoodNutrientRawHook is the signature for custom UsdaFoodNutrientRaw hook methods
	UsdaFoodNutrientRawHook func(context.Context, boil.ContextExecutor, *UsdaFoodNutrientRaw) error

	usdaFoodNutrientRawQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usdaFoodNutrientRawType                 = reflect.TypeOf(&UsdaFoodNutrientRaw{})
	usdaFoodNutrientRawMapping              = queries.MakeStructMapping(usdaFoodNutrientRawType)
	usdaFoodNutrientRawPrimaryKeyMapping, _ = queries.BindMapping(usdaFoodNutrientRawType, usdaFoodNutrientRawMapping, usdaFoodNutrientRawPrimaryKeyColumns)
	usdaFoodNutrientRawInsertCacheMut       sync.RWMutex
	usdaFoodNutrientRawInsertCache          = make(map[string]insertCache)
	usdaFoodNutrientRawUpdateCacheMut       sync.RWMutex
	usdaFoodNutrientRawUpdateCache          = make(map[string]updateCache)
	usdaFoodNutrientRawUpsertCacheMut       sync.RWMutex
	usdaFoodNutrientRawUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var usdaFoodNutrientRawAfterSelectHooks []UsdaFoodNutrientRawHook

var usdaFoodNutrientRawBeforeInsertHooks []UsdaFoodNutrientRawHook
var usdaFoodNutrientRawAfterInsertHooks []UsdaFoodNutrientRawHook

var usdaFoodNutrientRawBeforeUpdateHooks []UsdaFoodNutrientRawHook
var usdaFoodNutrientRawAfterUpdateHooks []UsdaFoodNutrientRawHook

var usdaFoodNutrientRawBeforeDeleteHooks []UsdaFoodNutrientRawHook
var usdaFoodNutrientRawAfterDeleteHooks []UsdaFoodNutrientRawHook

var usdaFoodNutrientRawBeforeUpsertHooks []UsdaFoodNutrientRawHook
var usdaFoodNutrientRawAfterUpsertHooks []UsdaFoodNutrientRawHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UsdaFoodNutrientRaw) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientRawAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UsdaFoodNutrientRaw) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientRawBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UsdaFoodNutrientRaw) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientRawAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UsdaFoodNutrientRaw) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientRawBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UsdaFoodNutrientRaw) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientRawAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UsdaFoodNutrientRaw) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientRawBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UsdaFoodNutrientRaw) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientRawAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UsdaFoodNutrientRaw) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientRawBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UsdaFoodNutrientRaw) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientRawAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUsdaFoodNutrientRawHook registers your hook function for all future operations.
func AddUsdaFoodNutrientRawHook(hookPoint boil.HookPoint, usdaFoodNutrientRawHook UsdaFoodNutrientRawHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		usdaFoodNutrientRawAfterSelectHooks = append(usdaFoodNutrientRawAfterSelectHooks, usdaFoodNutrientRawHook)
	case boil.BeforeInsertHook:
		usdaFoodNutrientRawBeforeInsertHooks = append(usdaFoodNutrientRawBeforeInsertHooks, usdaFoodNutrientRawHook)
	case boil.AfterInsertHook:
		usdaFoodNutrientRawAfterInsertHooks = append(usdaFoodNutrientRawAfterInsertHooks, usdaFoodNutrientRawHook)
	case boil.BeforeUpdateHook:
		usdaFoodNutrientRawBeforeUpdateHooks = append(usdaFoodNutrientRawBeforeUpdateHooks, usdaFoodNutrientRawHook)
	case boil.AfterUpdateHook:
		usdaFoodNutrientRawAfterUpdateHooks = append(usdaFoodNutrientRawAfterUpdateHooks, usdaFoodNutrientRawHook)
	case boil.BeforeDeleteHook:
		usdaFoodNutrientRawBeforeDeleteHooks = append(usdaFoodNutrientRawBeforeDeleteHooks, usdaFoodNutrientRawHook)
	case boil.AfterDeleteHook:
		usdaFoodNutrientRawAfterDeleteHooks = append(usdaFoodNutrientRawAfterDeleteHooks, usdaFoodNutrientRawHook)
	case boil.BeforeUpsertHook:
		usdaFoodNutrientRawBeforeUpsertHooks = append(usdaFoodNutrientRawBeforeUpsertHooks, usdaFoodNutrientRawHook)
	case boil.AfterUpsertHook:
		usdaFoodNutrientRawAfterUpsertHooks = append(usdaFoodNutrientRawAfterUpsertHooks, usdaFoodNutrientRawHook)
	}
}

// One returns a single usdaFoodNutrientRaw record from the query.
func (q usdaFoodNutrientRawQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UsdaFoodNutrientRaw, error) {
	o := &UsdaFoodNutrientRaw{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "usdamodels: failed to execute a one query for usda_food_nutrient_raw")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UsdaFoodNutrientRaw records from the query.
func (q usdaFoodNutrientRawQuery) All(ctx context.Context, exec boil.ContextExecutor) (UsdaFoodNutrientRawSlice, error) {
	var o []*UsdaFoodNutrientRaw

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "usdamodels: failed to assign all query results to UsdaFoodNutrientRaw slice")
	}

	if len(usdaFoodNutrientRawAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UsdaFoodNutrientRaw records in the query.
func (q usdaFoodNutrientRawQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: failed to count usda_food_nutrient_raw rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q usdaFoodNutrientRawQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "usdamodels: failed to check if usda_food_nutrient_raw exists")
	}

	return count > 0, nil
}

// UsdaFoodNutrientRaws retrieves all the records using an executor.
func UsdaFoodNutrientRaws(mods ...qm.QueryMod) usdaFoodNutrientRawQuery {
	mods = append(mods, qm.From("\"usda_food_nutrient_raw\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"usda_food_nutrient_raw\".*"})
	}

	return usdaFoodNutrientRawQuery{q}
}

// FindUsdaFoodNutrientRaw retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUsdaFoodNutrientRaw(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UsdaFoodNutrientRaw, error) {
	usdaFoodNutrientRawObj := &UsdaFoodNutrientRaw{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"usda_food_nutrient_raw\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, usdaFoodNutrientRawObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "usdamodels: unable to select from usda_food_nutrient_raw")
	}

	if err = usdaFoodNutrientRawObj.doAfterSelectHooks(ctx, exec); err != nil {
		return usdaFoodNutrientRawObj, err
	}

	return usdaFoodNutrientRawObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UsdaFoodNutrientRaw) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("usdamodels: no usda_food_nutrient_raw provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaFoodNutrientRawColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	usdaFoodNutrientRawInsertCacheMut.RLock()
	cache, cached := usdaFoodNutrientRawInsertCache[key]
	usdaFoodNutrientRawInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			usdaFoodNutrientRawAllColumns,
			usdaFoodNutrientRawColumnsWithDefault,
			usdaFoodNutrientRawColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(usdaFoodNutrientRawType, usdaFoodNutrientRawMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(usdaFoodNutrientRawType, usdaFoodNutrientRawMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"usda_food_nutrient_raw\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"usda_food_nutrient_raw\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "usdamodels: unable to insert into usda_food_nutrient_raw")
	}

	if !cached {
		usdaFoodNutrientRawInsertCacheMut.Lock()
		usdaFoodNutrientRawInsertCache[key] = cache
		usdaFoodNutrientRawInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UsdaFoodNutrientRaw.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UsdaFoodNutrientRaw) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	usdaFoodNutrientRawUpdateCacheMut.RLock()
	cache, cached := usdaFoodNutrientRawUpdateCache[key]
	usdaFoodNutrientRawUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			usdaFoodNutrientRawAllColumns,
			usdaFoodNutrientRawPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("usdamodels: unable to update usda_food_nutrient_raw, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"usda_food_nutrient_raw\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, usdaFoodNutrientRawPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(usdaFoodNutrientRawType, usdaFoodNutrientRawMapping, append(wl, usdaFoodNutrientRawPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to update usda_food_nutrient_raw row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: failed to get rows affected by update for usda_food_nutrient_raw")
	}

	if !cached {
		usdaFoodNutrientRawUpdateCacheMut.Lock()
		usdaFoodNutrientRawUpdateCache[key] = cache
		usdaFoodNutrientRawUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q usdaFoodNutrientRawQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to update all for usda_food_nutrient_raw")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to retrieve rows affected for usda_food_nutrient_raw")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UsdaFoodNutrientRawSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("usdamodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaFoodNutrientRawPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"usda_food_nutrient_raw\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, usdaFoodNutrientRawPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to update all in usdaFoodNutrientRaw slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to retrieve rows affected all in update all usdaFoodNutrientRaw")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UsdaFoodNutrientRaw) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("usdamodels: no usda_food_nutrient_raw provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaFoodNutrientRawColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	usdaFoodNutrientRawUpsertCacheMut.RLock()
	cache, cached := usdaFoodNutrientRawUpsertCache[key]
	usdaFoodNutrientRawUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			usdaFoodNutrientRawAllColumns,
			usdaFoodNutrientRawColumnsWithDefault,
			usdaFoodNutrientRawColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			usdaFoodNutrientRawAllColumns,
			usdaFoodNutrientRawPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("usdamodels: unable to upsert usda_food_nutrient_raw, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(usdaFoodNutrientRawPrimaryKeyColumns))
			copy(conflict, usdaFoodNutrientRawPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"usda_food_nutrient_raw\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(usdaFoodNutrientRawType, usdaFoodNutrientRawMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(usdaFoodNutrientRawType, usdaFoodNutrientRawMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "usdamodels: unable to upsert usda_food_nutrient_raw")
	}

	if !cached {
		usdaFoodNutrientRawUpsertCacheMut.Lock()
		usdaFoodNutrientRawUpsertCache[key] = cache
		usdaFoodNutrientRawUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UsdaFoodNutrientRaw record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UsdaFoodNutrientRaw) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("usdamodels: no UsdaFoodNutrientRaw provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), usdaFoodNutrientRawPrimaryKeyMapping)
	sql := "DELETE FROM \"usda_food_nutrient_raw\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to delete from usda_food_nutrient_raw")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: failed to get rows affected by delete for usda_food_nutrient_raw")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q usdaFoodNutrientRawQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("usdamodels: no usdaFoodNutrientRawQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to delete all from usda_food_nutrient_raw")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: failed to get rows affected by deleteall for usda_food_nutrient_raw")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UsdaFoodNutrientRawSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(usdaFoodNutrientRawBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaFoodNutrientRawPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"usda_food_nutrient_raw\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaFoodNutrientRawPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to delete all from usdaFoodNutrientRaw slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: failed to get rows affected by deleteall for usda_food_nutrient_raw")
	}

	if len(usdaFoodNutrientRawAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UsdaFoodNutrientRaw) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUsdaFoodNutrientRaw(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsdaFoodNutrientRawSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UsdaFoodNutrientRawSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaFoodNutrientRawPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"usda_food_nutrient_raw\".* FROM \"usda_food_nutrient_raw\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaFoodNutrientRawPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "usdamodels: unable to reload all in UsdaFoodNutrientRawSlice")
	}

	*o = slice

	return nil
}

// UsdaFoodNutrientRawExists checks if the UsdaFoodNutrientRaw row exists.
func UsdaFoodNutrientRawExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"usda_food_nutrient_raw\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "usdamodels: unable to check if usda_food_nutrient_raw exists")
	}

	return exists, nil
}
