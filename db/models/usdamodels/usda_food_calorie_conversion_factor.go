// Code generated by SQLBoiler 4.10.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package usdamodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UsdaFoodCalorieConversionFactor is an object representing the database table.
type UsdaFoodCalorieConversionFactor struct {
	FoodNutrientConversionFactorID int          `boil:"food_nutrient_conversion_factor_id" json:"food_nutrient_conversion_factor_id" toml:"food_nutrient_conversion_factor_id" yaml:"food_nutrient_conversion_factor_id"`
	ProteinValue                   null.Float32 `boil:"protein_value" json:"protein_value,omitempty" toml:"protein_value" yaml:"protein_value,omitempty"`
	FatValue                       null.Float32 `boil:"fat_value" json:"fat_value,omitempty" toml:"fat_value" yaml:"fat_value,omitempty"`
	CarbohydrateValue              null.Float32 `boil:"carbohydrate_value" json:"carbohydrate_value,omitempty" toml:"carbohydrate_value" yaml:"carbohydrate_value,omitempty"`

	R *usdaFoodCalorieConversionFactorR `boil:"rel" json:"rel" toml:"rel" yaml:"rel"`
	L usdaFoodCalorieConversionFactorL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UsdaFoodCalorieConversionFactorColumns = struct {
	FoodNutrientConversionFactorID string
	ProteinValue                   string
	FatValue                       string
	CarbohydrateValue              string
}{
	FoodNutrientConversionFactorID: "food_nutrient_conversion_factor_id",
	ProteinValue:                   "protein_value",
	FatValue:                       "fat_value",
	CarbohydrateValue:              "carbohydrate_value",
}

var UsdaFoodCalorieConversionFactorTableColumns = struct {
	FoodNutrientConversionFactorID string
	ProteinValue                   string
	FatValue                       string
	CarbohydrateValue              string
}{
	FoodNutrientConversionFactorID: "usda_food_calorie_conversion_factor.food_nutrient_conversion_factor_id",
	ProteinValue:                   "usda_food_calorie_conversion_factor.protein_value",
	FatValue:                       "usda_food_calorie_conversion_factor.fat_value",
	CarbohydrateValue:              "usda_food_calorie_conversion_factor.carbohydrate_value",
}

// Generated where

var UsdaFoodCalorieConversionFactorWhere = struct {
	FoodNutrientConversionFactorID whereHelperint
	ProteinValue                   whereHelpernull_Float32
	FatValue                       whereHelpernull_Float32
	CarbohydrateValue              whereHelpernull_Float32
}{
	FoodNutrientConversionFactorID: whereHelperint{field: "\"usda_food_calorie_conversion_factor\".\"food_nutrient_conversion_factor_id\""},
	ProteinValue:                   whereHelpernull_Float32{field: "\"usda_food_calorie_conversion_factor\".\"protein_value\""},
	FatValue:                       whereHelpernull_Float32{field: "\"usda_food_calorie_conversion_factor\".\"fat_value\""},
	CarbohydrateValue:              whereHelpernull_Float32{field: "\"usda_food_calorie_conversion_factor\".\"carbohydrate_value\""},
}

// UsdaFoodCalorieConversionFactorRels is where relationship names are stored.
var UsdaFoodCalorieConversionFactorRels = struct {
}{}

// usdaFoodCalorieConversionFactorR is where relationships are stored.
type usdaFoodCalorieConversionFactorR struct {
}

// NewStruct creates a new relationship struct
func (*usdaFoodCalorieConversionFactorR) NewStruct() *usdaFoodCalorieConversionFactorR {
	return &usdaFoodCalorieConversionFactorR{}
}

// usdaFoodCalorieConversionFactorL is where Load methods for each relationship are stored.
type usdaFoodCalorieConversionFactorL struct{}

var (
	usdaFoodCalorieConversionFactorAllColumns            = []string{"food_nutrient_conversion_factor_id", "protein_value", "fat_value", "carbohydrate_value"}
	usdaFoodCalorieConversionFactorColumnsWithoutDefault = []string{"food_nutrient_conversion_factor_id"}
	usdaFoodCalorieConversionFactorColumnsWithDefault    = []string{"protein_value", "fat_value", "carbohydrate_value"}
	usdaFoodCalorieConversionFactorPrimaryKeyColumns     = []string{"food_nutrient_conversion_factor_id"}
	usdaFoodCalorieConversionFactorGeneratedColumns      = []string{}
)

type (
	// UsdaFoodCalorieConversionFactorSlice is an alias for a slice of pointers to UsdaFoodCalorieConversionFactor.
	// This should almost always be used instead of []UsdaFoodCalorieConversionFactor.
	UsdaFoodCalorieConversionFactorSlice []*UsdaFoodCalorieConversionFactor
	// UsdaFoodCalorieConversionFactorHook is the signature for custom UsdaFoodCalorieConversionFactor hook methods
	UsdaFoodCalorieConversionFactorHook func(context.Context, boil.ContextExecutor, *UsdaFoodCalorieConversionFactor) error

	usdaFoodCalorieConversionFactorQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usdaFoodCalorieConversionFactorType                 = reflect.TypeOf(&UsdaFoodCalorieConversionFactor{})
	usdaFoodCalorieConversionFactorMapping              = queries.MakeStructMapping(usdaFoodCalorieConversionFactorType)
	usdaFoodCalorieConversionFactorPrimaryKeyMapping, _ = queries.BindMapping(usdaFoodCalorieConversionFactorType, usdaFoodCalorieConversionFactorMapping, usdaFoodCalorieConversionFactorPrimaryKeyColumns)
	usdaFoodCalorieConversionFactorInsertCacheMut       sync.RWMutex
	usdaFoodCalorieConversionFactorInsertCache          = make(map[string]insertCache)
	usdaFoodCalorieConversionFactorUpdateCacheMut       sync.RWMutex
	usdaFoodCalorieConversionFactorUpdateCache          = make(map[string]updateCache)
	usdaFoodCalorieConversionFactorUpsertCacheMut       sync.RWMutex
	usdaFoodCalorieConversionFactorUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var usdaFoodCalorieConversionFactorAfterSelectHooks []UsdaFoodCalorieConversionFactorHook

var usdaFoodCalorieConversionFactorBeforeInsertHooks []UsdaFoodCalorieConversionFactorHook
var usdaFoodCalorieConversionFactorAfterInsertHooks []UsdaFoodCalorieConversionFactorHook

var usdaFoodCalorieConversionFactorBeforeUpdateHooks []UsdaFoodCalorieConversionFactorHook
var usdaFoodCalorieConversionFactorAfterUpdateHooks []UsdaFoodCalorieConversionFactorHook

var usdaFoodCalorieConversionFactorBeforeDeleteHooks []UsdaFoodCalorieConversionFactorHook
var usdaFoodCalorieConversionFactorAfterDeleteHooks []UsdaFoodCalorieConversionFactorHook

var usdaFoodCalorieConversionFactorBeforeUpsertHooks []UsdaFoodCalorieConversionFactorHook
var usdaFoodCalorieConversionFactorAfterUpsertHooks []UsdaFoodCalorieConversionFactorHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UsdaFoodCalorieConversionFactor) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodCalorieConversionFactorAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UsdaFoodCalorieConversionFactor) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodCalorieConversionFactorBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UsdaFoodCalorieConversionFactor) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodCalorieConversionFactorAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UsdaFoodCalorieConversionFactor) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodCalorieConversionFactorBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UsdaFoodCalorieConversionFactor) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodCalorieConversionFactorAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UsdaFoodCalorieConversionFactor) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodCalorieConversionFactorBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UsdaFoodCalorieConversionFactor) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodCalorieConversionFactorAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UsdaFoodCalorieConversionFactor) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodCalorieConversionFactorBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UsdaFoodCalorieConversionFactor) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodCalorieConversionFactorAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUsdaFoodCalorieConversionFactorHook registers your hook function for all future operations.
func AddUsdaFoodCalorieConversionFactorHook(hookPoint boil.HookPoint, usdaFoodCalorieConversionFactorHook UsdaFoodCalorieConversionFactorHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		usdaFoodCalorieConversionFactorAfterSelectHooks = append(usdaFoodCalorieConversionFactorAfterSelectHooks, usdaFoodCalorieConversionFactorHook)
	case boil.BeforeInsertHook:
		usdaFoodCalorieConversionFactorBeforeInsertHooks = append(usdaFoodCalorieConversionFactorBeforeInsertHooks, usdaFoodCalorieConversionFactorHook)
	case boil.AfterInsertHook:
		usdaFoodCalorieConversionFactorAfterInsertHooks = append(usdaFoodCalorieConversionFactorAfterInsertHooks, usdaFoodCalorieConversionFactorHook)
	case boil.BeforeUpdateHook:
		usdaFoodCalorieConversionFactorBeforeUpdateHooks = append(usdaFoodCalorieConversionFactorBeforeUpdateHooks, usdaFoodCalorieConversionFactorHook)
	case boil.AfterUpdateHook:
		usdaFoodCalorieConversionFactorAfterUpdateHooks = append(usdaFoodCalorieConversionFactorAfterUpdateHooks, usdaFoodCalorieConversionFactorHook)
	case boil.BeforeDeleteHook:
		usdaFoodCalorieConversionFactorBeforeDeleteHooks = append(usdaFoodCalorieConversionFactorBeforeDeleteHooks, usdaFoodCalorieConversionFactorHook)
	case boil.AfterDeleteHook:
		usdaFoodCalorieConversionFactorAfterDeleteHooks = append(usdaFoodCalorieConversionFactorAfterDeleteHooks, usdaFoodCalorieConversionFactorHook)
	case boil.BeforeUpsertHook:
		usdaFoodCalorieConversionFactorBeforeUpsertHooks = append(usdaFoodCalorieConversionFactorBeforeUpsertHooks, usdaFoodCalorieConversionFactorHook)
	case boil.AfterUpsertHook:
		usdaFoodCalorieConversionFactorAfterUpsertHooks = append(usdaFoodCalorieConversionFactorAfterUpsertHooks, usdaFoodCalorieConversionFactorHook)
	}
}

// One returns a single usdaFoodCalorieConversionFactor record from the query.
func (q usdaFoodCalorieConversionFactorQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UsdaFoodCalorieConversionFactor, error) {
	o := &UsdaFoodCalorieConversionFactor{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "usdamodels: failed to execute a one query for usda_food_calorie_conversion_factor")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UsdaFoodCalorieConversionFactor records from the query.
func (q usdaFoodCalorieConversionFactorQuery) All(ctx context.Context, exec boil.ContextExecutor) (UsdaFoodCalorieConversionFactorSlice, error) {
	var o []*UsdaFoodCalorieConversionFactor

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "usdamodels: failed to assign all query results to UsdaFoodCalorieConversionFactor slice")
	}

	if len(usdaFoodCalorieConversionFactorAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UsdaFoodCalorieConversionFactor records in the query.
func (q usdaFoodCalorieConversionFactorQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: failed to count usda_food_calorie_conversion_factor rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q usdaFoodCalorieConversionFactorQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "usdamodels: failed to check if usda_food_calorie_conversion_factor exists")
	}

	return count > 0, nil
}

// UsdaFoodCalorieConversionFactors retrieves all the records using an executor.
func UsdaFoodCalorieConversionFactors(mods ...qm.QueryMod) usdaFoodCalorieConversionFactorQuery {
	mods = append(mods, qm.From("\"usda_food_calorie_conversion_factor\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"usda_food_calorie_conversion_factor\".*"})
	}

	return usdaFoodCalorieConversionFactorQuery{q}
}

// FindUsdaFoodCalorieConversionFactor retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUsdaFoodCalorieConversionFactor(ctx context.Context, exec boil.ContextExecutor, foodNutrientConversionFactorID int, selectCols ...string) (*UsdaFoodCalorieConversionFactor, error) {
	usdaFoodCalorieConversionFactorObj := &UsdaFoodCalorieConversionFactor{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"usda_food_calorie_conversion_factor\" where \"food_nutrient_conversion_factor_id\"=$1", sel,
	)

	q := queries.Raw(query, foodNutrientConversionFactorID)

	err := q.Bind(ctx, exec, usdaFoodCalorieConversionFactorObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "usdamodels: unable to select from usda_food_calorie_conversion_factor")
	}

	if err = usdaFoodCalorieConversionFactorObj.doAfterSelectHooks(ctx, exec); err != nil {
		return usdaFoodCalorieConversionFactorObj, err
	}

	return usdaFoodCalorieConversionFactorObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UsdaFoodCalorieConversionFactor) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("usdamodels: no usda_food_calorie_conversion_factor provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaFoodCalorieConversionFactorColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	usdaFoodCalorieConversionFactorInsertCacheMut.RLock()
	cache, cached := usdaFoodCalorieConversionFactorInsertCache[key]
	usdaFoodCalorieConversionFactorInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			usdaFoodCalorieConversionFactorAllColumns,
			usdaFoodCalorieConversionFactorColumnsWithDefault,
			usdaFoodCalorieConversionFactorColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(usdaFoodCalorieConversionFactorType, usdaFoodCalorieConversionFactorMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(usdaFoodCalorieConversionFactorType, usdaFoodCalorieConversionFactorMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"usda_food_calorie_conversion_factor\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"usda_food_calorie_conversion_factor\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "usdamodels: unable to insert into usda_food_calorie_conversion_factor")
	}

	if !cached {
		usdaFoodCalorieConversionFactorInsertCacheMut.Lock()
		usdaFoodCalorieConversionFactorInsertCache[key] = cache
		usdaFoodCalorieConversionFactorInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UsdaFoodCalorieConversionFactor.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UsdaFoodCalorieConversionFactor) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	usdaFoodCalorieConversionFactorUpdateCacheMut.RLock()
	cache, cached := usdaFoodCalorieConversionFactorUpdateCache[key]
	usdaFoodCalorieConversionFactorUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			usdaFoodCalorieConversionFactorAllColumns,
			usdaFoodCalorieConversionFactorPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("usdamodels: unable to update usda_food_calorie_conversion_factor, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"usda_food_calorie_conversion_factor\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, usdaFoodCalorieConversionFactorPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(usdaFoodCalorieConversionFactorType, usdaFoodCalorieConversionFactorMapping, append(wl, usdaFoodCalorieConversionFactorPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to update usda_food_calorie_conversion_factor row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: failed to get rows affected by update for usda_food_calorie_conversion_factor")
	}

	if !cached {
		usdaFoodCalorieConversionFactorUpdateCacheMut.Lock()
		usdaFoodCalorieConversionFactorUpdateCache[key] = cache
		usdaFoodCalorieConversionFactorUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q usdaFoodCalorieConversionFactorQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to update all for usda_food_calorie_conversion_factor")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to retrieve rows affected for usda_food_calorie_conversion_factor")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UsdaFoodCalorieConversionFactorSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("usdamodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaFoodCalorieConversionFactorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"usda_food_calorie_conversion_factor\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, usdaFoodCalorieConversionFactorPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to update all in usdaFoodCalorieConversionFactor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to retrieve rows affected all in update all usdaFoodCalorieConversionFactor")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UsdaFoodCalorieConversionFactor) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("usdamodels: no usda_food_calorie_conversion_factor provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaFoodCalorieConversionFactorColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	usdaFoodCalorieConversionFactorUpsertCacheMut.RLock()
	cache, cached := usdaFoodCalorieConversionFactorUpsertCache[key]
	usdaFoodCalorieConversionFactorUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			usdaFoodCalorieConversionFactorAllColumns,
			usdaFoodCalorieConversionFactorColumnsWithDefault,
			usdaFoodCalorieConversionFactorColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			usdaFoodCalorieConversionFactorAllColumns,
			usdaFoodCalorieConversionFactorPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("usdamodels: unable to upsert usda_food_calorie_conversion_factor, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(usdaFoodCalorieConversionFactorPrimaryKeyColumns))
			copy(conflict, usdaFoodCalorieConversionFactorPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"usda_food_calorie_conversion_factor\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(usdaFoodCalorieConversionFactorType, usdaFoodCalorieConversionFactorMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(usdaFoodCalorieConversionFactorType, usdaFoodCalorieConversionFactorMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "usdamodels: unable to upsert usda_food_calorie_conversion_factor")
	}

	if !cached {
		usdaFoodCalorieConversionFactorUpsertCacheMut.Lock()
		usdaFoodCalorieConversionFactorUpsertCache[key] = cache
		usdaFoodCalorieConversionFactorUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UsdaFoodCalorieConversionFactor record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UsdaFoodCalorieConversionFactor) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("usdamodels: no UsdaFoodCalorieConversionFactor provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), usdaFoodCalorieConversionFactorPrimaryKeyMapping)
	sql := "DELETE FROM \"usda_food_calorie_conversion_factor\" WHERE \"food_nutrient_conversion_factor_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to delete from usda_food_calorie_conversion_factor")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: failed to get rows affected by delete for usda_food_calorie_conversion_factor")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q usdaFoodCalorieConversionFactorQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("usdamodels: no usdaFoodCalorieConversionFactorQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to delete all from usda_food_calorie_conversion_factor")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: failed to get rows affected by deleteall for usda_food_calorie_conversion_factor")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UsdaFoodCalorieConversionFactorSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(usdaFoodCalorieConversionFactorBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaFoodCalorieConversionFactorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"usda_food_calorie_conversion_factor\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaFoodCalorieConversionFactorPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to delete all from usdaFoodCalorieConversionFactor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: failed to get rows affected by deleteall for usda_food_calorie_conversion_factor")
	}

	if len(usdaFoodCalorieConversionFactorAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UsdaFoodCalorieConversionFactor) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUsdaFoodCalorieConversionFactor(ctx, exec, o.FoodNutrientConversionFactorID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsdaFoodCalorieConversionFactorSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UsdaFoodCalorieConversionFactorSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaFoodCalorieConversionFactorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"usda_food_calorie_conversion_factor\".* FROM \"usda_food_calorie_conversion_factor\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaFoodCalorieConversionFactorPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "usdamodels: unable to reload all in UsdaFoodCalorieConversionFactorSlice")
	}

	*o = slice

	return nil
}

// UsdaFoodCalorieConversionFactorExists checks if the UsdaFoodCalorieConversionFactor row exists.
func UsdaFoodCalorieConversionFactorExists(ctx context.Context, exec boil.ContextExecutor, foodNutrientConversionFactorID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"usda_food_calorie_conversion_factor\" where \"food_nutrient_conversion_factor_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, foodNutrientConversionFactorID)
	}
	row := exec.QueryRowContext(ctx, sql, foodNutrientConversionFactorID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "usdamodels: unable to check if usda_food_calorie_conversion_factor exists")
	}

	return exists, nil
}
