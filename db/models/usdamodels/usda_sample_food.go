// Code generated by SQLBoiler 4.10.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package usdamodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UsdaSampleFood is an object representing the database table.
type UsdaSampleFood struct {
	FDCID int `boil:"fdc_id" json:"fdc_id" toml:"fdc_id" yaml:"fdc_id"`

	R *usdaSampleFoodR `boil:"rel" json:"rel" toml:"rel" yaml:"rel"`
	L usdaSampleFoodL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UsdaSampleFoodColumns = struct {
	FDCID string
}{
	FDCID: "fdc_id",
}

var UsdaSampleFoodTableColumns = struct {
	FDCID string
}{
	FDCID: "usda_sample_food.fdc_id",
}

// Generated where

var UsdaSampleFoodWhere = struct {
	FDCID whereHelperint
}{
	FDCID: whereHelperint{field: "\"usda_sample_food\".\"fdc_id\""},
}

// UsdaSampleFoodRels is where relationship names are stored.
var UsdaSampleFoodRels = struct {
	FDC string
}{
	FDC: "FDC",
}

// usdaSampleFoodR is where relationships are stored.
type usdaSampleFoodR struct {
	FDC *UsdaFood `boil:"FDC" json:"FDC" toml:"FDC" yaml:"FDC"`
}

// NewStruct creates a new relationship struct
func (*usdaSampleFoodR) NewStruct() *usdaSampleFoodR {
	return &usdaSampleFoodR{}
}

// usdaSampleFoodL is where Load methods for each relationship are stored.
type usdaSampleFoodL struct{}

var (
	usdaSampleFoodAllColumns            = []string{"fdc_id"}
	usdaSampleFoodColumnsWithoutDefault = []string{"fdc_id"}
	usdaSampleFoodColumnsWithDefault    = []string{}
	usdaSampleFoodPrimaryKeyColumns     = []string{"fdc_id"}
	usdaSampleFoodGeneratedColumns      = []string{}
)

type (
	// UsdaSampleFoodSlice is an alias for a slice of pointers to UsdaSampleFood.
	// This should almost always be used instead of []UsdaSampleFood.
	UsdaSampleFoodSlice []*UsdaSampleFood
	// UsdaSampleFoodHook is the signature for custom UsdaSampleFood hook methods
	UsdaSampleFoodHook func(context.Context, boil.ContextExecutor, *UsdaSampleFood) error

	usdaSampleFoodQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usdaSampleFoodType                 = reflect.TypeOf(&UsdaSampleFood{})
	usdaSampleFoodMapping              = queries.MakeStructMapping(usdaSampleFoodType)
	usdaSampleFoodPrimaryKeyMapping, _ = queries.BindMapping(usdaSampleFoodType, usdaSampleFoodMapping, usdaSampleFoodPrimaryKeyColumns)
	usdaSampleFoodInsertCacheMut       sync.RWMutex
	usdaSampleFoodInsertCache          = make(map[string]insertCache)
	usdaSampleFoodUpdateCacheMut       sync.RWMutex
	usdaSampleFoodUpdateCache          = make(map[string]updateCache)
	usdaSampleFoodUpsertCacheMut       sync.RWMutex
	usdaSampleFoodUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var usdaSampleFoodAfterSelectHooks []UsdaSampleFoodHook

var usdaSampleFoodBeforeInsertHooks []UsdaSampleFoodHook
var usdaSampleFoodAfterInsertHooks []UsdaSampleFoodHook

var usdaSampleFoodBeforeUpdateHooks []UsdaSampleFoodHook
var usdaSampleFoodAfterUpdateHooks []UsdaSampleFoodHook

var usdaSampleFoodBeforeDeleteHooks []UsdaSampleFoodHook
var usdaSampleFoodAfterDeleteHooks []UsdaSampleFoodHook

var usdaSampleFoodBeforeUpsertHooks []UsdaSampleFoodHook
var usdaSampleFoodAfterUpsertHooks []UsdaSampleFoodHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UsdaSampleFood) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaSampleFoodAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UsdaSampleFood) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaSampleFoodBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UsdaSampleFood) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaSampleFoodAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UsdaSampleFood) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaSampleFoodBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UsdaSampleFood) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaSampleFoodAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UsdaSampleFood) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaSampleFoodBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UsdaSampleFood) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaSampleFoodAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UsdaSampleFood) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaSampleFoodBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UsdaSampleFood) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaSampleFoodAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUsdaSampleFoodHook registers your hook function for all future operations.
func AddUsdaSampleFoodHook(hookPoint boil.HookPoint, usdaSampleFoodHook UsdaSampleFoodHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		usdaSampleFoodAfterSelectHooks = append(usdaSampleFoodAfterSelectHooks, usdaSampleFoodHook)
	case boil.BeforeInsertHook:
		usdaSampleFoodBeforeInsertHooks = append(usdaSampleFoodBeforeInsertHooks, usdaSampleFoodHook)
	case boil.AfterInsertHook:
		usdaSampleFoodAfterInsertHooks = append(usdaSampleFoodAfterInsertHooks, usdaSampleFoodHook)
	case boil.BeforeUpdateHook:
		usdaSampleFoodBeforeUpdateHooks = append(usdaSampleFoodBeforeUpdateHooks, usdaSampleFoodHook)
	case boil.AfterUpdateHook:
		usdaSampleFoodAfterUpdateHooks = append(usdaSampleFoodAfterUpdateHooks, usdaSampleFoodHook)
	case boil.BeforeDeleteHook:
		usdaSampleFoodBeforeDeleteHooks = append(usdaSampleFoodBeforeDeleteHooks, usdaSampleFoodHook)
	case boil.AfterDeleteHook:
		usdaSampleFoodAfterDeleteHooks = append(usdaSampleFoodAfterDeleteHooks, usdaSampleFoodHook)
	case boil.BeforeUpsertHook:
		usdaSampleFoodBeforeUpsertHooks = append(usdaSampleFoodBeforeUpsertHooks, usdaSampleFoodHook)
	case boil.AfterUpsertHook:
		usdaSampleFoodAfterUpsertHooks = append(usdaSampleFoodAfterUpsertHooks, usdaSampleFoodHook)
	}
}

// One returns a single usdaSampleFood record from the query.
func (q usdaSampleFoodQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UsdaSampleFood, error) {
	o := &UsdaSampleFood{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "usdamodels: failed to execute a one query for usda_sample_food")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UsdaSampleFood records from the query.
func (q usdaSampleFoodQuery) All(ctx context.Context, exec boil.ContextExecutor) (UsdaSampleFoodSlice, error) {
	var o []*UsdaSampleFood

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "usdamodels: failed to assign all query results to UsdaSampleFood slice")
	}

	if len(usdaSampleFoodAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UsdaSampleFood records in the query.
func (q usdaSampleFoodQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: failed to count usda_sample_food rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q usdaSampleFoodQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "usdamodels: failed to check if usda_sample_food exists")
	}

	return count > 0, nil
}

// FDC pointed to by the foreign key.
func (o *UsdaSampleFood) FDC(mods ...qm.QueryMod) usdaFoodQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"fdc_id\" = ?", o.FDCID),
	}

	queryMods = append(queryMods, mods...)

	return UsdaFoods(queryMods...)
}

// LoadFDC allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (usdaSampleFoodL) LoadFDC(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsdaSampleFood interface{}, mods queries.Applicator) error {
	var slice []*UsdaSampleFood
	var object *UsdaSampleFood

	if singular {
		object = maybeUsdaSampleFood.(*UsdaSampleFood)
	} else {
		slice = *maybeUsdaSampleFood.(*[]*UsdaSampleFood)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &usdaSampleFoodR{}
		}
		args = append(args, object.FDCID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usdaSampleFoodR{}
			}

			for _, a := range args {
				if a == obj.FDCID {
					continue Outer
				}
			}

			args = append(args, obj.FDCID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`usda_food`),
		qm.WhereIn(`usda_food.fdc_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UsdaFood")
	}

	var resultSlice []*UsdaFood
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UsdaFood")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for usda_food")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usda_food")
	}

	if len(usdaSampleFoodAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FDC = foreign
		if foreign.R == nil {
			foreign.R = &usdaFoodR{}
		}
		foreign.R.FDCUsdaSampleFood = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FDCID == foreign.FDCID {
				local.R.FDC = foreign
				if foreign.R == nil {
					foreign.R = &usdaFoodR{}
				}
				foreign.R.FDCUsdaSampleFood = local
				break
			}
		}
	}

	return nil
}

// SetFDC of the usdaSampleFood to the related item.
// Sets o.R.FDC to related.
// Adds o to related.R.FDCUsdaSampleFood.
func (o *UsdaSampleFood) SetFDC(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UsdaFood) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"usda_sample_food\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"fdc_id"}),
		strmangle.WhereClause("\"", "\"", 2, usdaSampleFoodPrimaryKeyColumns),
	)
	values := []interface{}{related.FDCID, o.FDCID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FDCID = related.FDCID
	if o.R == nil {
		o.R = &usdaSampleFoodR{
			FDC: related,
		}
	} else {
		o.R.FDC = related
	}

	if related.R == nil {
		related.R = &usdaFoodR{
			FDCUsdaSampleFood: o,
		}
	} else {
		related.R.FDCUsdaSampleFood = o
	}

	return nil
}

// UsdaSampleFoods retrieves all the records using an executor.
func UsdaSampleFoods(mods ...qm.QueryMod) usdaSampleFoodQuery {
	mods = append(mods, qm.From("\"usda_sample_food\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"usda_sample_food\".*"})
	}

	return usdaSampleFoodQuery{q}
}

// FindUsdaSampleFood retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUsdaSampleFood(ctx context.Context, exec boil.ContextExecutor, fDCID int, selectCols ...string) (*UsdaSampleFood, error) {
	usdaSampleFoodObj := &UsdaSampleFood{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"usda_sample_food\" where \"fdc_id\"=$1", sel,
	)

	q := queries.Raw(query, fDCID)

	err := q.Bind(ctx, exec, usdaSampleFoodObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "usdamodels: unable to select from usda_sample_food")
	}

	if err = usdaSampleFoodObj.doAfterSelectHooks(ctx, exec); err != nil {
		return usdaSampleFoodObj, err
	}

	return usdaSampleFoodObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UsdaSampleFood) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("usdamodels: no usda_sample_food provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaSampleFoodColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	usdaSampleFoodInsertCacheMut.RLock()
	cache, cached := usdaSampleFoodInsertCache[key]
	usdaSampleFoodInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			usdaSampleFoodAllColumns,
			usdaSampleFoodColumnsWithDefault,
			usdaSampleFoodColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(usdaSampleFoodType, usdaSampleFoodMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(usdaSampleFoodType, usdaSampleFoodMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"usda_sample_food\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"usda_sample_food\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "usdamodels: unable to insert into usda_sample_food")
	}

	if !cached {
		usdaSampleFoodInsertCacheMut.Lock()
		usdaSampleFoodInsertCache[key] = cache
		usdaSampleFoodInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UsdaSampleFood.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UsdaSampleFood) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	usdaSampleFoodUpdateCacheMut.RLock()
	cache, cached := usdaSampleFoodUpdateCache[key]
	usdaSampleFoodUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			usdaSampleFoodAllColumns,
			usdaSampleFoodPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("usdamodels: unable to update usda_sample_food, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"usda_sample_food\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, usdaSampleFoodPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(usdaSampleFoodType, usdaSampleFoodMapping, append(wl, usdaSampleFoodPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to update usda_sample_food row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: failed to get rows affected by update for usda_sample_food")
	}

	if !cached {
		usdaSampleFoodUpdateCacheMut.Lock()
		usdaSampleFoodUpdateCache[key] = cache
		usdaSampleFoodUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q usdaSampleFoodQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to update all for usda_sample_food")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to retrieve rows affected for usda_sample_food")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UsdaSampleFoodSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("usdamodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaSampleFoodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"usda_sample_food\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, usdaSampleFoodPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to update all in usdaSampleFood slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to retrieve rows affected all in update all usdaSampleFood")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UsdaSampleFood) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("usdamodels: no usda_sample_food provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaSampleFoodColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	usdaSampleFoodUpsertCacheMut.RLock()
	cache, cached := usdaSampleFoodUpsertCache[key]
	usdaSampleFoodUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			usdaSampleFoodAllColumns,
			usdaSampleFoodColumnsWithDefault,
			usdaSampleFoodColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			usdaSampleFoodAllColumns,
			usdaSampleFoodPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("usdamodels: unable to upsert usda_sample_food, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(usdaSampleFoodPrimaryKeyColumns))
			copy(conflict, usdaSampleFoodPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"usda_sample_food\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(usdaSampleFoodType, usdaSampleFoodMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(usdaSampleFoodType, usdaSampleFoodMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "usdamodels: unable to upsert usda_sample_food")
	}

	if !cached {
		usdaSampleFoodUpsertCacheMut.Lock()
		usdaSampleFoodUpsertCache[key] = cache
		usdaSampleFoodUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UsdaSampleFood record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UsdaSampleFood) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("usdamodels: no UsdaSampleFood provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), usdaSampleFoodPrimaryKeyMapping)
	sql := "DELETE FROM \"usda_sample_food\" WHERE \"fdc_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to delete from usda_sample_food")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: failed to get rows affected by delete for usda_sample_food")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q usdaSampleFoodQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("usdamodels: no usdaSampleFoodQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to delete all from usda_sample_food")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: failed to get rows affected by deleteall for usda_sample_food")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UsdaSampleFoodSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(usdaSampleFoodBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaSampleFoodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"usda_sample_food\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaSampleFoodPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to delete all from usdaSampleFood slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: failed to get rows affected by deleteall for usda_sample_food")
	}

	if len(usdaSampleFoodAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UsdaSampleFood) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUsdaSampleFood(ctx, exec, o.FDCID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsdaSampleFoodSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UsdaSampleFoodSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaSampleFoodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"usda_sample_food\".* FROM \"usda_sample_food\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaSampleFoodPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "usdamodels: unable to reload all in UsdaSampleFoodSlice")
	}

	*o = slice

	return nil
}

// UsdaSampleFoodExists checks if the UsdaSampleFood row exists.
func UsdaSampleFoodExists(ctx context.Context, exec boil.ContextExecutor, fDCID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"usda_sample_food\" where \"fdc_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, fDCID)
	}
	row := exec.QueryRowContext(ctx, sql, fDCID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "usdamodels: unable to check if usda_sample_food exists")
	}

	return exists, nil
}
