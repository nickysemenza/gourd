// Code generated by SQLBoiler 4.10.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package usdamodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UsdaFoodPortion is an object representing the database table.
type UsdaFoodPortion struct {
	ID                 int          `boil:"id" json:"id" toml:"id" yaml:"id"`
	FDCID              null.Int     `boil:"fdc_id" json:"fdc_id,omitempty" toml:"fdc_id" yaml:"fdc_id,omitempty"`
	SeqNum             null.Int     `boil:"seq_num" json:"seq_num,omitempty" toml:"seq_num" yaml:"seq_num,omitempty"`
	Amount             null.Float32 `boil:"amount" json:"amount,omitempty" toml:"amount" yaml:"amount,omitempty"`
	MeasureUnitID      null.Int     `boil:"measure_unit_id" json:"measure_unit_id,omitempty" toml:"measure_unit_id" yaml:"measure_unit_id,omitempty"`
	PortionDescription null.String  `boil:"portion_description" json:"portion_description,omitempty" toml:"portion_description" yaml:"portion_description,omitempty"`
	Modifier           null.String  `boil:"modifier" json:"modifier,omitempty" toml:"modifier" yaml:"modifier,omitempty"`
	GramWeight         null.Float32 `boil:"gram_weight" json:"gram_weight,omitempty" toml:"gram_weight" yaml:"gram_weight,omitempty"`
	DataPoints         null.Int     `boil:"data_points" json:"data_points,omitempty" toml:"data_points" yaml:"data_points,omitempty"`
	Footnote           null.String  `boil:"footnote" json:"footnote,omitempty" toml:"footnote" yaml:"footnote,omitempty"`
	MinYearAcquired    null.String  `boil:"min_year_acquired" json:"min_year_acquired,omitempty" toml:"min_year_acquired" yaml:"min_year_acquired,omitempty"`

	R *usdaFoodPortionR `boil:"rel" json:"rel" toml:"rel" yaml:"rel"`
	L usdaFoodPortionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UsdaFoodPortionColumns = struct {
	ID                 string
	FDCID              string
	SeqNum             string
	Amount             string
	MeasureUnitID      string
	PortionDescription string
	Modifier           string
	GramWeight         string
	DataPoints         string
	Footnote           string
	MinYearAcquired    string
}{
	ID:                 "id",
	FDCID:              "fdc_id",
	SeqNum:             "seq_num",
	Amount:             "amount",
	MeasureUnitID:      "measure_unit_id",
	PortionDescription: "portion_description",
	Modifier:           "modifier",
	GramWeight:         "gram_weight",
	DataPoints:         "data_points",
	Footnote:           "footnote",
	MinYearAcquired:    "min_year_acquired",
}

var UsdaFoodPortionTableColumns = struct {
	ID                 string
	FDCID              string
	SeqNum             string
	Amount             string
	MeasureUnitID      string
	PortionDescription string
	Modifier           string
	GramWeight         string
	DataPoints         string
	Footnote           string
	MinYearAcquired    string
}{
	ID:                 "usda_food_portion.id",
	FDCID:              "usda_food_portion.fdc_id",
	SeqNum:             "usda_food_portion.seq_num",
	Amount:             "usda_food_portion.amount",
	MeasureUnitID:      "usda_food_portion.measure_unit_id",
	PortionDescription: "usda_food_portion.portion_description",
	Modifier:           "usda_food_portion.modifier",
	GramWeight:         "usda_food_portion.gram_weight",
	DataPoints:         "usda_food_portion.data_points",
	Footnote:           "usda_food_portion.footnote",
	MinYearAcquired:    "usda_food_portion.min_year_acquired",
}

// Generated where

var UsdaFoodPortionWhere = struct {
	ID                 whereHelperint
	FDCID              whereHelpernull_Int
	SeqNum             whereHelpernull_Int
	Amount             whereHelpernull_Float32
	MeasureUnitID      whereHelpernull_Int
	PortionDescription whereHelpernull_String
	Modifier           whereHelpernull_String
	GramWeight         whereHelpernull_Float32
	DataPoints         whereHelpernull_Int
	Footnote           whereHelpernull_String
	MinYearAcquired    whereHelpernull_String
}{
	ID:                 whereHelperint{field: "\"usda_food_portion\".\"id\""},
	FDCID:              whereHelpernull_Int{field: "\"usda_food_portion\".\"fdc_id\""},
	SeqNum:             whereHelpernull_Int{field: "\"usda_food_portion\".\"seq_num\""},
	Amount:             whereHelpernull_Float32{field: "\"usda_food_portion\".\"amount\""},
	MeasureUnitID:      whereHelpernull_Int{field: "\"usda_food_portion\".\"measure_unit_id\""},
	PortionDescription: whereHelpernull_String{field: "\"usda_food_portion\".\"portion_description\""},
	Modifier:           whereHelpernull_String{field: "\"usda_food_portion\".\"modifier\""},
	GramWeight:         whereHelpernull_Float32{field: "\"usda_food_portion\".\"gram_weight\""},
	DataPoints:         whereHelpernull_Int{field: "\"usda_food_portion\".\"data_points\""},
	Footnote:           whereHelpernull_String{field: "\"usda_food_portion\".\"footnote\""},
	MinYearAcquired:    whereHelpernull_String{field: "\"usda_food_portion\".\"min_year_acquired\""},
}

// UsdaFoodPortionRels is where relationship names are stored.
var UsdaFoodPortionRels = struct {
	FDC         string
	MeasureUnit string
}{
	FDC:         "FDC",
	MeasureUnit: "MeasureUnit",
}

// usdaFoodPortionR is where relationships are stored.
type usdaFoodPortionR struct {
	FDC         *UsdaFood        `boil:"FDC" json:"FDC" toml:"FDC" yaml:"FDC"`
	MeasureUnit *UsdaMeasureUnit `boil:"MeasureUnit" json:"MeasureUnit" toml:"MeasureUnit" yaml:"MeasureUnit"`
}

// NewStruct creates a new relationship struct
func (*usdaFoodPortionR) NewStruct() *usdaFoodPortionR {
	return &usdaFoodPortionR{}
}

// usdaFoodPortionL is where Load methods for each relationship are stored.
type usdaFoodPortionL struct{}

var (
	usdaFoodPortionAllColumns            = []string{"id", "fdc_id", "seq_num", "amount", "measure_unit_id", "portion_description", "modifier", "gram_weight", "data_points", "footnote", "min_year_acquired"}
	usdaFoodPortionColumnsWithoutDefault = []string{"id"}
	usdaFoodPortionColumnsWithDefault    = []string{"fdc_id", "seq_num", "amount", "measure_unit_id", "portion_description", "modifier", "gram_weight", "data_points", "footnote", "min_year_acquired"}
	usdaFoodPortionPrimaryKeyColumns     = []string{"id"}
	usdaFoodPortionGeneratedColumns      = []string{}
)

type (
	// UsdaFoodPortionSlice is an alias for a slice of pointers to UsdaFoodPortion.
	// This should almost always be used instead of []UsdaFoodPortion.
	UsdaFoodPortionSlice []*UsdaFoodPortion
	// UsdaFoodPortionHook is the signature for custom UsdaFoodPortion hook methods
	UsdaFoodPortionHook func(context.Context, boil.ContextExecutor, *UsdaFoodPortion) error

	usdaFoodPortionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usdaFoodPortionType                 = reflect.TypeOf(&UsdaFoodPortion{})
	usdaFoodPortionMapping              = queries.MakeStructMapping(usdaFoodPortionType)
	usdaFoodPortionPrimaryKeyMapping, _ = queries.BindMapping(usdaFoodPortionType, usdaFoodPortionMapping, usdaFoodPortionPrimaryKeyColumns)
	usdaFoodPortionInsertCacheMut       sync.RWMutex
	usdaFoodPortionInsertCache          = make(map[string]insertCache)
	usdaFoodPortionUpdateCacheMut       sync.RWMutex
	usdaFoodPortionUpdateCache          = make(map[string]updateCache)
	usdaFoodPortionUpsertCacheMut       sync.RWMutex
	usdaFoodPortionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var usdaFoodPortionAfterSelectHooks []UsdaFoodPortionHook

var usdaFoodPortionBeforeInsertHooks []UsdaFoodPortionHook
var usdaFoodPortionAfterInsertHooks []UsdaFoodPortionHook

var usdaFoodPortionBeforeUpdateHooks []UsdaFoodPortionHook
var usdaFoodPortionAfterUpdateHooks []UsdaFoodPortionHook

var usdaFoodPortionBeforeDeleteHooks []UsdaFoodPortionHook
var usdaFoodPortionAfterDeleteHooks []UsdaFoodPortionHook

var usdaFoodPortionBeforeUpsertHooks []UsdaFoodPortionHook
var usdaFoodPortionAfterUpsertHooks []UsdaFoodPortionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UsdaFoodPortion) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodPortionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UsdaFoodPortion) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodPortionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UsdaFoodPortion) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodPortionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UsdaFoodPortion) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodPortionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UsdaFoodPortion) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodPortionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UsdaFoodPortion) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodPortionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UsdaFoodPortion) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodPortionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UsdaFoodPortion) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodPortionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UsdaFoodPortion) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodPortionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUsdaFoodPortionHook registers your hook function for all future operations.
func AddUsdaFoodPortionHook(hookPoint boil.HookPoint, usdaFoodPortionHook UsdaFoodPortionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		usdaFoodPortionAfterSelectHooks = append(usdaFoodPortionAfterSelectHooks, usdaFoodPortionHook)
	case boil.BeforeInsertHook:
		usdaFoodPortionBeforeInsertHooks = append(usdaFoodPortionBeforeInsertHooks, usdaFoodPortionHook)
	case boil.AfterInsertHook:
		usdaFoodPortionAfterInsertHooks = append(usdaFoodPortionAfterInsertHooks, usdaFoodPortionHook)
	case boil.BeforeUpdateHook:
		usdaFoodPortionBeforeUpdateHooks = append(usdaFoodPortionBeforeUpdateHooks, usdaFoodPortionHook)
	case boil.AfterUpdateHook:
		usdaFoodPortionAfterUpdateHooks = append(usdaFoodPortionAfterUpdateHooks, usdaFoodPortionHook)
	case boil.BeforeDeleteHook:
		usdaFoodPortionBeforeDeleteHooks = append(usdaFoodPortionBeforeDeleteHooks, usdaFoodPortionHook)
	case boil.AfterDeleteHook:
		usdaFoodPortionAfterDeleteHooks = append(usdaFoodPortionAfterDeleteHooks, usdaFoodPortionHook)
	case boil.BeforeUpsertHook:
		usdaFoodPortionBeforeUpsertHooks = append(usdaFoodPortionBeforeUpsertHooks, usdaFoodPortionHook)
	case boil.AfterUpsertHook:
		usdaFoodPortionAfterUpsertHooks = append(usdaFoodPortionAfterUpsertHooks, usdaFoodPortionHook)
	}
}

// One returns a single usdaFoodPortion record from the query.
func (q usdaFoodPortionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UsdaFoodPortion, error) {
	o := &UsdaFoodPortion{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "usdamodels: failed to execute a one query for usda_food_portion")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UsdaFoodPortion records from the query.
func (q usdaFoodPortionQuery) All(ctx context.Context, exec boil.ContextExecutor) (UsdaFoodPortionSlice, error) {
	var o []*UsdaFoodPortion

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "usdamodels: failed to assign all query results to UsdaFoodPortion slice")
	}

	if len(usdaFoodPortionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UsdaFoodPortion records in the query.
func (q usdaFoodPortionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: failed to count usda_food_portion rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q usdaFoodPortionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "usdamodels: failed to check if usda_food_portion exists")
	}

	return count > 0, nil
}

// FDC pointed to by the foreign key.
func (o *UsdaFoodPortion) FDC(mods ...qm.QueryMod) usdaFoodQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"fdc_id\" = ?", o.FDCID),
	}

	queryMods = append(queryMods, mods...)

	return UsdaFoods(queryMods...)
}

// MeasureUnit pointed to by the foreign key.
func (o *UsdaFoodPortion) MeasureUnit(mods ...qm.QueryMod) usdaMeasureUnitQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MeasureUnitID),
	}

	queryMods = append(queryMods, mods...)

	return UsdaMeasureUnits(queryMods...)
}

// LoadFDC allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (usdaFoodPortionL) LoadFDC(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsdaFoodPortion interface{}, mods queries.Applicator) error {
	var slice []*UsdaFoodPortion
	var object *UsdaFoodPortion

	if singular {
		object = maybeUsdaFoodPortion.(*UsdaFoodPortion)
	} else {
		slice = *maybeUsdaFoodPortion.(*[]*UsdaFoodPortion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &usdaFoodPortionR{}
		}
		if !queries.IsNil(object.FDCID) {
			args = append(args, object.FDCID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usdaFoodPortionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.FDCID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.FDCID) {
				args = append(args, obj.FDCID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`usda_food`),
		qm.WhereIn(`usda_food.fdc_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UsdaFood")
	}

	var resultSlice []*UsdaFood
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UsdaFood")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for usda_food")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usda_food")
	}

	if len(usdaFoodPortionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FDC = foreign
		if foreign.R == nil {
			foreign.R = &usdaFoodR{}
		}
		foreign.R.FDCUsdaFoodPortions = append(foreign.R.FDCUsdaFoodPortions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.FDCID, foreign.FDCID) {
				local.R.FDC = foreign
				if foreign.R == nil {
					foreign.R = &usdaFoodR{}
				}
				foreign.R.FDCUsdaFoodPortions = append(foreign.R.FDCUsdaFoodPortions, local)
				break
			}
		}
	}

	return nil
}

// LoadMeasureUnit allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (usdaFoodPortionL) LoadMeasureUnit(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsdaFoodPortion interface{}, mods queries.Applicator) error {
	var slice []*UsdaFoodPortion
	var object *UsdaFoodPortion

	if singular {
		object = maybeUsdaFoodPortion.(*UsdaFoodPortion)
	} else {
		slice = *maybeUsdaFoodPortion.(*[]*UsdaFoodPortion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &usdaFoodPortionR{}
		}
		if !queries.IsNil(object.MeasureUnitID) {
			args = append(args, object.MeasureUnitID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usdaFoodPortionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.MeasureUnitID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.MeasureUnitID) {
				args = append(args, obj.MeasureUnitID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`usda_measure_unit`),
		qm.WhereIn(`usda_measure_unit.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UsdaMeasureUnit")
	}

	var resultSlice []*UsdaMeasureUnit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UsdaMeasureUnit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for usda_measure_unit")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usda_measure_unit")
	}

	if len(usdaFoodPortionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MeasureUnit = foreign
		if foreign.R == nil {
			foreign.R = &usdaMeasureUnitR{}
		}
		foreign.R.MeasureUnitUsdaFoodPortions = append(foreign.R.MeasureUnitUsdaFoodPortions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.MeasureUnitID, foreign.ID) {
				local.R.MeasureUnit = foreign
				if foreign.R == nil {
					foreign.R = &usdaMeasureUnitR{}
				}
				foreign.R.MeasureUnitUsdaFoodPortions = append(foreign.R.MeasureUnitUsdaFoodPortions, local)
				break
			}
		}
	}

	return nil
}

// SetFDC of the usdaFoodPortion to the related item.
// Sets o.R.FDC to related.
// Adds o to related.R.FDCUsdaFoodPortions.
func (o *UsdaFoodPortion) SetFDC(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UsdaFood) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"usda_food_portion\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"fdc_id"}),
		strmangle.WhereClause("\"", "\"", 2, usdaFoodPortionPrimaryKeyColumns),
	)
	values := []interface{}{related.FDCID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.FDCID, related.FDCID)
	if o.R == nil {
		o.R = &usdaFoodPortionR{
			FDC: related,
		}
	} else {
		o.R.FDC = related
	}

	if related.R == nil {
		related.R = &usdaFoodR{
			FDCUsdaFoodPortions: UsdaFoodPortionSlice{o},
		}
	} else {
		related.R.FDCUsdaFoodPortions = append(related.R.FDCUsdaFoodPortions, o)
	}

	return nil
}

// RemoveFDC relationship.
// Sets o.R.FDC to nil.
// Removes o from all passed in related items' relationships struct.
func (o *UsdaFoodPortion) RemoveFDC(ctx context.Context, exec boil.ContextExecutor, related *UsdaFood) error {
	var err error

	queries.SetScanner(&o.FDCID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("fdc_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.FDC = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.FDCUsdaFoodPortions {
		if queries.Equal(o.FDCID, ri.FDCID) {
			continue
		}

		ln := len(related.R.FDCUsdaFoodPortions)
		if ln > 1 && i < ln-1 {
			related.R.FDCUsdaFoodPortions[i] = related.R.FDCUsdaFoodPortions[ln-1]
		}
		related.R.FDCUsdaFoodPortions = related.R.FDCUsdaFoodPortions[:ln-1]
		break
	}
	return nil
}

// SetMeasureUnit of the usdaFoodPortion to the related item.
// Sets o.R.MeasureUnit to related.
// Adds o to related.R.MeasureUnitUsdaFoodPortions.
func (o *UsdaFoodPortion) SetMeasureUnit(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UsdaMeasureUnit) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"usda_food_portion\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"measure_unit_id"}),
		strmangle.WhereClause("\"", "\"", 2, usdaFoodPortionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.MeasureUnitID, related.ID)
	if o.R == nil {
		o.R = &usdaFoodPortionR{
			MeasureUnit: related,
		}
	} else {
		o.R.MeasureUnit = related
	}

	if related.R == nil {
		related.R = &usdaMeasureUnitR{
			MeasureUnitUsdaFoodPortions: UsdaFoodPortionSlice{o},
		}
	} else {
		related.R.MeasureUnitUsdaFoodPortions = append(related.R.MeasureUnitUsdaFoodPortions, o)
	}

	return nil
}

// RemoveMeasureUnit relationship.
// Sets o.R.MeasureUnit to nil.
// Removes o from all passed in related items' relationships struct.
func (o *UsdaFoodPortion) RemoveMeasureUnit(ctx context.Context, exec boil.ContextExecutor, related *UsdaMeasureUnit) error {
	var err error

	queries.SetScanner(&o.MeasureUnitID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("measure_unit_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.MeasureUnit = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.MeasureUnitUsdaFoodPortions {
		if queries.Equal(o.MeasureUnitID, ri.MeasureUnitID) {
			continue
		}

		ln := len(related.R.MeasureUnitUsdaFoodPortions)
		if ln > 1 && i < ln-1 {
			related.R.MeasureUnitUsdaFoodPortions[i] = related.R.MeasureUnitUsdaFoodPortions[ln-1]
		}
		related.R.MeasureUnitUsdaFoodPortions = related.R.MeasureUnitUsdaFoodPortions[:ln-1]
		break
	}
	return nil
}

// UsdaFoodPortions retrieves all the records using an executor.
func UsdaFoodPortions(mods ...qm.QueryMod) usdaFoodPortionQuery {
	mods = append(mods, qm.From("\"usda_food_portion\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"usda_food_portion\".*"})
	}

	return usdaFoodPortionQuery{q}
}

// FindUsdaFoodPortion retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUsdaFoodPortion(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UsdaFoodPortion, error) {
	usdaFoodPortionObj := &UsdaFoodPortion{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"usda_food_portion\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, usdaFoodPortionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "usdamodels: unable to select from usda_food_portion")
	}

	if err = usdaFoodPortionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return usdaFoodPortionObj, err
	}

	return usdaFoodPortionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UsdaFoodPortion) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("usdamodels: no usda_food_portion provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaFoodPortionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	usdaFoodPortionInsertCacheMut.RLock()
	cache, cached := usdaFoodPortionInsertCache[key]
	usdaFoodPortionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			usdaFoodPortionAllColumns,
			usdaFoodPortionColumnsWithDefault,
			usdaFoodPortionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(usdaFoodPortionType, usdaFoodPortionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(usdaFoodPortionType, usdaFoodPortionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"usda_food_portion\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"usda_food_portion\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "usdamodels: unable to insert into usda_food_portion")
	}

	if !cached {
		usdaFoodPortionInsertCacheMut.Lock()
		usdaFoodPortionInsertCache[key] = cache
		usdaFoodPortionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UsdaFoodPortion.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UsdaFoodPortion) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	usdaFoodPortionUpdateCacheMut.RLock()
	cache, cached := usdaFoodPortionUpdateCache[key]
	usdaFoodPortionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			usdaFoodPortionAllColumns,
			usdaFoodPortionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("usdamodels: unable to update usda_food_portion, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"usda_food_portion\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, usdaFoodPortionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(usdaFoodPortionType, usdaFoodPortionMapping, append(wl, usdaFoodPortionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to update usda_food_portion row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: failed to get rows affected by update for usda_food_portion")
	}

	if !cached {
		usdaFoodPortionUpdateCacheMut.Lock()
		usdaFoodPortionUpdateCache[key] = cache
		usdaFoodPortionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q usdaFoodPortionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to update all for usda_food_portion")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to retrieve rows affected for usda_food_portion")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UsdaFoodPortionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("usdamodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaFoodPortionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"usda_food_portion\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, usdaFoodPortionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to update all in usdaFoodPortion slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to retrieve rows affected all in update all usdaFoodPortion")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UsdaFoodPortion) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("usdamodels: no usda_food_portion provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaFoodPortionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	usdaFoodPortionUpsertCacheMut.RLock()
	cache, cached := usdaFoodPortionUpsertCache[key]
	usdaFoodPortionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			usdaFoodPortionAllColumns,
			usdaFoodPortionColumnsWithDefault,
			usdaFoodPortionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			usdaFoodPortionAllColumns,
			usdaFoodPortionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("usdamodels: unable to upsert usda_food_portion, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(usdaFoodPortionPrimaryKeyColumns))
			copy(conflict, usdaFoodPortionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"usda_food_portion\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(usdaFoodPortionType, usdaFoodPortionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(usdaFoodPortionType, usdaFoodPortionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "usdamodels: unable to upsert usda_food_portion")
	}

	if !cached {
		usdaFoodPortionUpsertCacheMut.Lock()
		usdaFoodPortionUpsertCache[key] = cache
		usdaFoodPortionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UsdaFoodPortion record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UsdaFoodPortion) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("usdamodels: no UsdaFoodPortion provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), usdaFoodPortionPrimaryKeyMapping)
	sql := "DELETE FROM \"usda_food_portion\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to delete from usda_food_portion")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: failed to get rows affected by delete for usda_food_portion")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q usdaFoodPortionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("usdamodels: no usdaFoodPortionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to delete all from usda_food_portion")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: failed to get rows affected by deleteall for usda_food_portion")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UsdaFoodPortionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(usdaFoodPortionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaFoodPortionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"usda_food_portion\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaFoodPortionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to delete all from usdaFoodPortion slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: failed to get rows affected by deleteall for usda_food_portion")
	}

	if len(usdaFoodPortionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UsdaFoodPortion) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUsdaFoodPortion(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsdaFoodPortionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UsdaFoodPortionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaFoodPortionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"usda_food_portion\".* FROM \"usda_food_portion\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaFoodPortionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "usdamodels: unable to reload all in UsdaFoodPortionSlice")
	}

	*o = slice

	return nil
}

// UsdaFoodPortionExists checks if the UsdaFoodPortion row exists.
func UsdaFoodPortionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"usda_food_portion\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "usdamodels: unable to check if usda_food_portion exists")
	}

	return exists, nil
}
