// Code generated by SQLBoiler 4.10.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package usdamodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UsdaNutrient is an object representing the database table.
type UsdaNutrient struct {
	ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name        null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	UnitName    null.String `boil:"unit_name" json:"unit_name,omitempty" toml:"unit_name" yaml:"unit_name,omitempty"`
	NutrientNBR null.String `boil:"nutrient_nbr" json:"nutrient_nbr,omitempty" toml:"nutrient_nbr" yaml:"nutrient_nbr,omitempty"`
	Rank        null.String `boil:"rank" json:"rank,omitempty" toml:"rank" yaml:"rank,omitempty"`

	R *usdaNutrientR `boil:"rel" json:"rel" toml:"rel" yaml:"rel"`
	L usdaNutrientL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UsdaNutrientColumns = struct {
	ID          string
	Name        string
	UnitName    string
	NutrientNBR string
	Rank        string
}{
	ID:          "id",
	Name:        "name",
	UnitName:    "unit_name",
	NutrientNBR: "nutrient_nbr",
	Rank:        "rank",
}

var UsdaNutrientTableColumns = struct {
	ID          string
	Name        string
	UnitName    string
	NutrientNBR string
	Rank        string
}{
	ID:          "usda_nutrient.id",
	Name:        "usda_nutrient.name",
	UnitName:    "usda_nutrient.unit_name",
	NutrientNBR: "usda_nutrient.nutrient_nbr",
	Rank:        "usda_nutrient.rank",
}

// Generated where

var UsdaNutrientWhere = struct {
	ID          whereHelperint
	Name        whereHelpernull_String
	UnitName    whereHelpernull_String
	NutrientNBR whereHelpernull_String
	Rank        whereHelpernull_String
}{
	ID:          whereHelperint{field: "\"usda_nutrient\".\"id\""},
	Name:        whereHelpernull_String{field: "\"usda_nutrient\".\"name\""},
	UnitName:    whereHelpernull_String{field: "\"usda_nutrient\".\"unit_name\""},
	NutrientNBR: whereHelpernull_String{field: "\"usda_nutrient\".\"nutrient_nbr\""},
	Rank:        whereHelpernull_String{field: "\"usda_nutrient\".\"rank\""},
}

// UsdaNutrientRels is where relationship names are stored.
var UsdaNutrientRels = struct {
	NutrientUsdaFoodNutrients         string
	NutrientUsdaNutrientIncomingNames string
}{
	NutrientUsdaFoodNutrients:         "NutrientUsdaFoodNutrients",
	NutrientUsdaNutrientIncomingNames: "NutrientUsdaNutrientIncomingNames",
}

// usdaNutrientR is where relationships are stored.
type usdaNutrientR struct {
	NutrientUsdaFoodNutrients         UsdaFoodNutrientSlice         `boil:"NutrientUsdaFoodNutrients" json:"NutrientUsdaFoodNutrients" toml:"NutrientUsdaFoodNutrients" yaml:"NutrientUsdaFoodNutrients"`
	NutrientUsdaNutrientIncomingNames UsdaNutrientIncomingNameSlice `boil:"NutrientUsdaNutrientIncomingNames" json:"NutrientUsdaNutrientIncomingNames" toml:"NutrientUsdaNutrientIncomingNames" yaml:"NutrientUsdaNutrientIncomingNames"`
}

// NewStruct creates a new relationship struct
func (*usdaNutrientR) NewStruct() *usdaNutrientR {
	return &usdaNutrientR{}
}

// usdaNutrientL is where Load methods for each relationship are stored.
type usdaNutrientL struct{}

var (
	usdaNutrientAllColumns            = []string{"id", "name", "unit_name", "nutrient_nbr", "rank"}
	usdaNutrientColumnsWithoutDefault = []string{"id"}
	usdaNutrientColumnsWithDefault    = []string{"name", "unit_name", "nutrient_nbr", "rank"}
	usdaNutrientPrimaryKeyColumns     = []string{"id"}
	usdaNutrientGeneratedColumns      = []string{}
)

type (
	// UsdaNutrientSlice is an alias for a slice of pointers to UsdaNutrient.
	// This should almost always be used instead of []UsdaNutrient.
	UsdaNutrientSlice []*UsdaNutrient
	// UsdaNutrientHook is the signature for custom UsdaNutrient hook methods
	UsdaNutrientHook func(context.Context, boil.ContextExecutor, *UsdaNutrient) error

	usdaNutrientQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usdaNutrientType                 = reflect.TypeOf(&UsdaNutrient{})
	usdaNutrientMapping              = queries.MakeStructMapping(usdaNutrientType)
	usdaNutrientPrimaryKeyMapping, _ = queries.BindMapping(usdaNutrientType, usdaNutrientMapping, usdaNutrientPrimaryKeyColumns)
	usdaNutrientInsertCacheMut       sync.RWMutex
	usdaNutrientInsertCache          = make(map[string]insertCache)
	usdaNutrientUpdateCacheMut       sync.RWMutex
	usdaNutrientUpdateCache          = make(map[string]updateCache)
	usdaNutrientUpsertCacheMut       sync.RWMutex
	usdaNutrientUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var usdaNutrientAfterSelectHooks []UsdaNutrientHook

var usdaNutrientBeforeInsertHooks []UsdaNutrientHook
var usdaNutrientAfterInsertHooks []UsdaNutrientHook

var usdaNutrientBeforeUpdateHooks []UsdaNutrientHook
var usdaNutrientAfterUpdateHooks []UsdaNutrientHook

var usdaNutrientBeforeDeleteHooks []UsdaNutrientHook
var usdaNutrientAfterDeleteHooks []UsdaNutrientHook

var usdaNutrientBeforeUpsertHooks []UsdaNutrientHook
var usdaNutrientAfterUpsertHooks []UsdaNutrientHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UsdaNutrient) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaNutrientAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UsdaNutrient) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaNutrientBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UsdaNutrient) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaNutrientAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UsdaNutrient) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaNutrientBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UsdaNutrient) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaNutrientAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UsdaNutrient) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaNutrientBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UsdaNutrient) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaNutrientAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UsdaNutrient) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaNutrientBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UsdaNutrient) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaNutrientAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUsdaNutrientHook registers your hook function for all future operations.
func AddUsdaNutrientHook(hookPoint boil.HookPoint, usdaNutrientHook UsdaNutrientHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		usdaNutrientAfterSelectHooks = append(usdaNutrientAfterSelectHooks, usdaNutrientHook)
	case boil.BeforeInsertHook:
		usdaNutrientBeforeInsertHooks = append(usdaNutrientBeforeInsertHooks, usdaNutrientHook)
	case boil.AfterInsertHook:
		usdaNutrientAfterInsertHooks = append(usdaNutrientAfterInsertHooks, usdaNutrientHook)
	case boil.BeforeUpdateHook:
		usdaNutrientBeforeUpdateHooks = append(usdaNutrientBeforeUpdateHooks, usdaNutrientHook)
	case boil.AfterUpdateHook:
		usdaNutrientAfterUpdateHooks = append(usdaNutrientAfterUpdateHooks, usdaNutrientHook)
	case boil.BeforeDeleteHook:
		usdaNutrientBeforeDeleteHooks = append(usdaNutrientBeforeDeleteHooks, usdaNutrientHook)
	case boil.AfterDeleteHook:
		usdaNutrientAfterDeleteHooks = append(usdaNutrientAfterDeleteHooks, usdaNutrientHook)
	case boil.BeforeUpsertHook:
		usdaNutrientBeforeUpsertHooks = append(usdaNutrientBeforeUpsertHooks, usdaNutrientHook)
	case boil.AfterUpsertHook:
		usdaNutrientAfterUpsertHooks = append(usdaNutrientAfterUpsertHooks, usdaNutrientHook)
	}
}

// One returns a single usdaNutrient record from the query.
func (q usdaNutrientQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UsdaNutrient, error) {
	o := &UsdaNutrient{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "usdamodels: failed to execute a one query for usda_nutrient")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UsdaNutrient records from the query.
func (q usdaNutrientQuery) All(ctx context.Context, exec boil.ContextExecutor) (UsdaNutrientSlice, error) {
	var o []*UsdaNutrient

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "usdamodels: failed to assign all query results to UsdaNutrient slice")
	}

	if len(usdaNutrientAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UsdaNutrient records in the query.
func (q usdaNutrientQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: failed to count usda_nutrient rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q usdaNutrientQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "usdamodels: failed to check if usda_nutrient exists")
	}

	return count > 0, nil
}

// NutrientUsdaFoodNutrients retrieves all the usda_food_nutrient's UsdaFoodNutrients with an executor via nutrient_id column.
func (o *UsdaNutrient) NutrientUsdaFoodNutrients(mods ...qm.QueryMod) usdaFoodNutrientQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"usda_food_nutrient\".\"nutrient_id\"=?", o.ID),
	)

	return UsdaFoodNutrients(queryMods...)
}

// NutrientUsdaNutrientIncomingNames retrieves all the usda_nutrient_incoming_name's UsdaNutrientIncomingNames with an executor via nutrient_id column.
func (o *UsdaNutrient) NutrientUsdaNutrientIncomingNames(mods ...qm.QueryMod) usdaNutrientIncomingNameQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"usda_nutrient_incoming_name\".\"nutrient_id\"=?", o.ID),
	)

	return UsdaNutrientIncomingNames(queryMods...)
}

// LoadNutrientUsdaFoodNutrients allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (usdaNutrientL) LoadNutrientUsdaFoodNutrients(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsdaNutrient interface{}, mods queries.Applicator) error {
	var slice []*UsdaNutrient
	var object *UsdaNutrient

	if singular {
		object = maybeUsdaNutrient.(*UsdaNutrient)
	} else {
		slice = *maybeUsdaNutrient.(*[]*UsdaNutrient)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &usdaNutrientR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usdaNutrientR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`usda_food_nutrient`),
		qm.WhereIn(`usda_food_nutrient.nutrient_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load usda_food_nutrient")
	}

	var resultSlice []*UsdaFoodNutrient
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice usda_food_nutrient")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on usda_food_nutrient")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usda_food_nutrient")
	}

	if len(usdaFoodNutrientAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.NutrientUsdaFoodNutrients = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &usdaFoodNutrientR{}
			}
			foreign.R.Nutrient = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.NutrientID) {
				local.R.NutrientUsdaFoodNutrients = append(local.R.NutrientUsdaFoodNutrients, foreign)
				if foreign.R == nil {
					foreign.R = &usdaFoodNutrientR{}
				}
				foreign.R.Nutrient = local
				break
			}
		}
	}

	return nil
}

// LoadNutrientUsdaNutrientIncomingNames allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (usdaNutrientL) LoadNutrientUsdaNutrientIncomingNames(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsdaNutrient interface{}, mods queries.Applicator) error {
	var slice []*UsdaNutrient
	var object *UsdaNutrient

	if singular {
		object = maybeUsdaNutrient.(*UsdaNutrient)
	} else {
		slice = *maybeUsdaNutrient.(*[]*UsdaNutrient)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &usdaNutrientR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usdaNutrientR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`usda_nutrient_incoming_name`),
		qm.WhereIn(`usda_nutrient_incoming_name.nutrient_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load usda_nutrient_incoming_name")
	}

	var resultSlice []*UsdaNutrientIncomingName
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice usda_nutrient_incoming_name")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on usda_nutrient_incoming_name")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usda_nutrient_incoming_name")
	}

	if len(usdaNutrientIncomingNameAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.NutrientUsdaNutrientIncomingNames = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &usdaNutrientIncomingNameR{}
			}
			foreign.R.Nutrient = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.NutrientID) {
				local.R.NutrientUsdaNutrientIncomingNames = append(local.R.NutrientUsdaNutrientIncomingNames, foreign)
				if foreign.R == nil {
					foreign.R = &usdaNutrientIncomingNameR{}
				}
				foreign.R.Nutrient = local
				break
			}
		}
	}

	return nil
}

// AddNutrientUsdaFoodNutrients adds the given related objects to the existing relationships
// of the usda_nutrient, optionally inserting them as new records.
// Appends related to o.R.NutrientUsdaFoodNutrients.
// Sets related.R.Nutrient appropriately.
func (o *UsdaNutrient) AddNutrientUsdaFoodNutrients(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UsdaFoodNutrient) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.NutrientID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"usda_food_nutrient\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"nutrient_id"}),
				strmangle.WhereClause("\"", "\"", 2, usdaFoodNutrientPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.NutrientID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &usdaNutrientR{
			NutrientUsdaFoodNutrients: related,
		}
	} else {
		o.R.NutrientUsdaFoodNutrients = append(o.R.NutrientUsdaFoodNutrients, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &usdaFoodNutrientR{
				Nutrient: o,
			}
		} else {
			rel.R.Nutrient = o
		}
	}
	return nil
}

// SetNutrientUsdaFoodNutrients removes all previously related items of the
// usda_nutrient replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Nutrient's NutrientUsdaFoodNutrients accordingly.
// Replaces o.R.NutrientUsdaFoodNutrients with related.
// Sets related.R.Nutrient's NutrientUsdaFoodNutrients accordingly.
func (o *UsdaNutrient) SetNutrientUsdaFoodNutrients(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UsdaFoodNutrient) error {
	query := "update \"usda_food_nutrient\" set \"nutrient_id\" = null where \"nutrient_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.NutrientUsdaFoodNutrients {
			queries.SetScanner(&rel.NutrientID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Nutrient = nil
		}
		o.R.NutrientUsdaFoodNutrients = nil
	}

	return o.AddNutrientUsdaFoodNutrients(ctx, exec, insert, related...)
}

// RemoveNutrientUsdaFoodNutrients relationships from objects passed in.
// Removes related items from R.NutrientUsdaFoodNutrients (uses pointer comparison, removal does not keep order)
// Sets related.R.Nutrient.
func (o *UsdaNutrient) RemoveNutrientUsdaFoodNutrients(ctx context.Context, exec boil.ContextExecutor, related ...*UsdaFoodNutrient) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.NutrientID, nil)
		if rel.R != nil {
			rel.R.Nutrient = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("nutrient_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.NutrientUsdaFoodNutrients {
			if rel != ri {
				continue
			}

			ln := len(o.R.NutrientUsdaFoodNutrients)
			if ln > 1 && i < ln-1 {
				o.R.NutrientUsdaFoodNutrients[i] = o.R.NutrientUsdaFoodNutrients[ln-1]
			}
			o.R.NutrientUsdaFoodNutrients = o.R.NutrientUsdaFoodNutrients[:ln-1]
			break
		}
	}

	return nil
}

// AddNutrientUsdaNutrientIncomingNames adds the given related objects to the existing relationships
// of the usda_nutrient, optionally inserting them as new records.
// Appends related to o.R.NutrientUsdaNutrientIncomingNames.
// Sets related.R.Nutrient appropriately.
func (o *UsdaNutrient) AddNutrientUsdaNutrientIncomingNames(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UsdaNutrientIncomingName) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.NutrientID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"usda_nutrient_incoming_name\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"nutrient_id"}),
				strmangle.WhereClause("\"", "\"", 2, usdaNutrientIncomingNamePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.NutrientID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &usdaNutrientR{
			NutrientUsdaNutrientIncomingNames: related,
		}
	} else {
		o.R.NutrientUsdaNutrientIncomingNames = append(o.R.NutrientUsdaNutrientIncomingNames, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &usdaNutrientIncomingNameR{
				Nutrient: o,
			}
		} else {
			rel.R.Nutrient = o
		}
	}
	return nil
}

// SetNutrientUsdaNutrientIncomingNames removes all previously related items of the
// usda_nutrient replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Nutrient's NutrientUsdaNutrientIncomingNames accordingly.
// Replaces o.R.NutrientUsdaNutrientIncomingNames with related.
// Sets related.R.Nutrient's NutrientUsdaNutrientIncomingNames accordingly.
func (o *UsdaNutrient) SetNutrientUsdaNutrientIncomingNames(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UsdaNutrientIncomingName) error {
	query := "update \"usda_nutrient_incoming_name\" set \"nutrient_id\" = null where \"nutrient_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.NutrientUsdaNutrientIncomingNames {
			queries.SetScanner(&rel.NutrientID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Nutrient = nil
		}
		o.R.NutrientUsdaNutrientIncomingNames = nil
	}

	return o.AddNutrientUsdaNutrientIncomingNames(ctx, exec, insert, related...)
}

// RemoveNutrientUsdaNutrientIncomingNames relationships from objects passed in.
// Removes related items from R.NutrientUsdaNutrientIncomingNames (uses pointer comparison, removal does not keep order)
// Sets related.R.Nutrient.
func (o *UsdaNutrient) RemoveNutrientUsdaNutrientIncomingNames(ctx context.Context, exec boil.ContextExecutor, related ...*UsdaNutrientIncomingName) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.NutrientID, nil)
		if rel.R != nil {
			rel.R.Nutrient = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("nutrient_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.NutrientUsdaNutrientIncomingNames {
			if rel != ri {
				continue
			}

			ln := len(o.R.NutrientUsdaNutrientIncomingNames)
			if ln > 1 && i < ln-1 {
				o.R.NutrientUsdaNutrientIncomingNames[i] = o.R.NutrientUsdaNutrientIncomingNames[ln-1]
			}
			o.R.NutrientUsdaNutrientIncomingNames = o.R.NutrientUsdaNutrientIncomingNames[:ln-1]
			break
		}
	}

	return nil
}

// UsdaNutrients retrieves all the records using an executor.
func UsdaNutrients(mods ...qm.QueryMod) usdaNutrientQuery {
	mods = append(mods, qm.From("\"usda_nutrient\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"usda_nutrient\".*"})
	}

	return usdaNutrientQuery{q}
}

// FindUsdaNutrient retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUsdaNutrient(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UsdaNutrient, error) {
	usdaNutrientObj := &UsdaNutrient{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"usda_nutrient\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, usdaNutrientObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "usdamodels: unable to select from usda_nutrient")
	}

	if err = usdaNutrientObj.doAfterSelectHooks(ctx, exec); err != nil {
		return usdaNutrientObj, err
	}

	return usdaNutrientObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UsdaNutrient) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("usdamodels: no usda_nutrient provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaNutrientColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	usdaNutrientInsertCacheMut.RLock()
	cache, cached := usdaNutrientInsertCache[key]
	usdaNutrientInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			usdaNutrientAllColumns,
			usdaNutrientColumnsWithDefault,
			usdaNutrientColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(usdaNutrientType, usdaNutrientMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(usdaNutrientType, usdaNutrientMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"usda_nutrient\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"usda_nutrient\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "usdamodels: unable to insert into usda_nutrient")
	}

	if !cached {
		usdaNutrientInsertCacheMut.Lock()
		usdaNutrientInsertCache[key] = cache
		usdaNutrientInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UsdaNutrient.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UsdaNutrient) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	usdaNutrientUpdateCacheMut.RLock()
	cache, cached := usdaNutrientUpdateCache[key]
	usdaNutrientUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			usdaNutrientAllColumns,
			usdaNutrientPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("usdamodels: unable to update usda_nutrient, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"usda_nutrient\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, usdaNutrientPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(usdaNutrientType, usdaNutrientMapping, append(wl, usdaNutrientPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to update usda_nutrient row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: failed to get rows affected by update for usda_nutrient")
	}

	if !cached {
		usdaNutrientUpdateCacheMut.Lock()
		usdaNutrientUpdateCache[key] = cache
		usdaNutrientUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q usdaNutrientQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to update all for usda_nutrient")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to retrieve rows affected for usda_nutrient")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UsdaNutrientSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("usdamodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaNutrientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"usda_nutrient\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, usdaNutrientPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to update all in usdaNutrient slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to retrieve rows affected all in update all usdaNutrient")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UsdaNutrient) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("usdamodels: no usda_nutrient provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaNutrientColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	usdaNutrientUpsertCacheMut.RLock()
	cache, cached := usdaNutrientUpsertCache[key]
	usdaNutrientUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			usdaNutrientAllColumns,
			usdaNutrientColumnsWithDefault,
			usdaNutrientColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			usdaNutrientAllColumns,
			usdaNutrientPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("usdamodels: unable to upsert usda_nutrient, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(usdaNutrientPrimaryKeyColumns))
			copy(conflict, usdaNutrientPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"usda_nutrient\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(usdaNutrientType, usdaNutrientMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(usdaNutrientType, usdaNutrientMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "usdamodels: unable to upsert usda_nutrient")
	}

	if !cached {
		usdaNutrientUpsertCacheMut.Lock()
		usdaNutrientUpsertCache[key] = cache
		usdaNutrientUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UsdaNutrient record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UsdaNutrient) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("usdamodels: no UsdaNutrient provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), usdaNutrientPrimaryKeyMapping)
	sql := "DELETE FROM \"usda_nutrient\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to delete from usda_nutrient")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: failed to get rows affected by delete for usda_nutrient")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q usdaNutrientQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("usdamodels: no usdaNutrientQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to delete all from usda_nutrient")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: failed to get rows affected by deleteall for usda_nutrient")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UsdaNutrientSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(usdaNutrientBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaNutrientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"usda_nutrient\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaNutrientPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to delete all from usdaNutrient slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: failed to get rows affected by deleteall for usda_nutrient")
	}

	if len(usdaNutrientAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UsdaNutrient) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUsdaNutrient(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsdaNutrientSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UsdaNutrientSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaNutrientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"usda_nutrient\".* FROM \"usda_nutrient\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaNutrientPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "usdamodels: unable to reload all in UsdaNutrientSlice")
	}

	*o = slice

	return nil
}

// UsdaNutrientExists checks if the UsdaNutrient row exists.
func UsdaNutrientExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"usda_nutrient\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "usdamodels: unable to check if usda_nutrient exists")
	}

	return exists, nil
}
