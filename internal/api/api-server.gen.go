// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get app config
	// (GET /config)
	GetConfig(ctx echo.Context) error
	// Get foods
	// (GET /data/recipe_dependencies)
	RecipeDependencies(ctx echo.Context) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// load mappings
	// (POST /meta/load_ingredient_mappings)
	LoadIngredientMappings(ctx echo.Context) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Get recipes
	// (GET /recipes/bulk)
	GetRecipesByIds(ctx echo.Context, params GetRecipesByIdsParams) error
	// scrape a recipe by URL
	// (POST /recipes/scrape)
	ScrapeRecipe(ctx echo.Context) error
	// sum up recipes
	// (POST /recipes/sum)
	SumRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// recipe as latex
	// (GET /recipes/{recipe_id}/latex)
	GetLatexByRecipeId(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
	// perform sync
	// (GET /sync)
	DoSync(ctx echo.Context, params DoSyncParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// RecipeDependencies converts echo context to params.
func (w *ServerInterfaceWrapper) RecipeDependencies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RecipeDependencies(ctx)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "data_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "data_types", ctx.QueryParams(), &params.DataTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data_types: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "fdc_id", runtime.ParamLocationPath, ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ingredient_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "ingredient_id", ctx.QueryParams(), &params.IngredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// LoadIngredientMappings converts echo context to params.
func (w *ServerInterfaceWrapper) LoadIngredientMappings(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LoadIngredientMappings(ctx)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipesByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipesByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecipesByIdsParams
	// ------------- Required query parameter "recipe_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "recipe_id", ctx.QueryParams(), &params.RecipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipesByIds(ctx, params)
	return err
}

// ScrapeRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ScrapeRecipe(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ScrapeRecipe(ctx)
	return err
}

// SumRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) SumRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SumRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// GetLatexByRecipeId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLatexByRecipeId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLatexByRecipeId(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// DoSync converts echo context to params.
func (w *ServerInterfaceWrapper) DoSync(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DoSyncParams
	// ------------- Required query parameter "lookback_days" -------------

	err = runtime.BindQueryParameter("form", true, true, "lookback_days", ctx.QueryParams(), &params.LookbackDays)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lookback_days: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DoSync(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/albums", wrapper.ListAllAlbums)
	router.POST(baseURL+"/auth", wrapper.AuthLogin)
	router.GET(baseURL+"/config", wrapper.GetConfig)
	router.GET(baseURL+"/data/recipe_dependencies", wrapper.RecipeDependencies)
	router.GET(baseURL+"/foods/bulk", wrapper.GetFoodsByIds)
	router.GET(baseURL+"/foods/search", wrapper.SearchFoods)
	router.GET(baseURL+"/foods/:fdc_id", wrapper.GetFoodById)
	router.GET(baseURL+"/ingredients", wrapper.ListIngredients)
	router.POST(baseURL+"/ingredients", wrapper.CreateIngredients)
	router.GET(baseURL+"/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST(baseURL+"/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST(baseURL+"/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST(baseURL+"/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET(baseURL+"/meals", wrapper.ListMeals)
	router.GET(baseURL+"/meals/:meal_id", wrapper.GetMealById)
	router.PATCH(baseURL+"/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.POST(baseURL+"/meta/load_ingredient_mappings", wrapper.LoadIngredientMappings)
	router.GET(baseURL+"/photos", wrapper.ListPhotos)
	router.GET(baseURL+"/recipes", wrapper.ListRecipes)
	router.POST(baseURL+"/recipes", wrapper.CreateRecipes)
	router.GET(baseURL+"/recipes/bulk", wrapper.GetRecipesByIds)
	router.POST(baseURL+"/recipes/scrape", wrapper.ScrapeRecipe)
	router.POST(baseURL+"/recipes/sum", wrapper.SumRecipes)
	router.GET(baseURL+"/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET(baseURL+"/recipes/:recipe_id/latex", wrapper.GetLatexByRecipeId)
	router.GET(baseURL+"/search", wrapper.Search)
	router.GET(baseURL+"/sync", wrapper.DoSync)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9eXPbOPbgV0Hxt1uTVCk6fMSx949dx0fGO47tkpzJb7YnpYHIJwkdEmADoB11yt99",
	"CwcpHiBFynbaffyVWMT53sPDu/Hd81kUMwpUCu/ouxdjjiOQwPVfIYmIvFE/qb8CED4nsSSMekfe7RIQ",
	"TaIZcIHYHBEJkUCSIQ4y4bTv9Tyimv2SAF95PY/iCLwjM6LX84S/hAibUec4CaV3tDPseRH+RqIk8o72",
	"1R+Emj9GPU+uYtWdUAkL4N7DgxmxYW0CMPeXSM+PXqnGr+sWpf/peRx+SQiHwDuSPIH8Gu3sQnJCF3py",
	"Np8L2AyaAmTEVxKjGcwZByQk5pLQhfrdZ2EIvkRyCYiDSEKJBMi6xZqZCyDMADV0AOohbakxehyxhMrq",
	"krH+HWEaoIRqDMWcxcAlAd1PsIT7UO1H1P7QPRYIvsUh8YnsIULnwDkEPQTS93pl6PU8PUNlKDtvtXUc",
	"A5/e4TBxzG9+7nlzxiMsvSMvYMkshPU4Bg9qnMeO8JCnkJ/S5ZruX7LWbPYz+FLNd5zI5RhEXJ1SsoBV",
	"IPzzvXSQWs9LBPDch3T88mpUq54exLWW9xzTAIJzxoLqcmbm43SuvpaXpT9O2T0trGK9vHznqY8lLBhf",
	"OVsuWSJgycJgKoDfqR9drQhdcAhIyo8q323fqSC/amS2QHy+yzSlveqRzoOzMItrhA1AvpCg+UIRlvgO",
	"kxDPQjjFUi8evuEoDtUo7wajd4Od4eid6wRoGF+nKFh3+gfm6CqR6IazIPGlQCcsijFd1Y5hFneSw9J6",
	"sBsW+4zTHroBTBMpemgCEAj072Q43HmLxhBiCQGaUOx/Fa4ZAizxJGMT64EvL+pa3+of820tCJ0d8jSb",
	"73P16Rb97Qq9PxuP/4U+Xvy3q/M88C+CQrf93b3d/XdVfqkYAQtOQixE66WpHleJ5BnVapav/vM/OMy9",
	"I++/ButbdmC58eA810uNYofFnONVOuqnOMASLtmi06jrXo5hF7Gvd3fCgiLw94ejt6N3w6ELJgtJ6KfY",
	"L0JkeHAw3N0bvtvf2XGSbXbgJ+b4nCdheAvfZHGUEbq++n+u7iVOkKPUs+OrT7cT9Mr+p4fMf9Dx1eng",
	"eowmn67OL68/n43R9cXl6z4aH19MLq4mfXQ6vjg7RSfj4ytFLBdnE/Qq90cPTT59OB73Kv3Xf//jbHx1",
	"djlRE6Hjy4/XV6cT9Krx84a1ufYd4hmEBXIqchEfhz5JHOwlu+AyUI0O++/etbvaKtzMxyHjduSN8+wN",
	"t56Fz9hyFXAsW0610x8Oh1tvaslCEBI4C9tMtu2u5li2Gf5d//DwcGfbOcjM3AcbIdY/3JoICDfcdiOg",
	"+gejw7dbThIziYVoS9L7j6DpmDMJpNWO9vrD4Whb3AgsE0XRwXk7QhgqQtgWfIIFLWG3LTmLZIF5q9N5",
	"8JiNSI6paAuxreZwzRqxgMwJBB1lspiD0pWVODKRWELlOvU+Xd2Mz26Ox2enzv7JLCS+7l+deW8wUhMf",
	"ujpaWXRi5d+s0867XgdhWHX/ZEXh9bwL14SS4wBOlphSCAvNf/JO/n5xeTq9+nQ7vri9uL6anl9fn05v",
	"xtcfxscfJ17P+zC+Pjkb/0tJy5nwUh2/IKCUBHEjuOXExaIg6BLDTxidk8Uplriq6vj6G1KjVTSdBWOL",
	"EKZ+qO7dKQmci7WNhM9iEJv1iGLzXnUO1wbOqCRyNUmiCBshvbgHJVEJRHEEAxJojT1KQknikABHc8YR",
	"Rv8gNEBsjkCPVNkpcSiBHHwSwzQAiUmIGEdr8QsRp9T7ldBgkzR6kQ2ilqSPW7bW6hpy31rRsrGIuHdS",
	"2oI18TRjS+/TtiysRW/ViSrOmWMjx2gBFDjxEagGKAIh8EINmx2e717645E3YRHIJaELdK/Wes9ZymPy",
	"WMvaf3eeUR/cNFvaYzqKazdKdziWkpNZYjhScQGFz6nuVmxSq6QdBz8nQkaKOFCEA0CSIaXgiB4i1A+T",
	"QO0+YkTIhIMm6jmWyF9iugDhFJNJUZ8bDYc7Ls0lpRHnUpwUURWCijPt7I9GB66pBPySAPXhyhBoYXWu",
	"9tVbzfuYQsDs/Ai92e8P/6djmRZbeVW+SIIKuCi1x/SQAKl5g2Cauksahb27iiOo8VH+p81KedcBSrSp",
	"17GZweuNp7zGQYNY4htGymrjzp5TseU4+gxksSzehDv9kYPflAhh//Bw5zDHqAiVuzueaxYixjBPRBHZ",
	"xshsG88YCwFTzSEJ/RdgfuyngMmvazgataPys28SOMWhOkdO+QO4D1Q69j7s71dFKQv207zVhiqp8ydv",
	"zhIaaEEmtSAKPVL6V4T5V5BTrPYjiCUEkfA7WE3nNAhE1i2ZTYtd8YITPwmVMB2WB+DTEBbYX6VtC1bM",
	"L44da7scnTMXu5YsRiHcQaiZ0v+unJCEEjmNcBwTuhCOi8t+0XfuLwm5w6Fi5KqX4jGtDDdKGvtoxnGZ",
	"be45jmPDVTaZfz7bpuXjlQ7RK22n7oxlxqmqITPzInQSyHt1Z3OvdIze7nl1lrl0UafAyR1OGU9bO1uu",
	"l+MKeXuwP9orrsS5jgh/K3Q8HPXbCd8RBAQXb8bDYX+3XV9S7Hiw2z9o15Pm8NgEqLwxMu1zTHG4EkSc",
	"arlQtB2i3C0j6DyLKtBYO9nMtrY3rPUkfSnRa5E03Fddzjx9cnLayd58gkM/McbwOWcRwijAJFwhfZ0j",
	"y1fxQv8XWXULCfIroAiwSDhsMiGvjehtydr2qJL0wX6L++mhBL/1/JtgN9rpBLmPmCZz7CsBh/9NIKyI",
	"RBIfh/8LxZhLgkMUMD9RohmukzhKGzzssL8bxt2CivZdxfZrr5bXtThqSpyY3md3aoseBZk9z2OMWcLt",
	"dLNrnZYg3eIE2d24h8jNWtxK3Q0x1t7q96vU3VW+ViPAYQ/dL4m/RDNOggUIZNQz7RCPl0wy4XY5pjd5",
	"W79H2fnmdKgUBZX2LpW0X9PoxIoWrb00WhZxDJQXa9qONxlf6l5NC0xFrk7j6j71o5ZIrORJrkqGRZEt",
	"vyILwDpKm+hoDkNvT0dpWgN9EqSZuI1WQxQOTcXepVdUB4WCO/DP5Fu2hoCS49feV+g4CCDooexvA6bg",
	"j+6kzmwx3Uh4beGpcTp3c37/5Rr+ca7hbX0VvxNfQyqofV7rus2Keq3okF7GLSUG44lec65NRyjjcpZH",
	"TFPlZlPHzH7yeNuZ5hdTlyn//PQEXQROzZXmwwqcQWlPErpihUvHLPaL9sDExhDQYc5Ugm/hNZpqcbcI",
	"wTWq8pBwX7YVkc9pZ7x1KLVpz073w0RyfD8DzgmIHuL4vt0FcbB3sLdXH8XUkqTtv2/KpF1zGZwTisNz",
	"c/yciuxJIaS4NXbXNt2ai+l5YqxucsTaatA8uGopUo8tr1iZ3RrhIw0P5jAPQUlXcglIacY4zEUOG2Oo",
	"VZR/hcB691LS7aMxxIBl9oNpKECgCK/QEt8BmgFQFDAKiFE9icAR2IHRPZFL/aM2XQgkluyeup0tNE7k",
	"eSdp+SLtkjsRLrVJ/J0IyTjxcTiGOXCgJdlsjkPhNJTTYOZwtRzujt42sb4TRu+AC3W0sS8Zb7+jq9oR",
	"XCyw6c4d7QxGb+tvXV/NQubEv6qY9c85XmBOMPpvhWyKhcAbTWebfOgPPe+D9kvfaC3pOJwlDm0eU4TV",
	"F+QzKjGhhC7Qf3SP/7RyMLudyLFRL6YJDx2XRe6jKzCByNDhtzI/95yR1D4Wjh7ph1Y2yHT44uLSIVyX",
	"ydoJ7pBoKMp9ruinDTc8CfKuBsmQXBKRc3l7rUzq7THldrZfbHKx97wYc+fWc975i1PL2gSJSIg5ehWS",
	"rxCuEEYBmWumIJGIIQwJXbzu4MdvRoexTndFir8kYcCBNgFDMXQsEeaQQ1JbSaeywJqLq4u9ghRosN3s",
	"xq6hbSjVvY6tcYVbnq1zWSoU2Gq/Zqj6vf7WzrcydeU3mMKnjU+tFAyTc6E6hnS6MNcjpIutQMME8AiE",
	"ZyyRKK8oVwzbIcGiZDvYEJyV1znqndDOfJ8XhEDLqNL9d0OdnUTc4FXIsIN7hkRItZMqriq3ZNbimYFT",
	"XUp7Gm8Ll09pbFKLVCfjhBC1AWCAbAt9renkt1b7tMltDrJ9yqizFE7T2ep50FWM/9uEqhSYxYUVtuzG",
	"XFU8r8p8sRpAo2HdzMRt9dEVkwiHIVrrBuiehKHRO9SHOYEw0MFbVav7aZ0i/B5g3kO3QAPgISMUjRkW",
	"socEKEWph7j6E4IeUoDb7yGlDKBXu3vvL2/Hr1s4DPf29/edITTZNjb6RPRIa5/IQx6axmHSCEnTBL06",
	"vzo9nbx+BBwdURij/n4rGm5EwSQmPoge8hPOVyhm94E+Ghsj8N6N9t66IZsyiUqQ9M5wtN/c5fGrzIZy",
	"xDod9vfaAaw9dVQ8ZtbkVQ0Q3xkNh0OnxGx61G59hCSehSBi5rYycZBKgUz1083yV7F5cyijE8XGk3ce",
	"4kU5KKjaNqmYgm/fu23BFym3rIuu1XftK6U6xHhBqGFPiYDXlbNi8s4rQ/2d3aMI05VN0r4HDkixURDS",
	"mlu0TBub4N3qXmwydt21V+2gRpr67hzsWyYL5h/VVqDMsVc/Hs2wVBzw81Ibh/R4qqEV0IVzJKlmb7s0",
	"Ay7scyaE5lF6rZ4zTz9/WeWX28uKAeSn7q0T3HOwct1gHwGHT+cKxhKm2LHz+yXQNMVd4q9AC0IClvBG",
	"Erfe+1jV2liQEIkKxJfjEmYjba1X2lTjdl1nKl6rgRTcjcq2WYzMBdRbAGfrrkOpHdqBWBvYrzTrvwkd",
	"MaRIEWuEo1c4/a70biRi8Mmc+FaSrDKEJomwGecNgmG68vbabjk6Py+LVhRBF6CMr9tprkv0J2MaguwI",
	"MGpAVj0BvlsItLws1VVxEOi1RezOraQ+QtZ2FLIog9dpDzOgKDi9akxD60FKKR529zXAFgnPXJglqM1m",
	"HO4Irt7SCQ1AAo8IdTvOy5Fsh+1iyauh3s0TKQjkI3lLZKKl+cyDUGPJzWdZ7LcIkK2u8SSX59tDs1Vm",
	"1/OdvI1W5Q5vd7jvFHYw/Vpc42g0bLFGJYZU7euLZgAer2PQcxGxRZDFCfeXWIDT7L8z2Bm692F8MorI",
	"Sj6+3Z3R211nbouQjMMJkaVom9vxp8nknxeXl2fOeVQnnbJYSou5bJcNc1UfGfxEQeIhnn0EuWzQUEbD",
	"/s5od3/gcxYLn+wMRwf94V5/uLO3V5NRbwa8JCVa8ZZSxuJoMAgY6TO+GDSPnC2+xiORTXTNiZJHw9PG",
	"AM1ch1vwl5T8Us4HOr2+0FLoe8BUuA9KE2F2cms5hnBIC+mEFy7G4FIMZkZfLhP13u67t2/dsbpXTZ66",
	"Io1Vg8r7NybHu9zZBbxqAtbb/k4bfVCt8sZoHCaAxBXpoKV3NkfnrkCVp4s8jMAkujYaAPUk1VRAiZ0X",
	"Xra1i2KcVc0GK/6KekNnF/fxZifIc25dSVhNm9baRzVFE4fdBOkfva2bTGmo2deNWz3qsKan0kw6781I",
	"gTZ4rGmPVsV41B67ak2FxT1isxpWDuVIw7waD4cF1PjWN2iXszDh0yUWS0e9sDDhSH9yRXZmRrZS1rr+",
	"HcXfntovXVeZ7n4JHLTmo0GDfByBTtjJ6TImHV/pqKwk/ec8YEoBfGLTwD0JpAOw+ueWIHJp2hm2e57P",
	"wYZAm7kyxGQAc1FXqpvGQAOg/sqVXB9zENrDrRTuUOs9YqkLG8p7AJpp4TTIeR97GhEhltLYj4x1xtcx",
	"JYKhGaBUfe83ucnaU0Wu03Z1CnIDuM0z7nkblNS86lnXr/1UDXptfqxeCXzVjVVh1UQZNQETSOnAStgy",
	"FhmLShQwEIgyaXP8FVWs0L89bb5V5PlvL3VuILgDvjJFEALCwZfhyqTXBbNqBIYh7vpDqWPajPSnT+f6",
	"NDy16Y6IaYglCDm18zlXJJeK7LkBhUTExPtFTEgFKqAyXa3njHNrKnNRF3XzS4JN8Y9KxzQlMWvRiiEL",
	"8GtCetMvCvVrQ1O34I+JGcOZtmSW65iYJhHKvrbbhGZ9jqFmjH1VCLqHmSASRMfVZ+mX5cVL7Fq4/rXX",
	"IerCXTA1RWRd4dRaikyPRhlhW106lgBT0OYor5fWSM1oZ70m18np5Q+2hd0mXqQdr20ZUoWRuE2n6b1u",
	"V4MG1pLann/8eU6sgf9fx/bJjq07VqnxTG04KClvdRwSISFGhBaJoHREEt6qysI69mYbIc0B7W9tkZlR",
	"Yj5usZqdKyRP6g5E97my0dr5wArTFze+EXG1LO55sPc8OKnlE8+GmJoZK4Fu2yBmo8ppWX2mc6JXpA99",
	"pPjVwDKrqktS6+JubV1/QjVW59gZeacd/sZgObDMAr0ic72G113D6Zt7OpfsXOxDLUwbcv4sMHW2ikhm",
	"a+zna4cJFoFTtUCSIaBLTH1w1/0LMqWmS5Byey4XEvoVgunT2AbtYE/l+2dKM0kFMMf5u9aaS/b9SQK6",
	"SycwSG3GGnqlBX3ZRC8N8l8N0TwB/jPW0pYI3Ft2b64SurWhCMvu3ltnmFVtquE/zz700Pj6+nbSQ2e3",
	"Jz00Of50e+auUloufbe773bZVOpPtMyWnIyR6dgpWfI9Z77PQtIhUXJ0MNw9OHxpiZJPn9C4OZ2uruyc",
	"O5tuNBoeDl96Ol1jCntDMt17joUgPkYsBI59wOgO8z4iEqu5niKvrhQr7DwVVR+m6dXtSDx12HT1CNVG",
	"Tm9Zi6LuMLUsSaGzhZUg9YQVD7ZA8Ia6NPYVIvusj63Al0Yn2kzKfM6U0IbzdVZRoyO1+upQMd+no6P1",
	"kb7IhmSx23X8WTcZoslfVrk7q4pgY4YeoTrhkC5CQFZArsbEBWpwcucKsMs+OeivNsPFZFtzwhKRloMT",
	"j09v2Ubl3sYBv50rhekluYJ1sy+uC4nZGBqHIQ3fo5BQ0GHI6FXM4Q2JYsblQPgcx/C63sPSVXQVyUxI",
	"IlPG9nwmivpibaKpAHWNov1nIfztCLLJPDsgmzOaXwZBPxNp1lpqJOYLkA2uzcGGkvG1iWubqXttbnNQ",
	"9tqC04q0uzDLhnnzH1slpOc7tNts7VnuuuMn28emLSSRGIOIGRWO+qGz1XTNhHEQEHNWboprbZXtK/AC",
	"/qmj91yEWn2/JHqutOOGhZSflFOL6OWA4AZgIXusrb5QyCjsrDeYFDpXN6CBM4p5VwvQe+30ht3dg8N3",
	"+y+giJ3NzawtWlTJzzsYjd6O3Cl6z1k46DHFduwen1SDlphLBxmYLrvO+KZ7IPi8g2Hlc6XDFrpYvgZA",
	"7WmvSjrtpY9Z+6Z1UWnm99TxGmWVATZclYpxOBlGjgHVPBRDqPGwui+GhdiQpNNRhzRlALZUJCuJ78JZ",
	"iCiTGx4lPFYrHgjPzNirD7/87CLsIkwrtF9hLLs1T5VUetbmP3wELFFEvkGAAiKWINxZK04LS5uy3jVM",
	"r96kDAswKcnafJH9mVWPbZM+PmpZytvFRdskn4we80JBu9ysmtdEDttNXQbI7v674dtW80bFDLUNjqWs",
	"6ZaPjeRLk+dzcnbciU2bs9n9JHZXH+3yno6hDfATrniI2q2VOgFz4MeJCbg1f52nIP2/n2/Tl7S1sqa/",
	"rteylDI2RJcWFNUmO9+gN9JuI4/+H0r8rysBEdBfcd9nUeWseMc3Jo8nTTdaELlMZqrtIN95sGAJ13Wy",
	"iQ9WhrbPfn+8uM05ab0PqqENZEenWOKZKWCWxXx5o/6wPzTaKlAcE+/I29U/9bwYy6WGzUBXdDOvnzWk",
	"sauDpS8QJdl5l0TI4zA8Nl116Wst8OthdobDFEzWxqQrXxi5Y/CzMMhfP11eLkk0c4rqt0tAaV0dnM7b",
	"ivtXC9u1MCU+VPEXhutEfLsE49i3IeS6h33IvsP2G29D/baYYzEJhW8x+BIC87yY3oJIn4vT+NE5+Rmk",
	"TDjTTyl4v6j2A2xPRMyEA/MT8BkNTIgJm2d0G8AdhApjom82rkmYBOahuYEgC/qG0ME9zAYz7H8FGrxR",
	"8/yXUP+TS3hDgjeSfQX6RrI3K5bwNwL4nT5yRSJT5/WSLYiWWTDHEUid0/FTeaEGwcg+HeV6MN9+av+6",
	"/5dH0nSjNJI+Cu8iskRqT4FRn397irK81Dv66UuevizENXaQj8NQYTpPZYlcKnowS7TUZh5e7MZoPoA0",
	"bzl6z4iQ3GuRDsCc5N6LfEFH/ANIhOMY+Sl4UtiLlZAQWZirVQ+ydx1tTkf62KULCzZmotC2jJRSiohp",
	"8oRXAHHXfMFh2DX6JEti2ZrjFwBRxYDJ4VwDP+fhyoeRaVzotoNZEn6thf4iHRLNVogEwnUetFXg/epC",
	"f23ki2YAFz/MimPXc8RyiGu+TEwRks/JK0sZtg4kTfLe1TYoss9r5FBiHLTdGJOZ9tyOXUKDa0frJgNT",
	"3eZG/eA99DY21yVyWrdWGF43rspQiiMghcE62sgqpAvPSQ9d6tv/QEqpvBDTglZeDje3K9tMq9/N0X3o",
	"fI0q+CiusYlpKBqZBz6y/godRaqTB9uzjopa9tx4N3nxVaCfpSBPZ0eSIYzucEiCtMbXS6ICxf4xOj89",
	"QUAlX5lLoIYcSnEg3XS3i2JN2B/IvdreUOWUxfqLqfYV8R9yL+Uh6RIhTNE1Ns8/RJ3yn563BBzYPPVv",
	"b6h9/KY8Qkjo17SCk2qTDbneXZMq8/AS9dJikFJK30WZqVejlzqp+kQnahXp2p7w9yxYPdnO8/EbDl1B",
	"r0IgnEf3bIViUym4jy6M0Z8E+p5G8I0IHcMuDbhEha8+VIh49IP2cgX34SpLgCOFuJWXQk8G3gVw15JT",
	"iWkOvhdYTPcLdQ29ttcqCVKnT446JEOK7ROqSzc4LtwyJ3wZRoxqaJiD+dEXSjZad17XB3w88QywEMwn",
	"WEL2tmIH3nWcdtYPXxG5LL48sA1ZPTUpOVUJ+wSFnVwXkZOscF1VF9RdEc0KAroM/l+ekT2WqjTWMUgd",
	"um6EzLQg5kuhc0VYgtgbSeNH58JgtCB3QN10n6og3ejfQmEqWS6+p8v1bfqvCf+WrSv0vIQD8BehNd7D",
	"Zm0CYVq629K8+55JoCd0oeW/tBKpMa+pXxlFRLa0pDVRYgR80ZX6Pqo+jTpR+8tcz/981/l2Em1DNZ0N",
	"j39E+Jstwb0/1K5i+9eo/esRxPmabZXGiskLiJi8zRkYkAYvSDQurTRXt+YeC7tcQwIv6IxqIjdVZ2LO",
	"7khQSBVJk8hnLFjppZuGWm9vEoqylNZuBghTWu8Hmh5+iDHA7KrRDGDg9RJV8siiJMW1+TuH5cF39c9W",
	"upICTHctSRf1lgxxkJzAHbgZql3Ui9GMTNr2798YeUHnLH2SLdWUIlPxsgWJDHKJYDGW/rIlsZha5vZl",
	"sXPG0xqbL4Zqnt6kVCnk/hsZlp7/CBhB1lZSMsT0ggj+k62VnyuUn6n1Jc2p8RxIPFA4mda87dVBLr1k",
	"OKg+O/bsls3y+2a/C3rcKF6KxPdBlD3EarUoFxheL+ms6210E3XW1XT/ULKO3VajsGNB9hKlnewJmBTh",
	"6ZMkGte5y6sbssfrrO0/FLZLdZVrsR4grQ4a71QKij+tl2sNgrJVYyvv1pq4noP/O2rqNDJ+Gyn2Yr1b",
	"peoBmxxcL9Coljq3ssJuVSrKMavNkWWpVFMfW2YprFV0malghOpd+MV6xG3jzH5bd/5mPqeg3BBt1nTk",
	"88gySd0d5cGJ7pQZxp/GGmgrtzVnn6lGbWx4IomQkMl8/tdR73LUDTUUmOqn8eVmIjK5cW4KEkkkUBJr",
	"jmy0ljVtlsgqiR5/tZRNzHHSoaRVt+du7eBPTY9Px04KOfC/S4eOglsSt+Zm3zNe3902aEivu3UwfQpw",
	"k6Wn3TX0Iy2EG9nVH8FU2FJoyVHOIMQSvnWmn0vV6/3KAPX3TERxMC+iKsv6nBGKXdUZqoi6OT1/SYSR",
	"PgQikMFtHTVsH4H/YoPvn5OB/O7j3DP7auGFmDr7W69MLSvqd6OVUzZRfTawhmX6EnSAV9r3HDL21Wa2",
	"uRSc9PNUtf+xEfEbBZ8XmrUWA1dcDQmDjmrOWjHpsJi6/dMXBTeTLerCn1TXoi1FrfO2jwaDkPk4XDIh",
	"j/Z29nYGOCaOMPSY6/qs647iaKDzLfrltG4zwJds5TWv0GbUJ8pXiHBMX8yWdHYuJVQ6tqDNl86+mRW2",
	"mlCnc5id85k04Wof7epwdkk929XiUusgA1e//Emv9tZRa65uJk7t4cvD/w8AAP//Ad7Z27+8AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
