// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get app config
	// (GET /config)
	GetConfig(ctx echo.Context) error
	// Get foods
	// (GET /data/recipe_dependencies)
	RecipeDependencies(ctx echo.Context) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// load mappings
	// (POST /meta/load_ingredient_mappings)
	LoadIngredientMappings(ctx echo.Context) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Get recipes
	// (GET /recipes/bulk)
	GetRecipesByIds(ctx echo.Context, params GetRecipesByIdsParams) error
	// scrape a recipe by URL
	// (POST /recipes/scrape)
	ScrapeRecipe(ctx echo.Context) error
	// sum up recipes
	// (POST /recipes/sum)
	SumRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// recipe as latex
	// (GET /recipes/{recipe_id}/latex)
	GetLatexByRecipeId(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
	// perform sync
	// (GET /sync)
	DoSync(ctx echo.Context, params DoSyncParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// RecipeDependencies converts echo context to params.
func (w *ServerInterfaceWrapper) RecipeDependencies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RecipeDependencies(ctx)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "fdc_id", runtime.ParamLocationPath, ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ingredient_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "ingredient_id", ctx.QueryParams(), &params.IngredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// LoadIngredientMappings converts echo context to params.
func (w *ServerInterfaceWrapper) LoadIngredientMappings(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LoadIngredientMappings(ctx)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipesByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipesByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecipesByIdsParams
	// ------------- Required query parameter "recipe_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "recipe_id", ctx.QueryParams(), &params.RecipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipesByIds(ctx, params)
	return err
}

// ScrapeRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ScrapeRecipe(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ScrapeRecipe(ctx)
	return err
}

// SumRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) SumRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SumRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// GetLatexByRecipeId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLatexByRecipeId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLatexByRecipeId(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// DoSync converts echo context to params.
func (w *ServerInterfaceWrapper) DoSync(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DoSyncParams
	// ------------- Required query parameter "lookback_days" -------------

	err = runtime.BindQueryParameter("form", true, true, "lookback_days", ctx.QueryParams(), &params.LookbackDays)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lookback_days: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DoSync(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/albums", wrapper.ListAllAlbums)
	router.POST(baseURL+"/auth", wrapper.AuthLogin)
	router.GET(baseURL+"/config", wrapper.GetConfig)
	router.GET(baseURL+"/data/recipe_dependencies", wrapper.RecipeDependencies)
	router.GET(baseURL+"/foods/bulk", wrapper.GetFoodsByIds)
	router.GET(baseURL+"/foods/search", wrapper.SearchFoods)
	router.GET(baseURL+"/foods/:fdc_id", wrapper.GetFoodById)
	router.GET(baseURL+"/ingredients", wrapper.ListIngredients)
	router.POST(baseURL+"/ingredients", wrapper.CreateIngredients)
	router.GET(baseURL+"/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST(baseURL+"/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST(baseURL+"/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST(baseURL+"/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET(baseURL+"/meals", wrapper.ListMeals)
	router.GET(baseURL+"/meals/:meal_id", wrapper.GetMealById)
	router.PATCH(baseURL+"/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.POST(baseURL+"/meta/load_ingredient_mappings", wrapper.LoadIngredientMappings)
	router.GET(baseURL+"/photos", wrapper.ListPhotos)
	router.GET(baseURL+"/recipes", wrapper.ListRecipes)
	router.POST(baseURL+"/recipes", wrapper.CreateRecipes)
	router.GET(baseURL+"/recipes/bulk", wrapper.GetRecipesByIds)
	router.POST(baseURL+"/recipes/scrape", wrapper.ScrapeRecipe)
	router.POST(baseURL+"/recipes/sum", wrapper.SumRecipes)
	router.GET(baseURL+"/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET(baseURL+"/recipes/:recipe_id/latex", wrapper.GetLatexByRecipeId)
	router.GET(baseURL+"/search", wrapper.Search)
	router.GET(baseURL+"/sync", wrapper.DoSync)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"1mzdTJza47fH/wkAAP//24yi3SG0AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
