// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get app config
	// (GET /config)
	GetConfig(ctx echo.Context) error
	// Get foods
	// (GET /data/recipe_dependencies)
	RecipeDependencies(ctx echo.Context) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// load mappings
	// (POST /meta/load_ingredient_mappings)
	LoadIngredientMappings(ctx echo.Context) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Get recipes
	// (GET /recipes/bulk)
	GetRecipesByIds(ctx echo.Context, params GetRecipesByIdsParams) error
	// scrape a recipe by URL
	// (POST /recipes/scrape)
	ScrapeRecipe(ctx echo.Context) error
	// sum up recipes
	// (POST /recipes/sum)
	SumRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// recipe as latex
	// (GET /recipes/{recipe_id}/latex)
	GetLatexByRecipeId(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
	// perform sync
	// (GET /sync)
	DoSync(ctx echo.Context, params DoSyncParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// RecipeDependencies converts echo context to params.
func (w *ServerInterfaceWrapper) RecipeDependencies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RecipeDependencies(ctx)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", false, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameterWithOptions("simple", "fdc_id", ctx.Param("fdc_id"), &fdcId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ingredient_id" -------------

	err = runtime.BindQueryParameter("form", false, false, "ingredient_id", ctx.QueryParams(), &params.IngredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithOptions("simple", "ingredient_id", ctx.Param("ingredient_id"), &ingredientId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithOptions("simple", "ingredient_id", ctx.Param("ingredient_id"), &ingredientId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithOptions("simple", "ingredient_id", ctx.Param("ingredient_id"), &ingredientId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithOptions("simple", "ingredient_id", ctx.Param("ingredient_id"), &ingredientId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithOptions("simple", "meal_id", ctx.Param("meal_id"), &mealId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithOptions("simple", "meal_id", ctx.Param("meal_id"), &mealId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// LoadIngredientMappings converts echo context to params.
func (w *ServerInterfaceWrapper) LoadIngredientMappings(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LoadIngredientMappings(ctx)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipesByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipesByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecipesByIdsParams
	// ------------- Required query parameter "recipe_id" -------------

	err = runtime.BindQueryParameter("form", false, true, "recipe_id", ctx.QueryParams(), &params.RecipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRecipesByIds(ctx, params)
	return err
}

// ScrapeRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ScrapeRecipe(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScrapeRecipe(ctx)
	return err
}

// SumRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) SumRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SumRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithOptions("simple", "recipe_id", ctx.Param("recipe_id"), &recipeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// GetLatexByRecipeId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLatexByRecipeId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithOptions("simple", "recipe_id", ctx.Param("recipe_id"), &recipeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLatexByRecipeId(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// DoSync converts echo context to params.
func (w *ServerInterfaceWrapper) DoSync(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DoSyncParams
	// ------------- Required query parameter "lookback_days" -------------

	err = runtime.BindQueryParameter("form", true, true, "lookback_days", ctx.QueryParams(), &params.LookbackDays)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lookback_days: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DoSync(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/albums", wrapper.ListAllAlbums)
	router.POST(baseURL+"/auth", wrapper.AuthLogin)
	router.GET(baseURL+"/config", wrapper.GetConfig)
	router.GET(baseURL+"/data/recipe_dependencies", wrapper.RecipeDependencies)
	router.GET(baseURL+"/foods/bulk", wrapper.GetFoodsByIds)
	router.GET(baseURL+"/foods/search", wrapper.SearchFoods)
	router.GET(baseURL+"/foods/:fdc_id", wrapper.GetFoodById)
	router.GET(baseURL+"/ingredients", wrapper.ListIngredients)
	router.POST(baseURL+"/ingredients", wrapper.CreateIngredients)
	router.GET(baseURL+"/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST(baseURL+"/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST(baseURL+"/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST(baseURL+"/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET(baseURL+"/meals", wrapper.ListMeals)
	router.GET(baseURL+"/meals/:meal_id", wrapper.GetMealById)
	router.PATCH(baseURL+"/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.POST(baseURL+"/meta/load_ingredient_mappings", wrapper.LoadIngredientMappings)
	router.GET(baseURL+"/photos", wrapper.ListPhotos)
	router.GET(baseURL+"/recipes", wrapper.ListRecipes)
	router.POST(baseURL+"/recipes", wrapper.CreateRecipes)
	router.GET(baseURL+"/recipes/bulk", wrapper.GetRecipesByIds)
	router.POST(baseURL+"/recipes/scrape", wrapper.ScrapeRecipe)
	router.POST(baseURL+"/recipes/sum", wrapper.SumRecipes)
	router.GET(baseURL+"/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET(baseURL+"/recipes/:recipe_id/latex", wrapper.GetLatexByRecipeId)
	router.GET(baseURL+"/search", wrapper.Search)
	router.GET(baseURL+"/sync", wrapper.DoSync)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
