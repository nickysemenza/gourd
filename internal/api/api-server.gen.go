// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get app config
	// (GET /config)
	GetConfig(ctx echo.Context) error
	// Get foods
	// (GET /data/recipe_dependencies)
	RecipeDependencies(ctx echo.Context) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// load mappings
	// (POST /meta/load_ingredient_mappings)
	LoadIngredientMappings(ctx echo.Context) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Get recipes
	// (GET /recipes/bulk)
	GetRecipesByIds(ctx echo.Context, params GetRecipesByIdsParams) error
	// scrape a recipe by URL
	// (POST /recipes/scrape)
	ScrapeRecipe(ctx echo.Context) error
	// sum up recipes
	// (POST /recipes/sum)
	SumRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// recipe as latex
	// (GET /recipes/{recipe_id}/latex)
	GetLatexByRecipeId(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
	// perform sync
	// (GET /sync)
	DoSync(ctx echo.Context, params DoSyncParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// RecipeDependencies converts echo context to params.
func (w *ServerInterfaceWrapper) RecipeDependencies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RecipeDependencies(ctx)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", false, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "fdc_id", runtime.ParamLocationPath, ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ingredient_id" -------------

	err = runtime.BindQueryParameter("form", false, false, "ingredient_id", ctx.QueryParams(), &params.IngredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// LoadIngredientMappings converts echo context to params.
func (w *ServerInterfaceWrapper) LoadIngredientMappings(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LoadIngredientMappings(ctx)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipesByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipesByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecipesByIdsParams
	// ------------- Required query parameter "recipe_id" -------------

	err = runtime.BindQueryParameter("form", false, true, "recipe_id", ctx.QueryParams(), &params.RecipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipesByIds(ctx, params)
	return err
}

// ScrapeRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ScrapeRecipe(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ScrapeRecipe(ctx)
	return err
}

// SumRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) SumRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SumRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// GetLatexByRecipeId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLatexByRecipeId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLatexByRecipeId(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// DoSync converts echo context to params.
func (w *ServerInterfaceWrapper) DoSync(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DoSyncParams
	// ------------- Required query parameter "lookback_days" -------------

	err = runtime.BindQueryParameter("form", true, true, "lookback_days", ctx.QueryParams(), &params.LookbackDays)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lookback_days: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DoSync(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/albums", wrapper.ListAllAlbums)
	router.POST(baseURL+"/auth", wrapper.AuthLogin)
	router.GET(baseURL+"/config", wrapper.GetConfig)
	router.GET(baseURL+"/data/recipe_dependencies", wrapper.RecipeDependencies)
	router.GET(baseURL+"/foods/bulk", wrapper.GetFoodsByIds)
	router.GET(baseURL+"/foods/search", wrapper.SearchFoods)
	router.GET(baseURL+"/foods/:fdc_id", wrapper.GetFoodById)
	router.GET(baseURL+"/ingredients", wrapper.ListIngredients)
	router.POST(baseURL+"/ingredients", wrapper.CreateIngredients)
	router.GET(baseURL+"/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST(baseURL+"/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST(baseURL+"/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST(baseURL+"/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET(baseURL+"/meals", wrapper.ListMeals)
	router.GET(baseURL+"/meals/:meal_id", wrapper.GetMealById)
	router.PATCH(baseURL+"/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.POST(baseURL+"/meta/load_ingredient_mappings", wrapper.LoadIngredientMappings)
	router.GET(baseURL+"/photos", wrapper.ListPhotos)
	router.GET(baseURL+"/recipes", wrapper.ListRecipes)
	router.POST(baseURL+"/recipes", wrapper.CreateRecipes)
	router.GET(baseURL+"/recipes/bulk", wrapper.GetRecipesByIds)
	router.POST(baseURL+"/recipes/scrape", wrapper.ScrapeRecipe)
	router.POST(baseURL+"/recipes/sum", wrapper.SumRecipes)
	router.GET(baseURL+"/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET(baseURL+"/recipes/:recipe_id/latex", wrapper.GetLatexByRecipeId)
	router.GET(baseURL+"/search", wrapper.Search)
	router.GET(baseURL+"/sync", wrapper.DoSync)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
