// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get app config
	// (GET /config)
	GetConfig(ctx echo.Context) error
	// Get foods
	// (GET /data/recipe_dependencies)
	RecipeDependencies(ctx echo.Context) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// load mappings
	// (POST /meta/load_ingredient_mappings)
	LoadIngredientMappings(ctx echo.Context) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Get recipes
	// (GET /recipes/bulk)
	GetRecipesByIds(ctx echo.Context, params GetRecipesByIdsParams) error
	// scrape a recipe by URL
	// (POST /recipes/scrape)
	ScrapeRecipe(ctx echo.Context) error
	// sum up recipes
	// (POST /recipes/sum)
	SumRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// recipe as latex
	// (GET /recipes/{recipe_id}/latex)
	GetLatexByRecipeId(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
	// perform sync
	// (GET /sync)
	DoSync(ctx echo.Context, params DoSyncParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// RecipeDependencies converts echo context to params.
func (w *ServerInterfaceWrapper) RecipeDependencies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RecipeDependencies(ctx)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", false, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameterWithOptions("simple", "fdc_id", ctx.Param("fdc_id"), &fdcId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ingredient_id" -------------

	err = runtime.BindQueryParameter("form", false, false, "ingredient_id", ctx.QueryParams(), &params.IngredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithOptions("simple", "ingredient_id", ctx.Param("ingredient_id"), &ingredientId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithOptions("simple", "ingredient_id", ctx.Param("ingredient_id"), &ingredientId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithOptions("simple", "ingredient_id", ctx.Param("ingredient_id"), &ingredientId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithOptions("simple", "ingredient_id", ctx.Param("ingredient_id"), &ingredientId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithOptions("simple", "meal_id", ctx.Param("meal_id"), &mealId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithOptions("simple", "meal_id", ctx.Param("meal_id"), &mealId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// LoadIngredientMappings converts echo context to params.
func (w *ServerInterfaceWrapper) LoadIngredientMappings(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LoadIngredientMappings(ctx)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipesByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipesByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecipesByIdsParams
	// ------------- Required query parameter "recipe_id" -------------

	err = runtime.BindQueryParameter("form", false, true, "recipe_id", ctx.QueryParams(), &params.RecipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRecipesByIds(ctx, params)
	return err
}

// ScrapeRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ScrapeRecipe(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScrapeRecipe(ctx)
	return err
}

// SumRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) SumRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SumRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithOptions("simple", "recipe_id", ctx.Param("recipe_id"), &recipeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// GetLatexByRecipeId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLatexByRecipeId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithOptions("simple", "recipe_id", ctx.Param("recipe_id"), &recipeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLatexByRecipeId(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// DoSync converts echo context to params.
func (w *ServerInterfaceWrapper) DoSync(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DoSyncParams
	// ------------- Required query parameter "lookback_days" -------------

	err = runtime.BindQueryParameter("form", true, true, "lookback_days", ctx.QueryParams(), &params.LookbackDays)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lookback_days: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DoSync(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/albums", wrapper.ListAllAlbums)
	router.POST(baseURL+"/auth", wrapper.AuthLogin)
	router.GET(baseURL+"/config", wrapper.GetConfig)
	router.GET(baseURL+"/data/recipe_dependencies", wrapper.RecipeDependencies)
	router.GET(baseURL+"/foods/bulk", wrapper.GetFoodsByIds)
	router.GET(baseURL+"/foods/search", wrapper.SearchFoods)
	router.GET(baseURL+"/foods/:fdc_id", wrapper.GetFoodById)
	router.GET(baseURL+"/ingredients", wrapper.ListIngredients)
	router.POST(baseURL+"/ingredients", wrapper.CreateIngredients)
	router.GET(baseURL+"/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST(baseURL+"/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST(baseURL+"/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST(baseURL+"/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET(baseURL+"/meals", wrapper.ListMeals)
	router.GET(baseURL+"/meals/:meal_id", wrapper.GetMealById)
	router.PATCH(baseURL+"/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.POST(baseURL+"/meta/load_ingredient_mappings", wrapper.LoadIngredientMappings)
	router.GET(baseURL+"/photos", wrapper.ListPhotos)
	router.GET(baseURL+"/recipes", wrapper.ListRecipes)
	router.POST(baseURL+"/recipes", wrapper.CreateRecipes)
	router.GET(baseURL+"/recipes/bulk", wrapper.GetRecipesByIds)
	router.POST(baseURL+"/recipes/scrape", wrapper.ScrapeRecipe)
	router.POST(baseURL+"/recipes/sum", wrapper.SumRecipes)
	router.GET(baseURL+"/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET(baseURL+"/recipes/:recipe_id/latex", wrapper.GetLatexByRecipeId)
	router.GET(baseURL+"/search", wrapper.Search)
	router.GET(baseURL+"/sync", wrapper.DoSync)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
