// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get app config
	// (GET /config)
	GetConfig(ctx echo.Context) error
	// Get foods
	// (GET /data/recipe_dependencies)
	RecipeDependencies(ctx echo.Context) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// load mappings
	// (POST /meta/load_ingredient_mappings)
	LoadIngredientMappings(ctx echo.Context) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Get recipes
	// (GET /recipes/bulk)
	GetRecipesByIds(ctx echo.Context, params GetRecipesByIdsParams) error
	// scrape a recipe by URL
	// (POST /recipes/scrape)
	ScrapeRecipe(ctx echo.Context) error
	// sum up recipes
	// (POST /recipes/sum)
	SumRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// recipe as latex
	// (GET /recipes/{recipe_id}/latex)
	GetLatexByRecipeId(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
	// perform sync
	// (GET /sync)
	DoSync(ctx echo.Context, params DoSyncParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// RecipeDependencies converts echo context to params.
func (w *ServerInterfaceWrapper) RecipeDependencies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RecipeDependencies(ctx)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "data_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "data_types", ctx.QueryParams(), &params.DataTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data_types: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "fdc_id", runtime.ParamLocationPath, ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ingredient_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "ingredient_id", ctx.QueryParams(), &params.IngredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// LoadIngredientMappings converts echo context to params.
func (w *ServerInterfaceWrapper) LoadIngredientMappings(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LoadIngredientMappings(ctx)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipesByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipesByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecipesByIdsParams
	// ------------- Required query parameter "recipe_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "recipe_id", ctx.QueryParams(), &params.RecipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipesByIds(ctx, params)
	return err
}

// ScrapeRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ScrapeRecipe(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ScrapeRecipe(ctx)
	return err
}

// SumRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) SumRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SumRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// GetLatexByRecipeId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLatexByRecipeId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLatexByRecipeId(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// DoSync converts echo context to params.
func (w *ServerInterfaceWrapper) DoSync(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DoSyncParams
	// ------------- Required query parameter "lookback_days" -------------

	err = runtime.BindQueryParameter("form", true, true, "lookback_days", ctx.QueryParams(), &params.LookbackDays)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lookback_days: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DoSync(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/albums", wrapper.ListAllAlbums)
	router.POST(baseURL+"/auth", wrapper.AuthLogin)
	router.GET(baseURL+"/config", wrapper.GetConfig)
	router.GET(baseURL+"/data/recipe_dependencies", wrapper.RecipeDependencies)
	router.GET(baseURL+"/foods/bulk", wrapper.GetFoodsByIds)
	router.GET(baseURL+"/foods/search", wrapper.SearchFoods)
	router.GET(baseURL+"/foods/:fdc_id", wrapper.GetFoodById)
	router.GET(baseURL+"/ingredients", wrapper.ListIngredients)
	router.POST(baseURL+"/ingredients", wrapper.CreateIngredients)
	router.GET(baseURL+"/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST(baseURL+"/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST(baseURL+"/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST(baseURL+"/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET(baseURL+"/meals", wrapper.ListMeals)
	router.GET(baseURL+"/meals/:meal_id", wrapper.GetMealById)
	router.PATCH(baseURL+"/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.POST(baseURL+"/meta/load_ingredient_mappings", wrapper.LoadIngredientMappings)
	router.GET(baseURL+"/photos", wrapper.ListPhotos)
	router.GET(baseURL+"/recipes", wrapper.ListRecipes)
	router.POST(baseURL+"/recipes", wrapper.CreateRecipes)
	router.GET(baseURL+"/recipes/bulk", wrapper.GetRecipesByIds)
	router.POST(baseURL+"/recipes/scrape", wrapper.ScrapeRecipe)
	router.POST(baseURL+"/recipes/sum", wrapper.SumRecipes)
	router.GET(baseURL+"/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET(baseURL+"/recipes/:recipe_id/latex", wrapper.GetLatexByRecipeId)
	router.GET(baseURL+"/search", wrapper.Search)
	router.GET(baseURL+"/sync", wrapper.DoSync)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"T+Y9pU8n2KXvOU67VVmP7tlsl3/9LuRxr3kpyyQhsv02rKFFQcxpv6VTp5VNM3XqYlF/KFvHoTVo7DiS",
	"naK1U1Xx9Az3VSUNr4PDaxqzP9Y5bX8obrfKhvVyPUXmOmhfpzwp/mVfuWoStL0aB71u1cJ1DP0PZLAO",
	"Kn4XI3ayr1ut3Mp9D1wn6FTzj1tVKYKuFAXKan9Mmbdq+qPKnISNiitzf7eu/wm/WW9rbITZ7/ucv1/P",
	"aSoPxJkNbfmQWTblbaI9eGMGVY7xp/EGuloDw4ktutMYH54scyRVuVz+udWnbHUrDQ2l+vnj+/1CZNNu",
	"YAmSZS5RWRiNbG8ttWy2xKrMH3+0tF3MRTmhkO20vwbgJn9qeXw6ddLIEPwuH3Q03cpitDb7Vun66b5B",
	"K3rTvYO+mvs+T8+4Y+g5PYR71dUfwVU40mgJJGeWYUXuJ8vPez3q550l6vcsREW6bLKqKuS2oAwby6pz",
	"62kz6vrN21MSDF/oViLL2z5pODz2/mTD7o+pQBr1eL7HGPfKv9qogNznf4vb0rJjyTRZecNv9Jg9qmHt",
	"/5hPinfm7Tnj/M7ltEEXHN881/2fNxp+r+FzovlqBRFaqyFp2dHNVmumGzaTtr/carrZPFGIf0ofi654",
	"msnYvpjNMp7gbM2luvjpx59+nOGCAmHohTB/eaIeKC9mJtfivJ3QbSe4rSDv+UMilfTJ9hEigeWbeZLg",
	"4FYqJYCCcV+CYysvbDeVzmQvg+vZBOHuGPPUAQ7xL9v9f/4SHhfu9O5oE7UGDbNxag+3D/8fAAD//wZS",
	"7uvJhQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
