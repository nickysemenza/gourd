// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	ListAllAlbums(ctx echo.Context) error
	// Google Login callback
	// (POST /auth)
	AuthLogin(ctx echo.Context, params AuthLoginParams) error
	// Get app config
	// (GET /config)
	GetConfig(ctx echo.Context) error
	// Get foods
	// (GET /data/recipe_dependencies)
	RecipeDependencies(ctx echo.Context) error
	// Get foods
	// (GET /foods/bulk)
	GetFoodsByIds(ctx echo.Context, params GetFoodsByIdsParams) error
	// Search foods
	// (GET /foods/search)
	SearchFoods(ctx echo.Context, params SearchFoodsParams) error
	// get a FDC entry by id
	// (GET /foods/{fdc_id})
	GetFoodById(ctx echo.Context, fdcId int) error
	// List all ingredients
	// (GET /ingredients)
	ListIngredients(ctx echo.Context, params ListIngredientsParams) error
	// Create a ingredient
	// (POST /ingredients)
	CreateIngredients(ctx echo.Context) error
	// Get a specific ingredient
	// (GET /ingredients/{ingredient_id})
	GetIngredientById(ctx echo.Context, ingredientId string) error
	// Assosiates a food with a given ingredient
	// (POST /ingredients/{ingredient_id}/associate_food)
	AssociateFoodWithIngredient(ctx echo.Context, ingredientId string, params AssociateFoodWithIngredientParams) error
	// Converts an ingredient to a recipe, updating all recipes depending on it
	// (POST /ingredients/{ingredient_id}/convert_to_recipe)
	ConvertIngredientToRecipe(ctx echo.Context, ingredientId string) error
	// Merges the provide ingredients in the body into the param
	// (POST /ingredients/{ingredient_id}/merge)
	MergeIngredients(ctx echo.Context, ingredientId string) error
	// List all meals
	// (GET /meals)
	ListMeals(ctx echo.Context, params ListMealsParams) error
	// Info for a specific meal
	// (GET /meals/{meal_id})
	GetMealById(ctx echo.Context, mealId string) error
	// Update the recipes associated with a given meal
	// (PATCH /meals/{meal_id}/recipes)
	UpdateRecipesForMeal(ctx echo.Context, mealId string) error
	// load mappings
	// (POST /meta/load_ingredient_mappings)
	LoadIngredientMappings(ctx echo.Context) error
	// List all photos
	// (GET /photos)
	ListPhotos(ctx echo.Context, params ListPhotosParams) error
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx echo.Context, params ListRecipesParams) error
	// Create a recipe
	// (POST /recipes)
	CreateRecipes(ctx echo.Context) error
	// Get recipes
	// (GET /recipes/bulk)
	GetRecipesByIds(ctx echo.Context, params GetRecipesByIdsParams) error
	// scrape a recipe by URL
	// (POST /recipes/scrape)
	ScrapeRecipe(ctx echo.Context) error
	// sum up recipes
	// (POST /recipes/sum)
	SumRecipes(ctx echo.Context) error
	// Info for a specific recipe
	// (GET /recipes/{recipe_id})
	GetRecipeById(ctx echo.Context, recipeId string) error
	// recipe as latex
	// (GET /recipes/{recipe_id}/latex)
	GetLatexByRecipeId(ctx echo.Context, recipeId string) error
	// Search recipes and ingredients
	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
	// perform sync
	// (GET /sync)
	DoSync(ctx echo.Context, params DoSyncParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllAlbums(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListAllAlbums(ctx)
	return err
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthLoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthLogin(ctx, params)
	return err
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// RecipeDependencies converts echo context to params.
func (w *ServerInterfaceWrapper) RecipeDependencies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RecipeDependencies(ctx)
	return err
}

// GetFoodsByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodsByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFoodsByIdsParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", false, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFoodsByIds(ctx, params)
	return err
}

// SearchFoods converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFoods(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFoodsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchFoods(ctx, params)
	return err
}

// GetFoodById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFoodById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fdc_id" -------------
	var fdcId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "fdc_id", runtime.ParamLocationPath, ctx.Param("fdc_id"), &fdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFoodById(ctx, fdcId)
	return err
}

// ListIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) ListIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngredientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ingredient_id" -------------

	err = runtime.BindQueryParameter("form", false, false, "ingredient_id", ctx.QueryParams(), &params.IngredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListIngredients(ctx, params)
	return err
}

// CreateIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIngredients(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateIngredients(ctx)
	return err
}

// GetIngredientById converts echo context to params.
func (w *ServerInterfaceWrapper) GetIngredientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIngredientById(ctx, ingredientId)
	return err
}

// AssociateFoodWithIngredient converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateFoodWithIngredient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssociateFoodWithIngredientParams
	// ------------- Required query parameter "fdc_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "fdc_id", ctx.QueryParams(), &params.FdcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fdc_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssociateFoodWithIngredient(ctx, ingredientId, params)
	return err
}

// ConvertIngredientToRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertIngredientToRecipe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ConvertIngredientToRecipe(ctx, ingredientId)
	return err
}

// MergeIngredients converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIngredients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ingredient_id" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredient_id", runtime.ParamLocationPath, ctx.Param("ingredient_id"), &ingredientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ingredient_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MergeIngredients(ctx, ingredientId)
	return err
}

// ListMeals converts echo context to params.
func (w *ServerInterfaceWrapper) ListMeals(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMealsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListMeals(ctx, params)
	return err
}

// GetMealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetMealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMealById(ctx, mealId)
	return err
}

// UpdateRecipesForMeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRecipesForMeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "meal_id" -------------
	var mealId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "meal_id", runtime.ParamLocationPath, ctx.Param("meal_id"), &mealId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meal_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateRecipesForMeal(ctx, mealId)
	return err
}

// LoadIngredientMappings converts echo context to params.
func (w *ServerInterfaceWrapper) LoadIngredientMappings(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LoadIngredientMappings(ctx)
	return err
}

// ListPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPhotos(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPhotosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListPhotos(ctx, params)
	return err
}

// ListRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecipesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListRecipes(ctx, params)
	return err
}

// CreateRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateRecipes(ctx)
	return err
}

// GetRecipesByIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipesByIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecipesByIdsParams
	// ------------- Required query parameter "recipe_id" -------------

	err = runtime.BindQueryParameter("form", false, true, "recipe_id", ctx.QueryParams(), &params.RecipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRecipesByIds(ctx, params)
	return err
}

// ScrapeRecipe converts echo context to params.
func (w *ServerInterfaceWrapper) ScrapeRecipe(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScrapeRecipe(ctx)
	return err
}

// SumRecipes converts echo context to params.
func (w *ServerInterfaceWrapper) SumRecipes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SumRecipes(ctx)
	return err
}

// GetRecipeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecipeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRecipeById(ctx, recipeId)
	return err
}

// GetLatexByRecipeId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLatexByRecipeId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "recipe_id" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipe_id", runtime.ParamLocationPath, ctx.Param("recipe_id"), &recipeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipe_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLatexByRecipeId(ctx, recipeId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// DoSync converts echo context to params.
func (w *ServerInterfaceWrapper) DoSync(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DoSyncParams
	// ------------- Required query parameter "lookback_days" -------------

	err = runtime.BindQueryParameter("form", true, true, "lookback_days", ctx.QueryParams(), &params.LookbackDays)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lookback_days: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DoSync(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/albums", wrapper.ListAllAlbums)
	router.POST(baseURL+"/auth", wrapper.AuthLogin)
	router.GET(baseURL+"/config", wrapper.GetConfig)
	router.GET(baseURL+"/data/recipe_dependencies", wrapper.RecipeDependencies)
	router.GET(baseURL+"/foods/bulk", wrapper.GetFoodsByIds)
	router.GET(baseURL+"/foods/search", wrapper.SearchFoods)
	router.GET(baseURL+"/foods/:fdc_id", wrapper.GetFoodById)
	router.GET(baseURL+"/ingredients", wrapper.ListIngredients)
	router.POST(baseURL+"/ingredients", wrapper.CreateIngredients)
	router.GET(baseURL+"/ingredients/:ingredient_id", wrapper.GetIngredientById)
	router.POST(baseURL+"/ingredients/:ingredient_id/associate_food", wrapper.AssociateFoodWithIngredient)
	router.POST(baseURL+"/ingredients/:ingredient_id/convert_to_recipe", wrapper.ConvertIngredientToRecipe)
	router.POST(baseURL+"/ingredients/:ingredient_id/merge", wrapper.MergeIngredients)
	router.GET(baseURL+"/meals", wrapper.ListMeals)
	router.GET(baseURL+"/meals/:meal_id", wrapper.GetMealById)
	router.PATCH(baseURL+"/meals/:meal_id/recipes", wrapper.UpdateRecipesForMeal)
	router.POST(baseURL+"/meta/load_ingredient_mappings", wrapper.LoadIngredientMappings)
	router.GET(baseURL+"/photos", wrapper.ListPhotos)
	router.GET(baseURL+"/recipes", wrapper.ListRecipes)
	router.POST(baseURL+"/recipes", wrapper.CreateRecipes)
	router.GET(baseURL+"/recipes/bulk", wrapper.GetRecipesByIds)
	router.POST(baseURL+"/recipes/scrape", wrapper.ScrapeRecipe)
	router.POST(baseURL+"/recipes/sum", wrapper.SumRecipes)
	router.GET(baseURL+"/recipes/:recipe_id", wrapper.GetRecipeById)
	router.GET(baseURL+"/recipes/:recipe_id/latex", wrapper.GetLatexByRecipeId)
	router.GET(baseURL+"/search", wrapper.Search)
	router.GET(baseURL+"/sync", wrapper.DoSync)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
