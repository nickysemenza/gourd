// Code generated by SQLBoiler 4.10.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package usdamodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UsdaWweiaFoodCategory is an object representing the database table.
type UsdaWweiaFoodCategory struct {
	WweiaFoodCategoryCode        int         `boil:"wweia_food_category_code" json:"wweia_food_category_code" toml:"wweia_food_category_code" yaml:"wweia_food_category_code"`
	WweiaFoodCategoryDescription null.String `boil:"wweia_food_category_description" json:"wweia_food_category_description,omitempty" toml:"wweia_food_category_description" yaml:"wweia_food_category_description,omitempty"`

	R *usdaWweiaFoodCategoryR `boil:"rel" json:"rel" toml:"rel" yaml:"rel"`
	L usdaWweiaFoodCategoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UsdaWweiaFoodCategoryColumns = struct {
	WweiaFoodCategoryCode        string
	WweiaFoodCategoryDescription string
}{
	WweiaFoodCategoryCode:        "wweia_food_category_code",
	WweiaFoodCategoryDescription: "wweia_food_category_description",
}

var UsdaWweiaFoodCategoryTableColumns = struct {
	WweiaFoodCategoryCode        string
	WweiaFoodCategoryDescription string
}{
	WweiaFoodCategoryCode:        "usda_wweia_food_category.wweia_food_category_code",
	WweiaFoodCategoryDescription: "usda_wweia_food_category.wweia_food_category_description",
}

// Generated where

var UsdaWweiaFoodCategoryWhere = struct {
	WweiaFoodCategoryCode        whereHelperint
	WweiaFoodCategoryDescription whereHelpernull_String
}{
	WweiaFoodCategoryCode:        whereHelperint{field: "\"usda_wweia_food_category\".\"wweia_food_category_code\""},
	WweiaFoodCategoryDescription: whereHelpernull_String{field: "\"usda_wweia_food_category\".\"wweia_food_category_description\""},
}

// UsdaWweiaFoodCategoryRels is where relationship names are stored.
var UsdaWweiaFoodCategoryRels = struct {
	WweiaCategoryCodeUsdaSurveyFNDDSFoods string
}{
	WweiaCategoryCodeUsdaSurveyFNDDSFoods: "WweiaCategoryCodeUsdaSurveyFNDDSFoods",
}

// usdaWweiaFoodCategoryR is where relationships are stored.
type usdaWweiaFoodCategoryR struct {
	WweiaCategoryCodeUsdaSurveyFNDDSFoods UsdaSurveyFNDDSFoodSlice `boil:"WweiaCategoryCodeUsdaSurveyFNDDSFoods" json:"WweiaCategoryCodeUsdaSurveyFNDDSFoods" toml:"WweiaCategoryCodeUsdaSurveyFNDDSFoods" yaml:"WweiaCategoryCodeUsdaSurveyFNDDSFoods"`
}

// NewStruct creates a new relationship struct
func (*usdaWweiaFoodCategoryR) NewStruct() *usdaWweiaFoodCategoryR {
	return &usdaWweiaFoodCategoryR{}
}

// usdaWweiaFoodCategoryL is where Load methods for each relationship are stored.
type usdaWweiaFoodCategoryL struct{}

var (
	usdaWweiaFoodCategoryAllColumns            = []string{"wweia_food_category_code", "wweia_food_category_description"}
	usdaWweiaFoodCategoryColumnsWithoutDefault = []string{"wweia_food_category_code"}
	usdaWweiaFoodCategoryColumnsWithDefault    = []string{"wweia_food_category_description"}
	usdaWweiaFoodCategoryPrimaryKeyColumns     = []string{"wweia_food_category_code"}
	usdaWweiaFoodCategoryGeneratedColumns      = []string{}
)

type (
	// UsdaWweiaFoodCategorySlice is an alias for a slice of pointers to UsdaWweiaFoodCategory.
	// This should almost always be used instead of []UsdaWweiaFoodCategory.
	UsdaWweiaFoodCategorySlice []*UsdaWweiaFoodCategory
	// UsdaWweiaFoodCategoryHook is the signature for custom UsdaWweiaFoodCategory hook methods
	UsdaWweiaFoodCategoryHook func(context.Context, boil.ContextExecutor, *UsdaWweiaFoodCategory) error

	usdaWweiaFoodCategoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usdaWweiaFoodCategoryType                 = reflect.TypeOf(&UsdaWweiaFoodCategory{})
	usdaWweiaFoodCategoryMapping              = queries.MakeStructMapping(usdaWweiaFoodCategoryType)
	usdaWweiaFoodCategoryPrimaryKeyMapping, _ = queries.BindMapping(usdaWweiaFoodCategoryType, usdaWweiaFoodCategoryMapping, usdaWweiaFoodCategoryPrimaryKeyColumns)
	usdaWweiaFoodCategoryInsertCacheMut       sync.RWMutex
	usdaWweiaFoodCategoryInsertCache          = make(map[string]insertCache)
	usdaWweiaFoodCategoryUpdateCacheMut       sync.RWMutex
	usdaWweiaFoodCategoryUpdateCache          = make(map[string]updateCache)
	usdaWweiaFoodCategoryUpsertCacheMut       sync.RWMutex
	usdaWweiaFoodCategoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var usdaWweiaFoodCategoryAfterSelectHooks []UsdaWweiaFoodCategoryHook

var usdaWweiaFoodCategoryBeforeInsertHooks []UsdaWweiaFoodCategoryHook
var usdaWweiaFoodCategoryAfterInsertHooks []UsdaWweiaFoodCategoryHook

var usdaWweiaFoodCategoryBeforeUpdateHooks []UsdaWweiaFoodCategoryHook
var usdaWweiaFoodCategoryAfterUpdateHooks []UsdaWweiaFoodCategoryHook

var usdaWweiaFoodCategoryBeforeDeleteHooks []UsdaWweiaFoodCategoryHook
var usdaWweiaFoodCategoryAfterDeleteHooks []UsdaWweiaFoodCategoryHook

var usdaWweiaFoodCategoryBeforeUpsertHooks []UsdaWweiaFoodCategoryHook
var usdaWweiaFoodCategoryAfterUpsertHooks []UsdaWweiaFoodCategoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UsdaWweiaFoodCategory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaWweiaFoodCategoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UsdaWweiaFoodCategory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaWweiaFoodCategoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UsdaWweiaFoodCategory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaWweiaFoodCategoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UsdaWweiaFoodCategory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaWweiaFoodCategoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UsdaWweiaFoodCategory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaWweiaFoodCategoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UsdaWweiaFoodCategory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaWweiaFoodCategoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UsdaWweiaFoodCategory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaWweiaFoodCategoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UsdaWweiaFoodCategory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaWweiaFoodCategoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UsdaWweiaFoodCategory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaWweiaFoodCategoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUsdaWweiaFoodCategoryHook registers your hook function for all future operations.
func AddUsdaWweiaFoodCategoryHook(hookPoint boil.HookPoint, usdaWweiaFoodCategoryHook UsdaWweiaFoodCategoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		usdaWweiaFoodCategoryAfterSelectHooks = append(usdaWweiaFoodCategoryAfterSelectHooks, usdaWweiaFoodCategoryHook)
	case boil.BeforeInsertHook:
		usdaWweiaFoodCategoryBeforeInsertHooks = append(usdaWweiaFoodCategoryBeforeInsertHooks, usdaWweiaFoodCategoryHook)
	case boil.AfterInsertHook:
		usdaWweiaFoodCategoryAfterInsertHooks = append(usdaWweiaFoodCategoryAfterInsertHooks, usdaWweiaFoodCategoryHook)
	case boil.BeforeUpdateHook:
		usdaWweiaFoodCategoryBeforeUpdateHooks = append(usdaWweiaFoodCategoryBeforeUpdateHooks, usdaWweiaFoodCategoryHook)
	case boil.AfterUpdateHook:
		usdaWweiaFoodCategoryAfterUpdateHooks = append(usdaWweiaFoodCategoryAfterUpdateHooks, usdaWweiaFoodCategoryHook)
	case boil.BeforeDeleteHook:
		usdaWweiaFoodCategoryBeforeDeleteHooks = append(usdaWweiaFoodCategoryBeforeDeleteHooks, usdaWweiaFoodCategoryHook)
	case boil.AfterDeleteHook:
		usdaWweiaFoodCategoryAfterDeleteHooks = append(usdaWweiaFoodCategoryAfterDeleteHooks, usdaWweiaFoodCategoryHook)
	case boil.BeforeUpsertHook:
		usdaWweiaFoodCategoryBeforeUpsertHooks = append(usdaWweiaFoodCategoryBeforeUpsertHooks, usdaWweiaFoodCategoryHook)
	case boil.AfterUpsertHook:
		usdaWweiaFoodCategoryAfterUpsertHooks = append(usdaWweiaFoodCategoryAfterUpsertHooks, usdaWweiaFoodCategoryHook)
	}
}

// One returns a single usdaWweiaFoodCategory record from the query.
func (q usdaWweiaFoodCategoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UsdaWweiaFoodCategory, error) {
	o := &UsdaWweiaFoodCategory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "usdamodels: failed to execute a one query for usda_wweia_food_category")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UsdaWweiaFoodCategory records from the query.
func (q usdaWweiaFoodCategoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (UsdaWweiaFoodCategorySlice, error) {
	var o []*UsdaWweiaFoodCategory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "usdamodels: failed to assign all query results to UsdaWweiaFoodCategory slice")
	}

	if len(usdaWweiaFoodCategoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UsdaWweiaFoodCategory records in the query.
func (q usdaWweiaFoodCategoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: failed to count usda_wweia_food_category rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q usdaWweiaFoodCategoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "usdamodels: failed to check if usda_wweia_food_category exists")
	}

	return count > 0, nil
}

// WweiaCategoryCodeUsdaSurveyFNDDSFoods retrieves all the usda_survey_fndds_food's UsdaSurveyFNDDSFoods with an executor via wweia_category_code column.
func (o *UsdaWweiaFoodCategory) WweiaCategoryCodeUsdaSurveyFNDDSFoods(mods ...qm.QueryMod) usdaSurveyFNDDSFoodQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"usda_survey_fndds_food\".\"wweia_category_code\"=?", o.WweiaFoodCategoryCode),
	)

	return UsdaSurveyFNDDSFoods(queryMods...)
}

// LoadWweiaCategoryCodeUsdaSurveyFNDDSFoods allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (usdaWweiaFoodCategoryL) LoadWweiaCategoryCodeUsdaSurveyFNDDSFoods(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsdaWweiaFoodCategory interface{}, mods queries.Applicator) error {
	var slice []*UsdaWweiaFoodCategory
	var object *UsdaWweiaFoodCategory

	if singular {
		object = maybeUsdaWweiaFoodCategory.(*UsdaWweiaFoodCategory)
	} else {
		slice = *maybeUsdaWweiaFoodCategory.(*[]*UsdaWweiaFoodCategory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &usdaWweiaFoodCategoryR{}
		}
		args = append(args, object.WweiaFoodCategoryCode)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usdaWweiaFoodCategoryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.WweiaFoodCategoryCode) {
					continue Outer
				}
			}

			args = append(args, obj.WweiaFoodCategoryCode)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`usda_survey_fndds_food`),
		qm.WhereIn(`usda_survey_fndds_food.wweia_category_code in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load usda_survey_fndds_food")
	}

	var resultSlice []*UsdaSurveyFNDDSFood
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice usda_survey_fndds_food")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on usda_survey_fndds_food")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usda_survey_fndds_food")
	}

	if len(usdaSurveyFNDDSFoodAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.WweiaCategoryCodeUsdaSurveyFNDDSFoods = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &usdaSurveyFNDDSFoodR{}
			}
			foreign.R.WweiaCategoryCodeUsdaWweiaFoodCategory = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.WweiaFoodCategoryCode, foreign.WweiaCategoryCode) {
				local.R.WweiaCategoryCodeUsdaSurveyFNDDSFoods = append(local.R.WweiaCategoryCodeUsdaSurveyFNDDSFoods, foreign)
				if foreign.R == nil {
					foreign.R = &usdaSurveyFNDDSFoodR{}
				}
				foreign.R.WweiaCategoryCodeUsdaWweiaFoodCategory = local
				break
			}
		}
	}

	return nil
}

// AddWweiaCategoryCodeUsdaSurveyFNDDSFoods adds the given related objects to the existing relationships
// of the usda_wweia_food_category, optionally inserting them as new records.
// Appends related to o.R.WweiaCategoryCodeUsdaSurveyFNDDSFoods.
// Sets related.R.WweiaCategoryCodeUsdaWweiaFoodCategory appropriately.
func (o *UsdaWweiaFoodCategory) AddWweiaCategoryCodeUsdaSurveyFNDDSFoods(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UsdaSurveyFNDDSFood) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.WweiaCategoryCode, o.WweiaFoodCategoryCode)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"usda_survey_fndds_food\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"wweia_category_code"}),
				strmangle.WhereClause("\"", "\"", 2, usdaSurveyFNDDSFoodPrimaryKeyColumns),
			)
			values := []interface{}{o.WweiaFoodCategoryCode, rel.FDCID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.WweiaCategoryCode, o.WweiaFoodCategoryCode)
		}
	}

	if o.R == nil {
		o.R = &usdaWweiaFoodCategoryR{
			WweiaCategoryCodeUsdaSurveyFNDDSFoods: related,
		}
	} else {
		o.R.WweiaCategoryCodeUsdaSurveyFNDDSFoods = append(o.R.WweiaCategoryCodeUsdaSurveyFNDDSFoods, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &usdaSurveyFNDDSFoodR{
				WweiaCategoryCodeUsdaWweiaFoodCategory: o,
			}
		} else {
			rel.R.WweiaCategoryCodeUsdaWweiaFoodCategory = o
		}
	}
	return nil
}

// SetWweiaCategoryCodeUsdaSurveyFNDDSFoods removes all previously related items of the
// usda_wweia_food_category replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.WweiaCategoryCodeUsdaWweiaFoodCategory's WweiaCategoryCodeUsdaSurveyFNDDSFoods accordingly.
// Replaces o.R.WweiaCategoryCodeUsdaSurveyFNDDSFoods with related.
// Sets related.R.WweiaCategoryCodeUsdaWweiaFoodCategory's WweiaCategoryCodeUsdaSurveyFNDDSFoods accordingly.
func (o *UsdaWweiaFoodCategory) SetWweiaCategoryCodeUsdaSurveyFNDDSFoods(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UsdaSurveyFNDDSFood) error {
	query := "update \"usda_survey_fndds_food\" set \"wweia_category_code\" = null where \"wweia_category_code\" = $1"
	values := []interface{}{o.WweiaFoodCategoryCode}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.WweiaCategoryCodeUsdaSurveyFNDDSFoods {
			queries.SetScanner(&rel.WweiaCategoryCode, nil)
			if rel.R == nil {
				continue
			}

			rel.R.WweiaCategoryCodeUsdaWweiaFoodCategory = nil
		}
		o.R.WweiaCategoryCodeUsdaSurveyFNDDSFoods = nil
	}

	return o.AddWweiaCategoryCodeUsdaSurveyFNDDSFoods(ctx, exec, insert, related...)
}

// RemoveWweiaCategoryCodeUsdaSurveyFNDDSFoods relationships from objects passed in.
// Removes related items from R.WweiaCategoryCodeUsdaSurveyFNDDSFoods (uses pointer comparison, removal does not keep order)
// Sets related.R.WweiaCategoryCodeUsdaWweiaFoodCategory.
func (o *UsdaWweiaFoodCategory) RemoveWweiaCategoryCodeUsdaSurveyFNDDSFoods(ctx context.Context, exec boil.ContextExecutor, related ...*UsdaSurveyFNDDSFood) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.WweiaCategoryCode, nil)
		if rel.R != nil {
			rel.R.WweiaCategoryCodeUsdaWweiaFoodCategory = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("wweia_category_code")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.WweiaCategoryCodeUsdaSurveyFNDDSFoods {
			if rel != ri {
				continue
			}

			ln := len(o.R.WweiaCategoryCodeUsdaSurveyFNDDSFoods)
			if ln > 1 && i < ln-1 {
				o.R.WweiaCategoryCodeUsdaSurveyFNDDSFoods[i] = o.R.WweiaCategoryCodeUsdaSurveyFNDDSFoods[ln-1]
			}
			o.R.WweiaCategoryCodeUsdaSurveyFNDDSFoods = o.R.WweiaCategoryCodeUsdaSurveyFNDDSFoods[:ln-1]
			break
		}
	}

	return nil
}

// UsdaWweiaFoodCategories retrieves all the records using an executor.
func UsdaWweiaFoodCategories(mods ...qm.QueryMod) usdaWweiaFoodCategoryQuery {
	mods = append(mods, qm.From("\"usda_wweia_food_category\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"usda_wweia_food_category\".*"})
	}

	return usdaWweiaFoodCategoryQuery{q}
}

// FindUsdaWweiaFoodCategory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUsdaWweiaFoodCategory(ctx context.Context, exec boil.ContextExecutor, wweiaFoodCategoryCode int, selectCols ...string) (*UsdaWweiaFoodCategory, error) {
	usdaWweiaFoodCategoryObj := &UsdaWweiaFoodCategory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"usda_wweia_food_category\" where \"wweia_food_category_code\"=$1", sel,
	)

	q := queries.Raw(query, wweiaFoodCategoryCode)

	err := q.Bind(ctx, exec, usdaWweiaFoodCategoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "usdamodels: unable to select from usda_wweia_food_category")
	}

	if err = usdaWweiaFoodCategoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return usdaWweiaFoodCategoryObj, err
	}

	return usdaWweiaFoodCategoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UsdaWweiaFoodCategory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("usdamodels: no usda_wweia_food_category provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaWweiaFoodCategoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	usdaWweiaFoodCategoryInsertCacheMut.RLock()
	cache, cached := usdaWweiaFoodCategoryInsertCache[key]
	usdaWweiaFoodCategoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			usdaWweiaFoodCategoryAllColumns,
			usdaWweiaFoodCategoryColumnsWithDefault,
			usdaWweiaFoodCategoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(usdaWweiaFoodCategoryType, usdaWweiaFoodCategoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(usdaWweiaFoodCategoryType, usdaWweiaFoodCategoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"usda_wweia_food_category\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"usda_wweia_food_category\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "usdamodels: unable to insert into usda_wweia_food_category")
	}

	if !cached {
		usdaWweiaFoodCategoryInsertCacheMut.Lock()
		usdaWweiaFoodCategoryInsertCache[key] = cache
		usdaWweiaFoodCategoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UsdaWweiaFoodCategory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UsdaWweiaFoodCategory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	usdaWweiaFoodCategoryUpdateCacheMut.RLock()
	cache, cached := usdaWweiaFoodCategoryUpdateCache[key]
	usdaWweiaFoodCategoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			usdaWweiaFoodCategoryAllColumns,
			usdaWweiaFoodCategoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("usdamodels: unable to update usda_wweia_food_category, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"usda_wweia_food_category\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, usdaWweiaFoodCategoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(usdaWweiaFoodCategoryType, usdaWweiaFoodCategoryMapping, append(wl, usdaWweiaFoodCategoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to update usda_wweia_food_category row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: failed to get rows affected by update for usda_wweia_food_category")
	}

	if !cached {
		usdaWweiaFoodCategoryUpdateCacheMut.Lock()
		usdaWweiaFoodCategoryUpdateCache[key] = cache
		usdaWweiaFoodCategoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q usdaWweiaFoodCategoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to update all for usda_wweia_food_category")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to retrieve rows affected for usda_wweia_food_category")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UsdaWweiaFoodCategorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("usdamodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaWweiaFoodCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"usda_wweia_food_category\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, usdaWweiaFoodCategoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to update all in usdaWweiaFoodCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to retrieve rows affected all in update all usdaWweiaFoodCategory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UsdaWweiaFoodCategory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("usdamodels: no usda_wweia_food_category provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaWweiaFoodCategoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	usdaWweiaFoodCategoryUpsertCacheMut.RLock()
	cache, cached := usdaWweiaFoodCategoryUpsertCache[key]
	usdaWweiaFoodCategoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			usdaWweiaFoodCategoryAllColumns,
			usdaWweiaFoodCategoryColumnsWithDefault,
			usdaWweiaFoodCategoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			usdaWweiaFoodCategoryAllColumns,
			usdaWweiaFoodCategoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("usdamodels: unable to upsert usda_wweia_food_category, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(usdaWweiaFoodCategoryPrimaryKeyColumns))
			copy(conflict, usdaWweiaFoodCategoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"usda_wweia_food_category\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(usdaWweiaFoodCategoryType, usdaWweiaFoodCategoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(usdaWweiaFoodCategoryType, usdaWweiaFoodCategoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "usdamodels: unable to upsert usda_wweia_food_category")
	}

	if !cached {
		usdaWweiaFoodCategoryUpsertCacheMut.Lock()
		usdaWweiaFoodCategoryUpsertCache[key] = cache
		usdaWweiaFoodCategoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UsdaWweiaFoodCategory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UsdaWweiaFoodCategory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("usdamodels: no UsdaWweiaFoodCategory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), usdaWweiaFoodCategoryPrimaryKeyMapping)
	sql := "DELETE FROM \"usda_wweia_food_category\" WHERE \"wweia_food_category_code\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to delete from usda_wweia_food_category")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: failed to get rows affected by delete for usda_wweia_food_category")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q usdaWweiaFoodCategoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("usdamodels: no usdaWweiaFoodCategoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to delete all from usda_wweia_food_category")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: failed to get rows affected by deleteall for usda_wweia_food_category")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UsdaWweiaFoodCategorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(usdaWweiaFoodCategoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaWweiaFoodCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"usda_wweia_food_category\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaWweiaFoodCategoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: unable to delete all from usdaWweiaFoodCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "usdamodels: failed to get rows affected by deleteall for usda_wweia_food_category")
	}

	if len(usdaWweiaFoodCategoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UsdaWweiaFoodCategory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUsdaWweiaFoodCategory(ctx, exec, o.WweiaFoodCategoryCode)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsdaWweiaFoodCategorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UsdaWweiaFoodCategorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaWweiaFoodCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"usda_wweia_food_category\".* FROM \"usda_wweia_food_category\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaWweiaFoodCategoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "usdamodels: unable to reload all in UsdaWweiaFoodCategorySlice")
	}

	*o = slice

	return nil
}

// UsdaWweiaFoodCategoryExists checks if the UsdaWweiaFoodCategory row exists.
func UsdaWweiaFoodCategoryExists(ctx context.Context, exec boil.ContextExecutor, wweiaFoodCategoryCode int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"usda_wweia_food_category\" where \"wweia_food_category_code\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, wweiaFoodCategoryCode)
	}
	row := exec.QueryRowContext(ctx, sql, wweiaFoodCategoryCode)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "usdamodels: unable to check if usda_wweia_food_category exists")
	}

	return exists, nil
}
