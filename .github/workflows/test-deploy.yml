name: test
on: push
jobs:
  build-and-push-images:
    env:
      # Use docker.io for Docker Hub if empty
      REGISTRY: ghcr.io
      # github.repository as <account>/<repo>
      IMAGE_NAME: ${{ github.repository }}-${{ matrix.name }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - file: "rust/Dockerfile"
            name: "api-rust"
            context: .
          - file: "Dockerfile"
            name: "api-go"
            context: .
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get specific changed files
        id: changed_files
        uses: tj-actions/changed-files@v35
        with:
          files: ${{ matrix.file }}
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=sha,format=long

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.file }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max          
  golangci:
    name: golang lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: stable
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3.4.0
        with:
          version: latest
  test-e2e:
    needs: [build-and-push-images]
    name: cy + integration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "stable"
      - name: Extract branch name
        shell: bash
        run: echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >>$GITHUB_OUTPUT
        id: extract_branch
      - run: go mod vendor
      - run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      - run: DOCKER_TAG=${{steps.extract_branch.outputs.branch}} docker-compose -f docker-compose-deps.yml -f docker-compose-gourd.yml pull
      # - run: make wasm-dev
      - run: |
          docker create --name=temp ghcr.io/nickysemenza/gourd-api-go:${{steps.extract_branch.outputs.branch}}
          docker cp temp:/wasm-pkg ui/src/wasm
      - name: start postgres db
        run: DOCKER_TAG=${{steps.extract_branch.outputs.branch}} docker-compose -f docker-compose-deps.yml -f docker-compose-gourd.yml up -d db
      - name: migrate db
        run: sleep 5 && make migrate
      - name: start rust + go servers
        run: DOCKER_TAG=${{steps.extract_branch.outputs.branch}} docker-compose -f docker-compose-deps.yml -f docker-compose-gourd.yml up -d rs gourd
      - name: smoke test rust server
        run: |
          curl -v http://localhost:8080/parse?text=1%20cup
          curl -v http://localhost:8080/debug/scrape?url=https://thewoksoflife.com/ma-po-tofu-real-deal/
      - name: go integration tests
        run: make integration-test-go
        env:
          MIGRATIONS_DIR: file://../../internal/db/migrations
          PDFLATEX_BINARY: /usr/bin/pdflatex
      - uses: codecov/codecov-action@v3
      # - name: seed db with testdata
      #   env:
      #     DATABASE_URL: postgres://gourd:gourd@localhost:5555/food
      #   run: make seed-testdata
      - name: Cypress run
        uses: cypress-io/github-action@v4
        with:
          working-directory: ui/
          start: yarn run build:tailwind, yarn run start:integration
          wait-on: "http://localhost:3001"
          config: baseUrl=http://localhost:3001
          record: true
        env:
          CYPRESS_RECORD_KEY: 265312e3-7b8c-4031-ad0a-5f825b95cfce
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: codecov/codecov-action@v3
      - name: Archive cypress results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cypress-results
          path: ui/cypress/
          if-no-files-found: error
      - name: Dump docker logs on failure
        if: failure()
        uses: jwalton/gh-docker-logs@v2
  test-rust:
    name: rust test
    runs-on: ubuntu-latest
    env:
      CARGO_TERM_COLOR: always
    steps:
      - uses: actions/checkout@v3
      - name: cargo build
        run: cargo build --verbose
        working-directory: rust
      - name: cargo test
        run: cargo test --verbose
        working-directory: rust
      # - name: Run cargo-tarpaulin
      #   uses: actions-rs/tarpaulin@v0.1
      #   with:
      #     args: -t 120 --manifest-path rust/Cargo.toml --output-dir rust/.cov --avoid-cfg-tarpaulin --out Xml -- --test-threads 1
      #     version: "latest"

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3.1.0
        with:
          directory: rust/.cov
          # path_to_write_report: rust/.cov/codecov_report.txt
      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report-
          path: rust/.cov
  deploy:
    needs: ["test-e2e", "test-rust", "golangci"]
    if: github.ref == 'refs/heads/main'
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - run: curl -L https://fly.io/install.sh | sh
      - run: /home/runner/.fly/bin/flyctl deploy deploy/ --image ghcr.io/nickysemenza/gourd-api-go:main
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      - run: /home/runner/.fly/bin/flyctl deploy rust/ --image ghcr.io/nickysemenza/gourd-api-rust:main
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
