name: test
on: push
jobs:
  golangci:
    name: golang lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: "1.19"
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3.4.0
        with:
          version: latest
  test-e2e:
    name: cy + integration
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: ["1.19"]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go }}
      # - run: sudo apt-get update
      # - run: sudo apt-get install -y texlive-latex-base texlive-fonts-recommended texlive-fonts-extra texlive-latex-extra
      - run: go mod vendor
      - run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      - run: make wasm-dev
      - run: docker-compose pull
      - run: docker-compose build --parallel
      - name: start postgres db
        run: docker-compose up -d db usda_db
      - name: migrate db
        run: sleep 5 && make migrate
      - name: start rust + go servers
        run: docker-compose up -d rs gourd
      - name: smoke test rust server
        run: |
          curl -v http://localhost:8080/parse?text=1%20cup
          curl -v http://localhost:8080/debug/scrape?url=https://thewoksoflife.com/ma-po-tofu-real-deal/
      - name: go integration tests
        run: make integration-test-go
        env:
          MIGRATIONS_DIR: file://../../internal/db/migrations
          PDFLATEX_BINARY: /usr/bin/pdflatex
      - uses: codecov/codecov-action@v3
      - name: seed db with testdata
        env:
          DATABASE_URL: postgres://gourd:gourd@localhost:5555/food
          DATABASE_URL_USDA: postgres://gourd:gourd@localhost:5556/usda
        run: make seed-testdata
      - name: Cypress run
        uses: cypress-io/github-action@v4
        with:
          working-directory: ui/
          start: yarn run build:tailwind, yarn run start:integration
          wait-on: "http://localhost:3001"
          config: baseUrl=http://localhost:3001
          record: true
        env:
          CYPRESS_RECORD_KEY: 265312e3-7b8c-4031-ad0a-5f825b95cfce
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: codecov/codecov-action@v3
      - name: Archive cypress results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cypress-results
          path: ui/cypress/
          if-no-files-found: error
      - name: Dump docker logs on failure
        if: failure()
        uses: jwalton/gh-docker-logs@v2
  test-rust:
    name: rust test
    runs-on: ubuntu-latest
    env:
      CARGO_TERM_COLOR: always
    steps:
      - uses: actions/checkout@v3
      - name: cargo build
        run: cargo build --verbose
        working-directory: rust
      - name: cargo test
        run: cargo test --verbose
        working-directory: rust
      # - name: Run cargo-tarpaulin
      #   uses: actions-rs/tarpaulin@v0.1
      #   with:
      #     args: -t 120 --manifest-path rust/Cargo.toml --output-dir rust/.cov --avoid-cfg-tarpaulin --out Xml -- --test-threads 1
      #     version: "latest"

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3.1.0
        with:
          directory: rust/.cov
          # path_to_write_report: rust/.cov/codecov_report.txt
      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report-
          path: rust/.cov
  deploy:
    needs: ["test-e2e", "test-rust", "golangci"]
    if: github.ref == 'refs/heads/main'
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - run: curl -L https://fly.io/install.sh | sh
      - run: /home/runner/.fly/bin/flyctl deploy deploy/
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      - run: /home/runner/.fly/bin/flyctl deploy rust/
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
