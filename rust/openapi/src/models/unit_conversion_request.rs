/*
 * Gourd Recipe Database
 *
 * API for https://github.com/nickysemenza/gourd
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n@nickysemenza.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct UnitConversionRequest {
    #[serde(rename = "target", skip_serializing_if = "Option::is_none")]
    pub target: Option<Target>,
    /// multiple amounts to try
    #[serde(rename = "input")]
    pub input: Vec<crate::models::Amount>,
    /// mappings of equivalent units
    #[serde(rename = "unit_mappings")]
    pub unit_mappings: Vec<crate::models::UnitMapping>,
}

impl UnitConversionRequest {
    pub fn new(input: Vec<crate::models::Amount>, unit_mappings: Vec<crate::models::UnitMapping>) -> UnitConversionRequest {
        UnitConversionRequest {
            target: None,
            input,
            unit_mappings,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Target {
    #[serde(rename = "weight")]
    Weight,
    #[serde(rename = "volume")]
    Volume,
    #[serde(rename = "money")]
    Money,
    #[serde(rename = "calories")]
    Calories,
    #[serde(rename = "other")]
    Other,
}

impl Default for Target {
    fn default() -> Target {
        Self::Weight
    }
}

