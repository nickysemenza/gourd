/*
 * Gourd Recipe Database
 *
 * API for https://github.com/nickysemenza/gourd
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n@nickysemenza.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct BrandedFoodItem {
    #[serde(rename = "fdcId")]
    pub fdc_id: i32,
    #[serde(rename = "availableDate", skip_serializing_if = "Option::is_none")]
    pub available_date: Option<String>,
    #[serde(rename = "brandOwner", skip_serializing_if = "Option::is_none")]
    pub brand_owner: Option<String>,
    #[serde(rename = "dataSource", skip_serializing_if = "Option::is_none")]
    pub data_source: Option<String>,
    #[serde(rename = "dataType")]
    pub data_type: String,
    #[serde(rename = "description")]
    pub description: String,
    #[serde(rename = "foodClass", skip_serializing_if = "Option::is_none")]
    pub food_class: Option<String>,
    #[serde(rename = "gtinUpc", skip_serializing_if = "Option::is_none")]
    pub gtin_upc: Option<String>,
    #[serde(rename = "householdServingFullText", skip_serializing_if = "Option::is_none")]
    pub household_serving_full_text: Option<String>,
    #[serde(rename = "ingredients", skip_serializing_if = "Option::is_none")]
    pub ingredients: Option<String>,
    #[serde(rename = "modifiedDate", skip_serializing_if = "Option::is_none")]
    pub modified_date: Option<String>,
    #[serde(rename = "publicationDate", skip_serializing_if = "Option::is_none")]
    pub publication_date: Option<String>,
    #[serde(rename = "servingSize", skip_serializing_if = "Option::is_none")]
    pub serving_size: Option<f64>,
    #[serde(rename = "servingSizeUnit", skip_serializing_if = "Option::is_none")]
    pub serving_size_unit: Option<String>,
    #[serde(rename = "preparationStateCode", skip_serializing_if = "Option::is_none")]
    pub preparation_state_code: Option<String>,
    #[serde(rename = "brandedFoodCategory", skip_serializing_if = "Option::is_none")]
    pub branded_food_category: Option<String>,
    #[serde(rename = "tradeChannel", skip_serializing_if = "Option::is_none")]
    pub trade_channel: Option<Vec<String>>,
    #[serde(rename = "gpcClassCode", skip_serializing_if = "Option::is_none")]
    pub gpc_class_code: Option<i32>,
    #[serde(rename = "foodNutrients", skip_serializing_if = "Option::is_none")]
    pub food_nutrients: Option<Vec<crate::models::FoodNutrient>>,
    #[serde(rename = "foodUpdateLog", skip_serializing_if = "Option::is_none")]
    pub food_update_log: Option<Vec<crate::models::FoodUpdateLog>>,
    #[serde(rename = "labelNutrients", skip_serializing_if = "Option::is_none")]
    pub label_nutrients: Option<Box<crate::models::BrandedFoodItemLabelNutrients>>,
}

impl BrandedFoodItem {
    pub fn new(fdc_id: i32, data_type: String, description: String) -> BrandedFoodItem {
        BrandedFoodItem {
            fdc_id,
            available_date: None,
            brand_owner: None,
            data_source: None,
            data_type,
            description,
            food_class: None,
            gtin_upc: None,
            household_serving_full_text: None,
            ingredients: None,
            modified_date: None,
            publication_date: None,
            serving_size: None,
            serving_size_unit: None,
            preparation_state_code: None,
            branded_food_category: None,
            trade_channel: None,
            gpc_class_code: None,
            food_nutrients: None,
            food_update_log: None,
            label_nutrients: None,
        }
    }
}


