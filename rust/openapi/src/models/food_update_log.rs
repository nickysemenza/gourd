/*
 * Gourd Recipe Database
 *
 * API for https://github.com/nickysemenza/gourd
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n@nickysemenza.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct FoodUpdateLog {
    #[serde(rename = "fdcId", skip_serializing_if = "Option::is_none")]
    pub fdc_id: Option<i32>,
    #[serde(rename = "availableDate", skip_serializing_if = "Option::is_none")]
    pub available_date: Option<String>,
    #[serde(rename = "brandOwner", skip_serializing_if = "Option::is_none")]
    pub brand_owner: Option<String>,
    #[serde(rename = "dataSource", skip_serializing_if = "Option::is_none")]
    pub data_source: Option<String>,
    #[serde(rename = "dataType", skip_serializing_if = "Option::is_none")]
    pub data_type: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "foodClass", skip_serializing_if = "Option::is_none")]
    pub food_class: Option<String>,
    #[serde(rename = "gtinUpc", skip_serializing_if = "Option::is_none")]
    pub gtin_upc: Option<String>,
    #[serde(rename = "householdServingFullText", skip_serializing_if = "Option::is_none")]
    pub household_serving_full_text: Option<String>,
    #[serde(rename = "ingredients", skip_serializing_if = "Option::is_none")]
    pub ingredients: Option<String>,
    #[serde(rename = "modifiedDate", skip_serializing_if = "Option::is_none")]
    pub modified_date: Option<String>,
    #[serde(rename = "publicationDate", skip_serializing_if = "Option::is_none")]
    pub publication_date: Option<String>,
    #[serde(rename = "servingSize", skip_serializing_if = "Option::is_none")]
    pub serving_size: Option<f64>,
    #[serde(rename = "servingSizeUnit", skip_serializing_if = "Option::is_none")]
    pub serving_size_unit: Option<String>,
    #[serde(rename = "brandedFoodCategory", skip_serializing_if = "Option::is_none")]
    pub branded_food_category: Option<String>,
    #[serde(rename = "changes", skip_serializing_if = "Option::is_none")]
    pub changes: Option<String>,
    #[serde(rename = "foodAttributes", skip_serializing_if = "Option::is_none")]
    pub food_attributes: Option<Vec<crate::models::FoodAttribute>>,
}

impl FoodUpdateLog {
    pub fn new() -> FoodUpdateLog {
        FoodUpdateLog {
            fdc_id: None,
            available_date: None,
            brand_owner: None,
            data_source: None,
            data_type: None,
            description: None,
            food_class: None,
            gtin_upc: None,
            household_serving_full_text: None,
            ingredients: None,
            modified_date: None,
            publication_date: None,
            serving_size: None,
            serving_size_unit: None,
            branded_food_category: None,
            changes: None,
            food_attributes: None,
        }
    }
}


