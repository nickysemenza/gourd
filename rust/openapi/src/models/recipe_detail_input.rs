/*
 * Gourd Recipe Database
 *
 * API for https://github.com/nickysemenza/gourd
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n@nickysemenza.com
 * Generated by: https://openapi-generator.tech
 */

/// RecipeDetailInput : A revision of a recipe



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct RecipeDetailInput {
    /// sections of the recipe
    #[serde(rename = "sections")]
    pub sections: Vec<crate::models::RecipeSectionInput>,
    /// recipe name
    #[serde(rename = "name")]
    pub name: String,
    /// book or websites
    #[serde(rename = "sources", skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<crate::models::RecipeSource>>,
    /// num servings
    #[serde(rename = "servings", skip_serializing_if = "Option::is_none")]
    pub servings: Option<i32>,
    /// serving quantity
    #[serde(rename = "quantity")]
    pub quantity: i32,
    /// serving unit
    #[serde(rename = "unit")]
    pub unit: String,
    /// when it created / updated
    #[serde(rename = "date", skip_serializing_if = "Option::is_none")]
    pub date: Option<String>,
    /// tags
    #[serde(rename = "tags")]
    pub tags: Vec<String>,
}

impl RecipeDetailInput {
    /// A revision of a recipe
    pub fn new(sections: Vec<crate::models::RecipeSectionInput>, name: String, quantity: i32, unit: String, tags: Vec<String>) -> RecipeDetailInput {
        RecipeDetailInput {
            sections,
            name,
            sources: None,
            servings: None,
            quantity,
            unit,
            date: None,
            tags,
        }
    }
}


