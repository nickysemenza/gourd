/*
 * Gourd Recipe Database
 *
 * API for https://github.com/nickysemenza/gourd
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n@nickysemenza.com
 * Generated by: https://openapi-generator.tech
 */

/// RecipeDetail : A revision of a recipe



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecipeDetail {
    /// id
    #[serde(rename = "id")]
    pub id: String,
    /// sections of the recipe
    #[serde(rename = "sections")]
    pub sections: Vec<crate::models::RecipeSection>,
    /// recipe name
    #[serde(rename = "name")]
    pub name: String,
    /// book or websites
    #[serde(rename = "sources", skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<crate::models::RecipeSource>>,
    /// num servings
    #[serde(rename = "servings", skip_serializing_if = "Option::is_none")]
    pub servings: Option<i64>,
    /// serving quantity
    #[serde(rename = "quantity")]
    pub quantity: i64,
    /// serving unit
    #[serde(rename = "unit")]
    pub unit: String,
    /// version of the recipe
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<i64>,
    /// whether or not it is the most recent version
    #[serde(rename = "is_latest_version", skip_serializing_if = "Option::is_none")]
    pub is_latest_version: Option<bool>,
}

impl RecipeDetail {
    /// A revision of a recipe
    pub fn new(id: String, sections: Vec<crate::models::RecipeSection>, name: String, quantity: i64, unit: String) -> RecipeDetail {
        RecipeDetail {
            id,
            sections,
            name,
            sources: None,
            servings: None,
            quantity,
            unit,
            version: None,
            is_latest_version: None,
        }
    }
}


