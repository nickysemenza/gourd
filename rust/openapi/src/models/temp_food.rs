/*
 * Gourd Recipe Database
 *
 * API for https://github.com/nickysemenza/gourd
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n@nickysemenza.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TempFood {
    #[serde(rename = "wrapper")]
    pub wrapper: Box<crate::models::TempFoodWrapper>,
    #[serde(rename = "branded_food", skip_serializing_if = "Option::is_none")]
    pub branded_food: Option<Box<crate::models::BrandedFoodItem>>,
    #[serde(rename = "foundation_food", skip_serializing_if = "Option::is_none")]
    pub foundation_food: Option<Box<crate::models::FoundationFoodItem>>,
    #[serde(rename = "legacy_food", skip_serializing_if = "Option::is_none")]
    pub legacy_food: Option<Box<crate::models::SrLegacyFoodItem>>,
    #[serde(rename = "survey_food", skip_serializing_if = "Option::is_none")]
    pub survey_food: Option<Box<crate::models::SurveyFoodItem>>,
    /// mappings of equivalent units
    #[serde(rename = "unit_mappings")]
    pub unit_mappings: Vec<crate::models::UnitMapping>,
    #[serde(rename = "foodNutrients", skip_serializing_if = "Option::is_none")]
    pub food_nutrients: Option<Vec<crate::models::FoodNutrient>>,
}

impl TempFood {
    pub fn new(wrapper: crate::models::TempFoodWrapper, unit_mappings: Vec<crate::models::UnitMapping>) -> TempFood {
        TempFood {
            wrapper: Box::new(wrapper),
            branded_food: None,
            foundation_food: None,
            legacy_food: None,
            survey_food: None,
            unit_mappings,
            food_nutrients: None,
        }
    }
}


