/*
 * Gourd Recipe Database
 *
 * API for https://github.com/nickysemenza/gourd
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n@nickysemenza.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SchemasFoodPortion {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "amount", skip_serializing_if = "Option::is_none")]
    pub amount: Option<f64>,
    #[serde(rename = "dataPoints", skip_serializing_if = "Option::is_none")]
    pub data_points: Option<i32>,
    #[serde(rename = "gramWeight", skip_serializing_if = "Option::is_none")]
    pub gram_weight: Option<f64>,
    #[serde(rename = "minYearAcquired", skip_serializing_if = "Option::is_none")]
    pub min_year_acquired: Option<i32>,
    #[serde(rename = "modifier", skip_serializing_if = "Option::is_none")]
    pub modifier: Option<String>,
    #[serde(rename = "portionDescription", skip_serializing_if = "Option::is_none")]
    pub portion_description: Option<String>,
    #[serde(rename = "sequenceNumber", skip_serializing_if = "Option::is_none")]
    pub sequence_number: Option<i32>,
    #[serde(rename = "measureUnit", skip_serializing_if = "Option::is_none")]
    pub measure_unit: Option<Box<crate::models::MeasureUnit>>,
}

impl SchemasFoodPortion {
    pub fn new() -> SchemasFoodPortion {
        SchemasFoodPortion {
            id: None,
            amount: None,
            data_points: None,
            gram_weight: None,
            min_year_acquired: None,
            modifier: None,
            portion_description: None,
            sequence_number: None,
            measure_unit: None,
        }
    }
}


