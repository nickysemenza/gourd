/* tslint:disable */
/* eslint-disable */
/**
 * Gourd Recipe Database
 * API for https://github.com/nickysemenza/gourd
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n@nickysemenza.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Amount,
    AmountFromJSON,
    AmountFromJSONTyped,
    AmountToJSON,
    EntitySummary,
    EntitySummaryFromJSON,
    EntitySummaryFromJSONTyped,
    EntitySummaryToJSON,
} from './';

/**
 * 
 * @export
 * @interface IngredientUsage
 */
export interface IngredientUsage {
    /**
     * multiplier
     * @type {number}
     * @memberof IngredientUsage
     */
    multiplier: number;
    /**
     * multiple amounts to try
     * @type {Array<Amount>}
     * @memberof IngredientUsage
     */
    amounts: Array<Amount>;
    /**
     * mappings of equivalent units
     * @type {Array<EntitySummary>}
     * @memberof IngredientUsage
     */
    required_by: Array<EntitySummary>;
}

export function IngredientUsageFromJSON(json: any): IngredientUsage {
    return IngredientUsageFromJSONTyped(json, false);
}

export function IngredientUsageFromJSONTyped(json: any, ignoreDiscriminator: boolean): IngredientUsage {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'multiplier': json['multiplier'],
        'amounts': ((json['amounts'] as Array<any>).map(AmountFromJSON)),
        'required_by': ((json['required_by'] as Array<any>).map(EntitySummaryFromJSON)),
    };
}

export function IngredientUsageToJSON(value?: IngredientUsage | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'multiplier': value.multiplier,
        'amounts': ((value.amounts as Array<any>).map(AmountToJSON)),
        'required_by': ((value.required_by as Array<any>).map(EntitySummaryToJSON)),
    };
}


