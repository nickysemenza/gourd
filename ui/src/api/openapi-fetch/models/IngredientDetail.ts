/* tslint:disable */
/* eslint-disable */
/**
 * Gourd Recipe Database
 * API for https://github.com/nickysemenza/gourd
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n@nickysemenza.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Ingredient } from './Ingredient';
import {
    IngredientFromJSON,
    IngredientFromJSONTyped,
    IngredientToJSON,
} from './Ingredient';
import type { RecipeDetail } from './RecipeDetail';
import {
    RecipeDetailFromJSON,
    RecipeDetailFromJSONTyped,
    RecipeDetailToJSON,
} from './RecipeDetail';
import type { TempFood } from './TempFood';
import {
    TempFoodFromJSON,
    TempFoodFromJSONTyped,
    TempFoodToJSON,
} from './TempFood';
import type { UnitMapping } from './UnitMapping';
import {
    UnitMappingFromJSON,
    UnitMappingFromJSONTyped,
    UnitMappingToJSON,
} from './UnitMapping';

/**
 * An Ingredient
 * @export
 * @interface IngredientDetail
 */
export interface IngredientDetail {
    /**
     * 
     * @type {Ingredient}
     * @memberof IngredientDetail
     */
    ingredient: Ingredient;
    /**
     * Recipes referencing this ingredient
     * @type {Array<RecipeDetail>}
     * @memberof IngredientDetail
     */
    recipes: Array<RecipeDetail>;
    /**
     * Ingredients that are equivalent
     * @type {Array<IngredientDetail>}
     * @memberof IngredientDetail
     */
    children?: Array<IngredientDetail>;
    /**
     * 
     * @type {TempFood}
     * @memberof IngredientDetail
     */
    food?: TempFood;
    /**
     * mappings of equivalent units
     * @type {Array<UnitMapping>}
     * @memberof IngredientDetail
     */
    unit_mappings: Array<UnitMapping>;
}

/**
 * Check if a given object implements the IngredientDetail interface.
 */
export function instanceOfIngredientDetail(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "ingredient" in value;
    isInstance = isInstance && "recipes" in value;
    isInstance = isInstance && "unit_mappings" in value;

    return isInstance;
}

export function IngredientDetailFromJSON(json: any): IngredientDetail {
    return IngredientDetailFromJSONTyped(json, false);
}

export function IngredientDetailFromJSONTyped(json: any, ignoreDiscriminator: boolean): IngredientDetail {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ingredient': IngredientFromJSON(json['ingredient']),
        'recipes': ((json['recipes'] as Array<any>).map(RecipeDetailFromJSON)),
        'children': !exists(json, 'children') ? undefined : ((json['children'] as Array<any>).map(IngredientDetailFromJSON)),
        'food': !exists(json, 'food') ? undefined : TempFoodFromJSON(json['food']),
        'unit_mappings': ((json['unit_mappings'] as Array<any>).map(UnitMappingFromJSON)),
    };
}

export function IngredientDetailToJSON(value?: IngredientDetail | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ingredient': IngredientToJSON(value.ingredient),
        'recipes': ((value.recipes as Array<any>).map(RecipeDetailToJSON)),
        'children': value.children === undefined ? undefined : ((value.children as Array<any>).map(IngredientDetailToJSON)),
        'food': TempFoodToJSON(value.food),
        'unit_mappings': ((value.unit_mappings as Array<any>).map(UnitMappingToJSON)),
    };
}

