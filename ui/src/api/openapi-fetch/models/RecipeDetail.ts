/* tslint:disable */
/* eslint-disable */
/**
 * Gourd Recipe Database
 * API for https://github.com/nickysemenza/gourd
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n@nickysemenza.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RecipeDetailMeta } from './RecipeDetailMeta';
import {
    RecipeDetailMetaFromJSON,
    RecipeDetailMetaFromJSONTyped,
    RecipeDetailMetaToJSON,
} from './RecipeDetailMeta';
import type { RecipeSection } from './RecipeSection';
import {
    RecipeSectionFromJSON,
    RecipeSectionFromJSONTyped,
    RecipeSectionToJSON,
} from './RecipeSection';
import type { RecipeServingInfo } from './RecipeServingInfo';
import {
    RecipeServingInfoFromJSON,
    RecipeServingInfoFromJSONTyped,
    RecipeServingInfoToJSON,
} from './RecipeServingInfo';
import type { RecipeSource } from './RecipeSource';
import {
    RecipeSourceFromJSON,
    RecipeSourceFromJSONTyped,
    RecipeSourceToJSON,
} from './RecipeSource';

/**
 * A revision of a recipe. does not include any "generated" fields. everything directly from db
 * @export
 * @interface RecipeDetail
 */
export interface RecipeDetail {
    /**
     * id
     * @type {string}
     * @memberof RecipeDetail
     */
    id: string;
    /**
     * sections of the recipe
     * @type {Array<RecipeSection>}
     * @memberof RecipeDetail
     */
    sections: Array<RecipeSection>;
    /**
     * recipe name
     * @type {string}
     * @memberof RecipeDetail
     */
    name: string;
    /**
     * book or websites
     * @type {Array<RecipeSource>}
     * @memberof RecipeDetail
     */
    sources: Array<RecipeSource>;
    /**
     * 
     * @type {RecipeServingInfo}
     * @memberof RecipeDetail
     */
    serving_info: RecipeServingInfo;
    /**
     * 
     * @type {RecipeDetailMeta}
     * @memberof RecipeDetail
     */
    meta: RecipeDetailMeta;
    /**
     * when the version was created
     * @type {Date}
     * @memberof RecipeDetail
     */
    created_at: Date;
    /**
     * tags
     * @type {Array<string>}
     * @memberof RecipeDetail
     */
    tags: Array<string>;
}

/**
 * Check if a given object implements the RecipeDetail interface.
 */
export function instanceOfRecipeDetail(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "sections" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "sources" in value;
    isInstance = isInstance && "serving_info" in value;
    isInstance = isInstance && "meta" in value;
    isInstance = isInstance && "created_at" in value;
    isInstance = isInstance && "tags" in value;

    return isInstance;
}

export function RecipeDetailFromJSON(json: any): RecipeDetail {
    return RecipeDetailFromJSONTyped(json, false);
}

export function RecipeDetailFromJSONTyped(json: any, ignoreDiscriminator: boolean): RecipeDetail {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'sections': ((json['sections'] as Array<any>).map(RecipeSectionFromJSON)),
        'name': json['name'],
        'sources': ((json['sources'] as Array<any>).map(RecipeSourceFromJSON)),
        'serving_info': RecipeServingInfoFromJSON(json['serving_info']),
        'meta': RecipeDetailMetaFromJSON(json['meta']),
        'created_at': (new Date(json['created_at'])),
        'tags': json['tags'],
    };
}

export function RecipeDetailToJSON(value?: RecipeDetail | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'sections': ((value.sections as Array<any>).map(RecipeSectionToJSON)),
        'name': value.name,
        'sources': ((value.sources as Array<any>).map(RecipeSourceToJSON)),
        'serving_info': RecipeServingInfoToJSON(value.serving_info),
        'meta': RecipeDetailMetaToJSON(value.meta),
        'created_at': (value.created_at.toISOString()),
        'tags': value.tags,
    };
}

