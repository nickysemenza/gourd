/* tslint:disable */
/* eslint-disable */
/**
 * Gourd Recipe Database
 * API for https://github.com/nickysemenza/gourd
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n@nickysemenza.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FoodNutrient } from './FoodNutrient';
import {
    FoodNutrientFromJSON,
    FoodNutrientFromJSONTyped,
    FoodNutrientToJSON,
} from './FoodNutrient';
import type { NutrientConversionFactors } from './NutrientConversionFactors';
import {
    NutrientConversionFactorsFromJSON,
    NutrientConversionFactorsFromJSONTyped,
    NutrientConversionFactorsToJSON,
} from './NutrientConversionFactors';
import type { SchemasFoodCategory } from './SchemasFoodCategory';
import {
    SchemasFoodCategoryFromJSON,
    SchemasFoodCategoryFromJSONTyped,
    SchemasFoodCategoryToJSON,
} from './SchemasFoodCategory';

/**
 * 
 * @export
 * @interface SRLegacyFoodItem
 */
export interface SRLegacyFoodItem {
    /**
     * 
     * @type {number}
     * @memberof SRLegacyFoodItem
     */
    fdc_id: number;
    /**
     * 
     * @type {string}
     * @memberof SRLegacyFoodItem
     */
    data_type: string;
    /**
     * 
     * @type {string}
     * @memberof SRLegacyFoodItem
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof SRLegacyFoodItem
     */
    food_class?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SRLegacyFoodItem
     */
    is_historical_reference?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SRLegacyFoodItem
     */
    ndb_number?: number;
    /**
     * 
     * @type {string}
     * @memberof SRLegacyFoodItem
     */
    publication_date?: string;
    /**
     * 
     * @type {string}
     * @memberof SRLegacyFoodItem
     */
    scientific_name?: string;
    /**
     * 
     * @type {SchemasFoodCategory}
     * @memberof SRLegacyFoodItem
     */
    food_category?: SchemasFoodCategory;
    /**
     * 
     * @type {Array<FoodNutrient>}
     * @memberof SRLegacyFoodItem
     */
    food_nutrients?: Array<FoodNutrient>;
    /**
     * 
     * @type {Array<NutrientConversionFactors>}
     * @memberof SRLegacyFoodItem
     */
    nutrient_conversion_factors?: Array<NutrientConversionFactors>;
}

/**
 * Check if a given object implements the SRLegacyFoodItem interface.
 */
export function instanceOfSRLegacyFoodItem(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "fdc_id" in value;
    isInstance = isInstance && "data_type" in value;
    isInstance = isInstance && "description" in value;

    return isInstance;
}

export function SRLegacyFoodItemFromJSON(json: any): SRLegacyFoodItem {
    return SRLegacyFoodItemFromJSONTyped(json, false);
}

export function SRLegacyFoodItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): SRLegacyFoodItem {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'fdc_id': json['fdcId'],
        'data_type': json['dataType'],
        'description': json['description'],
        'food_class': !exists(json, 'foodClass') ? undefined : json['foodClass'],
        'is_historical_reference': !exists(json, 'isHistoricalReference') ? undefined : json['isHistoricalReference'],
        'ndb_number': !exists(json, 'ndbNumber') ? undefined : json['ndbNumber'],
        'publication_date': !exists(json, 'publicationDate') ? undefined : json['publicationDate'],
        'scientific_name': !exists(json, 'scientificName') ? undefined : json['scientificName'],
        'food_category': !exists(json, 'foodCategory') ? undefined : SchemasFoodCategoryFromJSON(json['foodCategory']),
        'food_nutrients': !exists(json, 'foodNutrients') ? undefined : ((json['foodNutrients'] as Array<any>).map(FoodNutrientFromJSON)),
        'nutrient_conversion_factors': !exists(json, 'nutrientConversionFactors') ? undefined : ((json['nutrientConversionFactors'] as Array<any>).map(NutrientConversionFactorsFromJSON)),
    };
}

export function SRLegacyFoodItemToJSON(value?: SRLegacyFoodItem | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'fdcId': value.fdc_id,
        'dataType': value.data_type,
        'description': value.description,
        'foodClass': value.food_class,
        'isHistoricalReference': value.is_historical_reference,
        'ndbNumber': value.ndb_number,
        'publicationDate': value.publication_date,
        'scientificName': value.scientific_name,
        'foodCategory': SchemasFoodCategoryToJSON(value.food_category),
        'foodNutrients': value.food_nutrients === undefined ? undefined : ((value.food_nutrients as Array<any>).map(FoodNutrientToJSON)),
        'nutrientConversionFactors': value.nutrient_conversion_factors === undefined ? undefined : ((value.nutrient_conversion_factors as Array<any>).map(NutrientConversionFactorsToJSON)),
    };
}

