/* tslint:disable */
/* eslint-disable */
/**
 * Gourd Recipe Database
 * API for https://github.com/nickysemenza/gourd
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n@nickysemenza.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Ingredient } from './Ingredient';
import {
    IngredientFromJSON,
    IngredientFromJSONTyped,
    IngredientToJSON,
} from './Ingredient';
import type { Items } from './Items';
import {
    ItemsFromJSON,
    ItemsFromJSONTyped,
    ItemsToJSON,
} from './Items';
import type { RecipeWrapper } from './RecipeWrapper';
import {
    RecipeWrapperFromJSON,
    RecipeWrapperFromJSONTyped,
    RecipeWrapperToJSON,
} from './RecipeWrapper';

/**
 * A search result wrapper, which contains ingredients and recipes
 * @export
 * @interface SearchResult
 */
export interface SearchResult {
    /**
     * The ingredients
     * @type {Array<Ingredient>}
     * @memberof SearchResult
     */
    ingredients?: Array<Ingredient>;
    /**
     * The recipes
     * @type {Array<RecipeWrapper>}
     * @memberof SearchResult
     */
    recipes?: Array<RecipeWrapper>;
    /**
     * 
     * @type {Items}
     * @memberof SearchResult
     */
    meta?: Items;
}

/**
 * Check if a given object implements the SearchResult interface.
 */
export function instanceOfSearchResult(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SearchResultFromJSON(json: any): SearchResult {
    return SearchResultFromJSONTyped(json, false);
}

export function SearchResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): SearchResult {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ingredients': !exists(json, 'ingredients') ? undefined : ((json['ingredients'] as Array<any>).map(IngredientFromJSON)),
        'recipes': !exists(json, 'recipes') ? undefined : ((json['recipes'] as Array<any>).map(RecipeWrapperFromJSON)),
        'meta': !exists(json, 'meta') ? undefined : ItemsFromJSON(json['meta']),
    };
}

export function SearchResultToJSON(value?: SearchResult | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ingredients': value.ingredients === undefined ? undefined : ((value.ingredients as Array<any>).map(IngredientToJSON)),
        'recipes': value.recipes === undefined ? undefined : ((value.recipes as Array<any>).map(RecipeWrapperToJSON)),
        'meta': ItemsToJSON(value.meta),
    };
}

