/* tslint:disable */
/* eslint-disable */
/**
 * Gourd Recipe Database
 * API for https://github.com/nickysemenza/gourd
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n@nickysemenza.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UnitMapping } from './UnitMapping';
import {
    UnitMappingFromJSON,
    UnitMappingFromJSONTyped,
    UnitMappingToJSON,
} from './UnitMapping';

/**
 * details about ingredients
 * @export
 * @interface IngredientMapping
 */
export interface IngredientMapping {
    /**
     * 
     * @type {string}
     * @memberof IngredientMapping
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof IngredientMapping
     */
    fdc_id?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof IngredientMapping
     */
    aliases: Array<string>;
    /**
     * mappings of equivalent units
     * @type {Array<UnitMapping>}
     * @memberof IngredientMapping
     */
    unit_mappings: Array<UnitMapping>;
}

/**
 * Check if a given object implements the IngredientMapping interface.
 */
export function instanceOfIngredientMapping(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "aliases" in value;
    isInstance = isInstance && "unit_mappings" in value;

    return isInstance;
}

export function IngredientMappingFromJSON(json: any): IngredientMapping {
    return IngredientMappingFromJSONTyped(json, false);
}

export function IngredientMappingFromJSONTyped(json: any, ignoreDiscriminator: boolean): IngredientMapping {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'fdc_id': !exists(json, 'fdc_id') ? undefined : json['fdc_id'],
        'aliases': json['aliases'],
        'unit_mappings': ((json['unit_mappings'] as Array<any>).map(UnitMappingFromJSON)),
    };
}

export function IngredientMappingToJSON(value?: IngredientMapping | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'fdc_id': value.fdc_id,
        'aliases': value.aliases,
        'unit_mappings': ((value.unit_mappings as Array<any>).map(UnitMappingToJSON)),
    };
}

