/* tslint:disable */
/* eslint-disable */
/**
 * Gourd Recipe Database
 * API for https://github.com/nickysemenza/gourd
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n@nickysemenza.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MeasureUnit } from './MeasureUnit';
import {
    MeasureUnitFromJSON,
    MeasureUnitFromJSONTyped,
    MeasureUnitToJSON,
} from './MeasureUnit';

/**
 * 
 * @export
 * @interface SchemasFoodPortion
 */
export interface SchemasFoodPortion {
    /**
     * 
     * @type {number}
     * @memberof SchemasFoodPortion
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof SchemasFoodPortion
     */
    amount?: number;
    /**
     * 
     * @type {number}
     * @memberof SchemasFoodPortion
     */
    data_points?: number;
    /**
     * 
     * @type {number}
     * @memberof SchemasFoodPortion
     */
    gram_weight?: number;
    /**
     * 
     * @type {number}
     * @memberof SchemasFoodPortion
     */
    min_year_acquired?: number;
    /**
     * 
     * @type {string}
     * @memberof SchemasFoodPortion
     */
    modifier?: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasFoodPortion
     */
    portion_description?: string;
    /**
     * 
     * @type {number}
     * @memberof SchemasFoodPortion
     */
    sequence_number?: number;
    /**
     * 
     * @type {MeasureUnit}
     * @memberof SchemasFoodPortion
     */
    measure_unit?: MeasureUnit;
}

/**
 * Check if a given object implements the SchemasFoodPortion interface.
 */
export function instanceOfSchemasFoodPortion(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SchemasFoodPortionFromJSON(json: any): SchemasFoodPortion {
    return SchemasFoodPortionFromJSONTyped(json, false);
}

export function SchemasFoodPortionFromJSONTyped(json: any, ignoreDiscriminator: boolean): SchemasFoodPortion {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'amount': !exists(json, 'amount') ? undefined : json['amount'],
        'data_points': !exists(json, 'dataPoints') ? undefined : json['dataPoints'],
        'gram_weight': !exists(json, 'gramWeight') ? undefined : json['gramWeight'],
        'min_year_acquired': !exists(json, 'minYearAcquired') ? undefined : json['minYearAcquired'],
        'modifier': !exists(json, 'modifier') ? undefined : json['modifier'],
        'portion_description': !exists(json, 'portionDescription') ? undefined : json['portionDescription'],
        'sequence_number': !exists(json, 'sequenceNumber') ? undefined : json['sequenceNumber'],
        'measure_unit': !exists(json, 'measureUnit') ? undefined : MeasureUnitFromJSON(json['measureUnit']),
    };
}

export function SchemasFoodPortionToJSON(value?: SchemasFoodPortion | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'amount': value.amount,
        'dataPoints': value.data_points,
        'gramWeight': value.gram_weight,
        'minYearAcquired': value.min_year_acquired,
        'modifier': value.modifier,
        'portionDescription': value.portion_description,
        'sequenceNumber': value.sequence_number,
        'measureUnit': MeasureUnitToJSON(value.measure_unit),
    };
}

