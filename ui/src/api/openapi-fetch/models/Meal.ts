/* tslint:disable */
/* eslint-disable */
/**
 * Gourd Recipe Database
 * API for https://github.com/nickysemenza/gourd
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n@nickysemenza.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MealRecipe } from './MealRecipe';
import {
    MealRecipeFromJSON,
    MealRecipeFromJSONTyped,
    MealRecipeToJSON,
} from './MealRecipe';
import type { Photo } from './Photo';
import {
    PhotoFromJSON,
    PhotoFromJSONTyped,
    PhotoToJSON,
} from './Photo';

/**
 * A meal, which bridges recipes to photos
 * @export
 * @interface Meal
 */
export interface Meal {
    /**
     * id
     * @type {string}
     * @memberof Meal
     */
    id: string;
    /**
     * public image
     * @type {string}
     * @memberof Meal
     */
    name: string;
    /**
     * when it was taken
     * @type {Date}
     * @memberof Meal
     */
    ate_at: Date;
    /**
     * 
     * @type {Array<Photo>}
     * @memberof Meal
     */
    photos: Array<Photo>;
    /**
     * 
     * @type {Array<MealRecipe>}
     * @memberof Meal
     */
    recipes?: Array<MealRecipe>;
}

/**
 * Check if a given object implements the Meal interface.
 */
export function instanceOfMeal(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "ate_at" in value;
    isInstance = isInstance && "photos" in value;

    return isInstance;
}

export function MealFromJSON(json: any): Meal {
    return MealFromJSONTyped(json, false);
}

export function MealFromJSONTyped(json: any, ignoreDiscriminator: boolean): Meal {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'ate_at': (new Date(json['ate_at'])),
        'photos': ((json['photos'] as Array<any>).map(PhotoFromJSON)),
        'recipes': !exists(json, 'recipes') ? undefined : ((json['recipes'] as Array<any>).map(MealRecipeFromJSON)),
    };
}

export function MealToJSON(value?: Meal | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'ate_at': (value.ate_at.toISOString()),
        'photos': ((value.photos as Array<any>).map(PhotoToJSON)),
        'recipes': value.recipes === undefined ? undefined : ((value.recipes as Array<any>).map(MealRecipeToJSON)),
    };
}

