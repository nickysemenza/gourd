/* tslint:disable */
/* eslint-disable */
/**
 * Gourd Recipe Database
 * API for https://github.com/nickysemenza/gourd
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n@nickysemenza.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A photo
 * @export
 * @interface Photo
 */
export interface Photo {
    /**
     * id
     * @type {string}
     * @memberof Photo
     */
    id: string;
    /**
     * public image
     * @type {string}
     * @memberof Photo
     */
    base_url: string;
    /**
     * blur hash
     * @type {string}
     * @memberof Photo
     */
    blur_hash?: string;
    /**
     * when it was taken
     * @type {Date}
     * @memberof Photo
     */
    created: Date;
    /**
     * width px
     * @type {number}
     * @memberof Photo
     */
    width: number;
    /**
     * height px
     * @type {number}
     * @memberof Photo
     */
    height: number;
    /**
     * where the photo came from
     * @type {string}
     * @memberof Photo
     */
    source: PhotoSourceEnum;
}


/**
 * @export
 */
export const PhotoSourceEnum = {
    GOOGLE: 'google',
    NOTION: 'notion'
} as const;
export type PhotoSourceEnum = typeof PhotoSourceEnum[keyof typeof PhotoSourceEnum];


/**
 * Check if a given object implements the Photo interface.
 */
export function instanceOfPhoto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "base_url" in value;
    isInstance = isInstance && "created" in value;
    isInstance = isInstance && "width" in value;
    isInstance = isInstance && "height" in value;
    isInstance = isInstance && "source" in value;

    return isInstance;
}

export function PhotoFromJSON(json: any): Photo {
    return PhotoFromJSONTyped(json, false);
}

export function PhotoFromJSONTyped(json: any, ignoreDiscriminator: boolean): Photo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'base_url': json['base_url'],
        'blur_hash': !exists(json, 'blur_hash') ? undefined : json['blur_hash'],
        'created': (new Date(json['created'])),
        'width': json['width'],
        'height': json['height'],
        'source': json['source'],
    };
}

export function PhotoToJSON(value?: Photo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'base_url': value.base_url,
        'blur_hash': value.blur_hash,
        'created': (value.created.toISOString()),
        'width': value.width,
        'height': value.height,
        'source': value.source,
    };
}

