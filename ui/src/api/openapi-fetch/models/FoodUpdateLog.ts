/* tslint:disable */
/* eslint-disable */
/**
 * Gourd Recipe Database
 * API for https://github.com/nickysemenza/gourd
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n@nickysemenza.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FoodAttribute } from './FoodAttribute';
import {
    FoodAttributeFromJSON,
    FoodAttributeFromJSONTyped,
    FoodAttributeToJSON,
} from './FoodAttribute';

/**
 * 
 * @export
 * @interface FoodUpdateLog
 */
export interface FoodUpdateLog {
    /**
     * 
     * @type {number}
     * @memberof FoodUpdateLog
     */
    fdc_id?: number;
    /**
     * 
     * @type {string}
     * @memberof FoodUpdateLog
     */
    available_date?: string;
    /**
     * 
     * @type {string}
     * @memberof FoodUpdateLog
     */
    brand_owner?: string;
    /**
     * 
     * @type {string}
     * @memberof FoodUpdateLog
     */
    data_source?: string;
    /**
     * 
     * @type {string}
     * @memberof FoodUpdateLog
     */
    data_type?: string;
    /**
     * 
     * @type {string}
     * @memberof FoodUpdateLog
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof FoodUpdateLog
     */
    food_class?: string;
    /**
     * 
     * @type {string}
     * @memberof FoodUpdateLog
     */
    gtin_upc?: string;
    /**
     * 
     * @type {string}
     * @memberof FoodUpdateLog
     */
    household_serving_full_text?: string;
    /**
     * 
     * @type {string}
     * @memberof FoodUpdateLog
     */
    ingredients?: string;
    /**
     * 
     * @type {string}
     * @memberof FoodUpdateLog
     */
    modified_date?: string;
    /**
     * 
     * @type {string}
     * @memberof FoodUpdateLog
     */
    publication_date?: string;
    /**
     * 
     * @type {number}
     * @memberof FoodUpdateLog
     */
    serving_size?: number;
    /**
     * 
     * @type {string}
     * @memberof FoodUpdateLog
     */
    serving_size_unit?: string;
    /**
     * 
     * @type {string}
     * @memberof FoodUpdateLog
     */
    branded_food_category?: string;
    /**
     * 
     * @type {string}
     * @memberof FoodUpdateLog
     */
    changes?: string;
    /**
     * 
     * @type {Array<FoodAttribute>}
     * @memberof FoodUpdateLog
     */
    food_attributes?: Array<FoodAttribute>;
}

/**
 * Check if a given object implements the FoodUpdateLog interface.
 */
export function instanceOfFoodUpdateLog(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FoodUpdateLogFromJSON(json: any): FoodUpdateLog {
    return FoodUpdateLogFromJSONTyped(json, false);
}

export function FoodUpdateLogFromJSONTyped(json: any, ignoreDiscriminator: boolean): FoodUpdateLog {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'fdc_id': !exists(json, 'fdcId') ? undefined : json['fdcId'],
        'available_date': !exists(json, 'availableDate') ? undefined : json['availableDate'],
        'brand_owner': !exists(json, 'brandOwner') ? undefined : json['brandOwner'],
        'data_source': !exists(json, 'dataSource') ? undefined : json['dataSource'],
        'data_type': !exists(json, 'dataType') ? undefined : json['dataType'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'food_class': !exists(json, 'foodClass') ? undefined : json['foodClass'],
        'gtin_upc': !exists(json, 'gtinUpc') ? undefined : json['gtinUpc'],
        'household_serving_full_text': !exists(json, 'householdServingFullText') ? undefined : json['householdServingFullText'],
        'ingredients': !exists(json, 'ingredients') ? undefined : json['ingredients'],
        'modified_date': !exists(json, 'modifiedDate') ? undefined : json['modifiedDate'],
        'publication_date': !exists(json, 'publicationDate') ? undefined : json['publicationDate'],
        'serving_size': !exists(json, 'servingSize') ? undefined : json['servingSize'],
        'serving_size_unit': !exists(json, 'servingSizeUnit') ? undefined : json['servingSizeUnit'],
        'branded_food_category': !exists(json, 'brandedFoodCategory') ? undefined : json['brandedFoodCategory'],
        'changes': !exists(json, 'changes') ? undefined : json['changes'],
        'food_attributes': !exists(json, 'foodAttributes') ? undefined : ((json['foodAttributes'] as Array<any>).map(FoodAttributeFromJSON)),
    };
}

export function FoodUpdateLogToJSON(value?: FoodUpdateLog | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'fdcId': value.fdc_id,
        'availableDate': value.available_date,
        'brandOwner': value.brand_owner,
        'dataSource': value.data_source,
        'dataType': value.data_type,
        'description': value.description,
        'foodClass': value.food_class,
        'gtinUpc': value.gtin_upc,
        'householdServingFullText': value.household_serving_full_text,
        'ingredients': value.ingredients,
        'modifiedDate': value.modified_date,
        'publicationDate': value.publication_date,
        'servingSize': value.serving_size,
        'servingSizeUnit': value.serving_size_unit,
        'brandedFoodCategory': value.branded_food_category,
        'changes': value.changes,
        'foodAttributes': value.food_attributes === undefined ? undefined : ((value.food_attributes as Array<any>).map(FoodAttributeToJSON)),
    };
}

