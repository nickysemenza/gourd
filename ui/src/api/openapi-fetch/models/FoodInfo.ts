/* tslint:disable */
/* eslint-disable */
/**
 * Gourd Recipe Database
 * API for https://github.com/nickysemenza/gourd
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n@nickysemenza.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FoodWrapper } from './FoodWrapper';
import {
    FoodWrapperFromJSON,
    FoodWrapperFromJSONTyped,
    FoodWrapperToJSON,
} from './FoodWrapper';
import type { UnitMapping } from './UnitMapping';
import {
    UnitMappingFromJSON,
    UnitMappingFromJSONTyped,
    UnitMappingToJSON,
} from './UnitMapping';

/**
 * A top level food?
 * @export
 * @interface FoodInfo
 */
export interface FoodInfo {
    /**
     * 
     * @type {FoodWrapper}
     * @memberof FoodInfo
     */
    wrapper: FoodWrapper;
    /**
     * mappings of equivalent units
     * @type {Array<UnitMapping>}
     * @memberof FoodInfo
     */
    unit_mappings: Array<UnitMapping>;
}

/**
 * Check if a given object implements the FoodInfo interface.
 */
export function instanceOfFoodInfo(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "wrapper" in value;
    isInstance = isInstance && "unit_mappings" in value;

    return isInstance;
}

export function FoodInfoFromJSON(json: any): FoodInfo {
    return FoodInfoFromJSONTyped(json, false);
}

export function FoodInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): FoodInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'wrapper': FoodWrapperFromJSON(json['wrapper']),
        'unit_mappings': ((json['unit_mappings'] as Array<any>).map(UnitMappingFromJSON)),
    };
}

export function FoodInfoToJSON(value?: FoodInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'wrapper': FoodWrapperToJSON(value.wrapper),
        'unit_mappings': ((value.unit_mappings as Array<any>).map(UnitMappingToJSON)),
    };
}

