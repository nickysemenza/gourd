/* tslint:disable */
/* eslint-disable */
/**
 * Gourd Recipe Database
 * API for https://github.com/nickysemenza/gourd
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n@nickysemenza.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Amount } from './Amount';
import {
    AmountFromJSON,
    AmountFromJSONTyped,
    AmountToJSON,
} from './Amount';
import type { EntitySummary } from './EntitySummary';
import {
    EntitySummaryFromJSON,
    EntitySummaryFromJSONTyped,
    EntitySummaryToJSON,
} from './EntitySummary';
import type { IngredientUsage } from './IngredientUsage';
import {
    IngredientUsageFromJSON,
    IngredientUsageFromJSONTyped,
    IngredientUsageToJSON,
} from './IngredientUsage';

/**
 * holds information
 * @export
 * @interface UsageValue
 */
export interface UsageValue {
    /**
     * multiplier
     * @type {Array<IngredientUsage>}
     * @memberof UsageValue
     */
    ings: Array<IngredientUsage>;
    /**
     * amounts
     * @type {Array<Amount>}
     * @memberof UsageValue
     */
    sum: Array<Amount>;
    /**
     * 
     * @type {EntitySummary}
     * @memberof UsageValue
     */
    meta: EntitySummary;
}

/**
 * Check if a given object implements the UsageValue interface.
 */
export function instanceOfUsageValue(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "ings" in value;
    isInstance = isInstance && "sum" in value;
    isInstance = isInstance && "meta" in value;

    return isInstance;
}

export function UsageValueFromJSON(json: any): UsageValue {
    return UsageValueFromJSONTyped(json, false);
}

export function UsageValueFromJSONTyped(json: any, ignoreDiscriminator: boolean): UsageValue {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ings': ((json['ings'] as Array<any>).map(IngredientUsageFromJSON)),
        'sum': ((json['sum'] as Array<any>).map(AmountFromJSON)),
        'meta': EntitySummaryFromJSON(json['meta']),
    };
}

export function UsageValueToJSON(value?: UsageValue | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ings': ((value.ings as Array<any>).map(IngredientUsageToJSON)),
        'sum': ((value.sum as Array<any>).map(AmountToJSON)),
        'meta': EntitySummaryToJSON(value.meta),
    };
}

