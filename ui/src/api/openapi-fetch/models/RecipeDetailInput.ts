/* tslint:disable */
/* eslint-disable */
/**
 * Gourd Recipe Database
 * API for https://github.com/nickysemenza/gourd
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n@nickysemenza.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    RecipeSectionInput,
    RecipeSectionInputFromJSON,
    RecipeSectionInputFromJSONTyped,
    RecipeSectionInputToJSON,
    RecipeSource,
    RecipeSourceFromJSON,
    RecipeSourceFromJSONTyped,
    RecipeSourceToJSON,
} from './';

/**
 * A revision of a recipe
 * @export
 * @interface RecipeDetailInput
 */
export interface RecipeDetailInput {
    /**
     * id
     * @type {string}
     * @memberof RecipeDetailInput
     */
    id: string;
    /**
     * sections of the recipe
     * @type {Array<RecipeSectionInput>}
     * @memberof RecipeDetailInput
     */
    sections: Array<RecipeSectionInput>;
    /**
     * recipe name
     * @type {string}
     * @memberof RecipeDetailInput
     */
    name: string;
    /**
     * book or websites
     * @type {Array<RecipeSource>}
     * @memberof RecipeDetailInput
     */
    sources?: Array<RecipeSource>;
    /**
     * num servings
     * @type {number}
     * @memberof RecipeDetailInput
     */
    servings?: number;
    /**
     * serving quantity
     * @type {number}
     * @memberof RecipeDetailInput
     */
    quantity: number;
    /**
     * serving unit
     * @type {string}
     * @memberof RecipeDetailInput
     */
    unit: string;
}

export function RecipeDetailInputFromJSON(json: any): RecipeDetailInput {
    return RecipeDetailInputFromJSONTyped(json, false);
}

export function RecipeDetailInputFromJSONTyped(json: any, ignoreDiscriminator: boolean): RecipeDetailInput {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'sections': ((json['sections'] as Array<any>).map(RecipeSectionInputFromJSON)),
        'name': json['name'],
        'sources': !exists(json, 'sources') ? undefined : ((json['sources'] as Array<any>).map(RecipeSourceFromJSON)),
        'servings': !exists(json, 'servings') ? undefined : json['servings'],
        'quantity': json['quantity'],
        'unit': json['unit'],
    };
}

export function RecipeDetailInputToJSON(value?: RecipeDetailInput | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'sections': ((value.sections as Array<any>).map(RecipeSectionInputToJSON)),
        'name': value.name,
        'sources': value.sources === undefined ? undefined : ((value.sources as Array<any>).map(RecipeSourceToJSON)),
        'servings': value.servings,
        'quantity': value.quantity,
        'unit': value.unit,
    };
}


