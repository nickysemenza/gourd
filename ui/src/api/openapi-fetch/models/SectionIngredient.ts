/* tslint:disable */
/* eslint-disable */
/**
 * Gourd Recipe Database
 * API for https://github.com/nickysemenza/gourd
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n@nickysemenza.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Amount,
    AmountFromJSON,
    AmountFromJSONTyped,
    AmountToJSON,
    IngredientDetail,
    IngredientDetailFromJSON,
    IngredientDetailFromJSONTyped,
    IngredientDetailToJSON,
    IngredientKind,
    IngredientKindFromJSON,
    IngredientKindFromJSONTyped,
    IngredientKindToJSON,
    RecipeDetail,
    RecipeDetailFromJSON,
    RecipeDetailFromJSONTyped,
    RecipeDetailToJSON,
} from './';

/**
 * Ingredients in a single section
 * @export
 * @interface SectionIngredient
 */
export interface SectionIngredient {
    /**
     * id
     * @type {string}
     * @memberof SectionIngredient
     */
    id: string;
    /**
     * 
     * @type {IngredientKind}
     * @memberof SectionIngredient
     */
    kind: IngredientKind;
    /**
     * 
     * @type {RecipeDetail}
     * @memberof SectionIngredient
     */
    recipe?: RecipeDetail;
    /**
     * 
     * @type {IngredientDetail}
     * @memberof SectionIngredient
     */
    ingredient?: IngredientDetail;
    /**
     * the various measures
     * @type {Array<Amount>}
     * @memberof SectionIngredient
     */
    amounts: Array<Amount>;
    /**
     * adjective
     * @type {string}
     * @memberof SectionIngredient
     */
    adjective?: string;
    /**
     * optional
     * @type {boolean}
     * @memberof SectionIngredient
     */
    optional?: boolean;
    /**
     * raw line item (pre-import/scrape)
     * @type {string}
     * @memberof SectionIngredient
     */
    original?: string;
    /**
     * x
     * @type {Array<SectionIngredient>}
     * @memberof SectionIngredient
     */
    substitutes?: Array<SectionIngredient>;
}

export function SectionIngredientFromJSON(json: any): SectionIngredient {
    return SectionIngredientFromJSONTyped(json, false);
}

export function SectionIngredientFromJSONTyped(json: any, ignoreDiscriminator: boolean): SectionIngredient {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'kind': IngredientKindFromJSON(json['kind']),
        'recipe': !exists(json, 'recipe') ? undefined : RecipeDetailFromJSON(json['recipe']),
        'ingredient': !exists(json, 'ingredient') ? undefined : IngredientDetailFromJSON(json['ingredient']),
        'amounts': ((json['amounts'] as Array<any>).map(AmountFromJSON)),
        'adjective': !exists(json, 'adjective') ? undefined : json['adjective'],
        'optional': !exists(json, 'optional') ? undefined : json['optional'],
        'original': !exists(json, 'original') ? undefined : json['original'],
        'substitutes': !exists(json, 'substitutes') ? undefined : ((json['substitutes'] as Array<any>).map(SectionIngredientFromJSON)),
    };
}

export function SectionIngredientToJSON(value?: SectionIngredient | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'kind': IngredientKindToJSON(value.kind),
        'recipe': RecipeDetailToJSON(value.recipe),
        'ingredient': IngredientDetailToJSON(value.ingredient),
        'amounts': ((value.amounts as Array<any>).map(AmountToJSON)),
        'adjective': value.adjective,
        'optional': value.optional,
        'original': value.original,
        'substitutes': value.substitutes === undefined ? undefined : ((value.substitutes as Array<any>).map(SectionIngredientToJSON)),
    };
}


