/* tslint:disable */
/* eslint-disable */
/**
 * Gourd Recipe Database
 * API for https://github.com/nickysemenza/gourd
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n@nickysemenza.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FoodDataType,
  FoodInfo,
  FoodSearchResult,
  PaginatedFoods,
  RecipeDetail,
} from '../models';
import {
    FoodDataTypeFromJSON,
    FoodDataTypeToJSON,
    FoodInfoFromJSON,
    FoodInfoToJSON,
    FoodSearchResultFromJSON,
    FoodSearchResultToJSON,
    PaginatedFoodsFromJSON,
    PaginatedFoodsToJSON,
    RecipeDetailFromJSON,
    RecipeDetailToJSON,
} from '../models';

export interface FoodsApiAssociateFoodWithIngredientRequest {
    ingredientId: string;
    fdcId: number;
}

export interface FoodsApiGetFoodByIdRequest {
    fdcId: number;
}

export interface FoodsApiGetFoodsByIdsRequest {
    fdcId: Array<number>;
}

export interface FoodsApiSearchFoodsRequest {
    name: string;
    offset?: number;
    limit?: number;
    dataTypes?: Array<FoodDataType>;
}

/**
 * 
 */
export class FoodsApi extends runtime.BaseAPI {

    /**
     * todo
     * Assosiates a food with a given ingredient
     */
    async associateFoodWithIngredientRaw(requestParameters: FoodsApiAssociateFoodWithIngredientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecipeDetail>> {
        if (requestParameters.ingredientId === null || requestParameters.ingredientId === undefined) {
            throw new runtime.RequiredError('ingredientId','Required parameter requestParameters.ingredientId was null or undefined when calling associateFoodWithIngredient.');
        }

        if (requestParameters.fdcId === null || requestParameters.fdcId === undefined) {
            throw new runtime.RequiredError('fdcId','Required parameter requestParameters.fdcId was null or undefined when calling associateFoodWithIngredient.');
        }

        const queryParameters: any = {};

        if (requestParameters.fdcId !== undefined) {
            queryParameters['fdc_id'] = requestParameters.fdcId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ingredients/{ingredient_id}/associate_food`.replace(`{${"ingredient_id"}}`, encodeURIComponent(String(requestParameters.ingredientId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecipeDetailFromJSON(jsonValue));
    }

    /**
     * todo
     * Assosiates a food with a given ingredient
     */
    async associateFoodWithIngredient(requestParameters: FoodsApiAssociateFoodWithIngredientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecipeDetail> {
        const response = await this.associateFoodWithIngredientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * todo
     * get a FDC entry by id
     */
    async getFoodByIdRaw(requestParameters: FoodsApiGetFoodByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FoodInfo>> {
        if (requestParameters.fdcId === null || requestParameters.fdcId === undefined) {
            throw new runtime.RequiredError('fdcId','Required parameter requestParameters.fdcId was null or undefined when calling getFoodById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/foods/{fdc_id}`.replace(`{${"fdc_id"}}`, encodeURIComponent(String(requestParameters.fdcId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FoodInfoFromJSON(jsonValue));
    }

    /**
     * todo
     * get a FDC entry by id
     */
    async getFoodById(requestParameters: FoodsApiGetFoodByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FoodInfo> {
        const response = await this.getFoodByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get foods by ids
     * Get foods
     */
    async getFoodsByIdsRaw(requestParameters: FoodsApiGetFoodsByIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFoods>> {
        if (requestParameters.fdcId === null || requestParameters.fdcId === undefined) {
            throw new runtime.RequiredError('fdcId','Required parameter requestParameters.fdcId was null or undefined when calling getFoodsByIds.');
        }

        const queryParameters: any = {};

        if (requestParameters.fdcId) {
            queryParameters['fdc_id'] = requestParameters.fdcId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/foods/bulk`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFoodsFromJSON(jsonValue));
    }

    /**
     * get foods by ids
     * Get foods
     */
    async getFoodsByIds(requestParameters: FoodsApiGetFoodsByIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFoods> {
        const response = await this.getFoodsByIdsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * todo
     * Search foods
     */
    async searchFoodsRaw(requestParameters: FoodsApiSearchFoodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FoodSearchResult>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling searchFoods.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.dataTypes) {
            queryParameters['data_types'] = requestParameters.dataTypes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/foods/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FoodSearchResultFromJSON(jsonValue));
    }

    /**
     * todo
     * Search foods
     */
    async searchFoods(requestParameters: FoodsApiSearchFoodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FoodSearchResult> {
        const response = await this.searchFoodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
