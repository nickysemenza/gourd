/* tslint:disable */
/* eslint-disable */
/**
 * Gourd Recipe Database
 * API for https://github.com/nickysemenza/gourd
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n@nickysemenza.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    RecipeDetail,
    RecipeDetailFromJSON,
    RecipeDetailToJSON,
} from '../models';

export interface FoodsApiAssociateFoodWithIngredientRequest {
    ingredientId: string;
    fdcId: number;
}

/**
 * 
 */
export class FoodsApi extends runtime.BaseAPI {

    /**
     * todo
     * Assosiates a food with a given ingredient
     */
    async associateFoodWithIngredientRaw(requestParameters: FoodsApiAssociateFoodWithIngredientRequest): Promise<runtime.ApiResponse<RecipeDetail>> {
        if (requestParameters.ingredientId === null || requestParameters.ingredientId === undefined) {
            throw new runtime.RequiredError('ingredientId','Required parameter requestParameters.ingredientId was null or undefined when calling associateFoodWithIngredient.');
        }

        if (requestParameters.fdcId === null || requestParameters.fdcId === undefined) {
            throw new runtime.RequiredError('fdcId','Required parameter requestParameters.fdcId was null or undefined when calling associateFoodWithIngredient.');
        }

        const queryParameters: any = {};

        if (requestParameters.fdcId !== undefined) {
            queryParameters['fdc_id'] = requestParameters.fdcId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ingredients/{ingredient_id}/associate_food`.replace(`{${"ingredient_id"}}`, encodeURIComponent(String(requestParameters.ingredientId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RecipeDetailFromJSON(jsonValue));
    }

    /**
     * todo
     * Assosiates a food with a given ingredient
     */
    async associateFoodWithIngredient(requestParameters: FoodsApiAssociateFoodWithIngredientRequest): Promise<RecipeDetail> {
        const response = await this.associateFoodWithIngredientRaw(requestParameters);
        return await response.value();
    }

}
