/* tslint:disable */
/* eslint-disable */
/**
 * Gourd Recipe Database
 * API for https://github.com/nickysemenza/gourd
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n@nickysemenza.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginatedRecipeWrappers,
  RecipeDependencies200Response,
  RecipeDetail,
  RecipeWrapper,
  RecipeWrapperInput,
  ScrapeRecipeRequest,
  SearchResult,
  SumRecipesRequest,
  SumsResponse,
} from '../models';
import {
    PaginatedRecipeWrappersFromJSON,
    PaginatedRecipeWrappersToJSON,
    RecipeDependencies200ResponseFromJSON,
    RecipeDependencies200ResponseToJSON,
    RecipeDetailFromJSON,
    RecipeDetailToJSON,
    RecipeWrapperFromJSON,
    RecipeWrapperToJSON,
    RecipeWrapperInputFromJSON,
    RecipeWrapperInputToJSON,
    ScrapeRecipeRequestFromJSON,
    ScrapeRecipeRequestToJSON,
    SearchResultFromJSON,
    SearchResultToJSON,
    SumRecipesRequestFromJSON,
    SumRecipesRequestToJSON,
    SumsResponseFromJSON,
    SumsResponseToJSON,
} from '../models';

export interface RecipesApiConvertIngredientToRecipeRequest {
    ingredientId: string;
}

export interface RecipesApiCreateRecipesRequest {
    recipeWrapperInput: RecipeWrapperInput;
}

export interface RecipesApiGetLatexByRecipeIdRequest {
    recipeId: string;
}

export interface RecipesApiGetRecipeByIdRequest {
    recipeId: string;
}

export interface RecipesApiGetRecipesByIdsRequest {
    recipeId: Array<string>;
}

export interface RecipesApiListRecipesRequest {
    offset?: number;
    limit?: number;
}

export interface RecipesApiScrapeRecipeOperationRequest {
    scrapeRecipeRequest: ScrapeRecipeRequest;
}

export interface RecipesApiSearchRequest {
    name: string;
    offset?: number;
    limit?: number;
}

export interface RecipesApiSumRecipesOperationRequest {
    sumRecipesRequest: SumRecipesRequest;
}

/**
 * 
 */
export class RecipesApi extends runtime.BaseAPI {

    /**
     * todo
     * Converts an ingredient to a recipe, updating all recipes depending on it
     */
    async convertIngredientToRecipeRaw(requestParameters: RecipesApiConvertIngredientToRecipeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecipeDetail>> {
        if (requestParameters.ingredientId === null || requestParameters.ingredientId === undefined) {
            throw new runtime.RequiredError('ingredientId','Required parameter requestParameters.ingredientId was null or undefined when calling convertIngredientToRecipe.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ingredients/{ingredient_id}/convert_to_recipe`.replace(`{${"ingredient_id"}}`, encodeURIComponent(String(requestParameters.ingredientId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecipeDetailFromJSON(jsonValue));
    }

    /**
     * todo
     * Converts an ingredient to a recipe, updating all recipes depending on it
     */
    async convertIngredientToRecipe(requestParameters: RecipesApiConvertIngredientToRecipeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecipeDetail> {
        const response = await this.convertIngredientToRecipeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * todo
     * Create a recipe
     */
    async createRecipesRaw(requestParameters: RecipesApiCreateRecipesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecipeWrapper>> {
        if (requestParameters.recipeWrapperInput === null || requestParameters.recipeWrapperInput === undefined) {
            throw new runtime.RequiredError('recipeWrapperInput','Required parameter requestParameters.recipeWrapperInput was null or undefined when calling createRecipes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/recipes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RecipeWrapperInputToJSON(requestParameters.recipeWrapperInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecipeWrapperFromJSON(jsonValue));
    }

    /**
     * todo
     * Create a recipe
     */
    async createRecipes(requestParameters: RecipesApiCreateRecipesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecipeWrapper> {
        const response = await this.createRecipesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * todo
     * recipe as latex
     */
    async getLatexByRecipeIdRaw(requestParameters: RecipesApiGetLatexByRecipeIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.recipeId === null || requestParameters.recipeId === undefined) {
            throw new runtime.RequiredError('recipeId','Required parameter requestParameters.recipeId was null or undefined when calling getLatexByRecipeId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/recipes/{recipe_id}/latex`.replace(`{${"recipe_id"}}`, encodeURIComponent(String(requestParameters.recipeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * todo
     * recipe as latex
     */
    async getLatexByRecipeId(requestParameters: RecipesApiGetLatexByRecipeIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getLatexByRecipeIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * todo
     * Info for a specific recipe
     */
    async getRecipeByIdRaw(requestParameters: RecipesApiGetRecipeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecipeWrapper>> {
        if (requestParameters.recipeId === null || requestParameters.recipeId === undefined) {
            throw new runtime.RequiredError('recipeId','Required parameter requestParameters.recipeId was null or undefined when calling getRecipeById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/recipes/{recipe_id}`.replace(`{${"recipe_id"}}`, encodeURIComponent(String(requestParameters.recipeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecipeWrapperFromJSON(jsonValue));
    }

    /**
     * todo
     * Info for a specific recipe
     */
    async getRecipeById(requestParameters: RecipesApiGetRecipeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecipeWrapper> {
        const response = await this.getRecipeByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get recipes by ids
     * Get recipes
     */
    async getRecipesByIdsRaw(requestParameters: RecipesApiGetRecipesByIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedRecipeWrappers>> {
        if (requestParameters.recipeId === null || requestParameters.recipeId === undefined) {
            throw new runtime.RequiredError('recipeId','Required parameter requestParameters.recipeId was null or undefined when calling getRecipesByIds.');
        }

        const queryParameters: any = {};

        if (requestParameters.recipeId) {
            queryParameters['recipe_id'] = requestParameters.recipeId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/recipes/bulk`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedRecipeWrappersFromJSON(jsonValue));
    }

    /**
     * get recipes by ids
     * Get recipes
     */
    async getRecipesByIds(requestParameters: RecipesApiGetRecipesByIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedRecipeWrappers> {
        const response = await this.getRecipesByIdsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * todo
     * List all recipes
     */
    async listRecipesRaw(requestParameters: RecipesApiListRecipesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedRecipeWrappers>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/recipes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedRecipeWrappersFromJSON(jsonValue));
    }

    /**
     * todo
     * List all recipes
     */
    async listRecipes(requestParameters: RecipesApiListRecipesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedRecipeWrappers> {
        const response = await this.listRecipesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * recipe dependencies
     * Get foods
     */
    async recipeDependenciesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecipeDependencies200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/data/recipe_dependencies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecipeDependencies200ResponseFromJSON(jsonValue));
    }

    /**
     * recipe dependencies
     * Get foods
     */
    async recipeDependencies(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecipeDependencies200Response> {
        const response = await this.recipeDependenciesRaw(initOverrides);
        return await response.value();
    }

    /**
     * todo
     * scrape a recipe by URL
     */
    async scrapeRecipeRaw(requestParameters: RecipesApiScrapeRecipeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecipeWrapper>> {
        if (requestParameters.scrapeRecipeRequest === null || requestParameters.scrapeRecipeRequest === undefined) {
            throw new runtime.RequiredError('scrapeRecipeRequest','Required parameter requestParameters.scrapeRecipeRequest was null or undefined when calling scrapeRecipe.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/recipes/scrape`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScrapeRecipeRequestToJSON(requestParameters.scrapeRecipeRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecipeWrapperFromJSON(jsonValue));
    }

    /**
     * todo
     * scrape a recipe by URL
     */
    async scrapeRecipe(requestParameters: RecipesApiScrapeRecipeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecipeWrapper> {
        const response = await this.scrapeRecipeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * todo
     * Search recipes and ingredients
     */
    async searchRaw(requestParameters: RecipesApiSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchResult>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling search.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchResultFromJSON(jsonValue));
    }

    /**
     * todo
     * Search recipes and ingredients
     */
    async search(requestParameters: RecipesApiSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchResult> {
        const response = await this.searchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * sums up the given recipes
     * sum up recipes
     */
    async sumRecipesRaw(requestParameters: RecipesApiSumRecipesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SumsResponse>> {
        if (requestParameters.sumRecipesRequest === null || requestParameters.sumRecipesRequest === undefined) {
            throw new runtime.RequiredError('sumRecipesRequest','Required parameter requestParameters.sumRecipesRequest was null or undefined when calling sumRecipes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/recipes/sum`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SumRecipesRequestToJSON(requestParameters.sumRecipesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SumsResponseFromJSON(jsonValue));
    }

    /**
     * sums up the given recipes
     * sum up recipes
     */
    async sumRecipes(requestParameters: RecipesApiSumRecipesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SumsResponse> {
        const response = await this.sumRecipesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
