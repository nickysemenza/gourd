/* tslint:disable */
/* eslint-disable */
/**
 * Gourd Recipe Database
 * API for https://github.com/nickysemenza/gourd
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n@nickysemenza.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Food,
    FoodFromJSON,
    FoodToJSON,
    FoodDataType,
    FoodDataTypeFromJSON,
    FoodDataTypeToJSON,
    PaginatedFoods,
    PaginatedFoodsFromJSON,
    PaginatedFoodsToJSON,
} from '../models';

export interface FoodApiGetFoodByIdRequest {
    fdcId: number;
}

export interface FoodApiGetFoodsByIdsRequest {
    fdcId: Array<number>;
}

export interface FoodApiSearchFoodsRequest {
    name: string;
    offset?: number;
    limit?: number;
    dataTypes?: Array<FoodDataType>;
}

/**
 * 
 */
export class FoodApi extends runtime.BaseAPI {

    /**
     * todo
     * get a FDC entry by id
     */
    async getFoodByIdRaw(requestParameters: FoodApiGetFoodByIdRequest): Promise<runtime.ApiResponse<Food>> {
        if (requestParameters.fdcId === null || requestParameters.fdcId === undefined) {
            throw new runtime.RequiredError('fdcId','Required parameter requestParameters.fdcId was null or undefined when calling getFoodById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/foods/{fdc_id}`.replace(`{${"fdc_id"}}`, encodeURIComponent(String(requestParameters.fdcId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FoodFromJSON(jsonValue));
    }

    /**
     * todo
     * get a FDC entry by id
     */
    async getFoodById(requestParameters: FoodApiGetFoodByIdRequest): Promise<Food> {
        const response = await this.getFoodByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * get foods by ids
     * Get foods
     */
    async getFoodsByIdsRaw(requestParameters: FoodApiGetFoodsByIdsRequest): Promise<runtime.ApiResponse<PaginatedFoods>> {
        if (requestParameters.fdcId === null || requestParameters.fdcId === undefined) {
            throw new runtime.RequiredError('fdcId','Required parameter requestParameters.fdcId was null or undefined when calling getFoodsByIds.');
        }

        const queryParameters: any = {};

        if (requestParameters.fdcId) {
            queryParameters['fdc_id'] = requestParameters.fdcId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/foods/bulk`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFoodsFromJSON(jsonValue));
    }

    /**
     * get foods by ids
     * Get foods
     */
    async getFoodsByIds(requestParameters: FoodApiGetFoodsByIdsRequest): Promise<PaginatedFoods> {
        const response = await this.getFoodsByIdsRaw(requestParameters);
        return await response.value();
    }

    /**
     * todo
     * Search foods
     */
    async searchFoodsRaw(requestParameters: FoodApiSearchFoodsRequest): Promise<runtime.ApiResponse<PaginatedFoods>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling searchFoods.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.dataTypes) {
            queryParameters['data_types'] = requestParameters.dataTypes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/foods/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFoodsFromJSON(jsonValue));
    }

    /**
     * todo
     * Search foods
     */
    async searchFoods(requestParameters: FoodApiSearchFoodsRequest): Promise<PaginatedFoods> {
        const response = await this.searchFoodsRaw(requestParameters);
        return await response.value();
    }

}
