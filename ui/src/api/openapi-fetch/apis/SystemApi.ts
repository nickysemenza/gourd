/* tslint:disable */
/* eslint-disable */
/**
 * Gourd Recipe Database
 * API for https://github.com/nickysemenza/gourd
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n@nickysemenza.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConfigData,
} from '../models';
import {
    ConfigDataFromJSON,
    ConfigDataToJSON,
} from '../models';

export interface SystemApiDoSyncRequest {
    lookbackDays: number;
}

/**
 * 
 */
export class SystemApi extends runtime.BaseAPI {

    /**
     * todo
     * perform sync
     */
    async doSyncRaw(requestParameters: SystemApiDoSyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.lookbackDays === null || requestParameters.lookbackDays === undefined) {
            throw new runtime.RequiredError('lookbackDays','Required parameter requestParameters.lookbackDays was null or undefined when calling doSync.');
        }

        const queryParameters: any = {};

        if (requestParameters.lookbackDays !== undefined) {
            queryParameters['lookback_days'] = requestParameters.lookbackDays;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/sync`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * todo
     * perform sync
     */
    async doSync(requestParameters: SystemApiDoSyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.doSyncRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * todo
     * Get app config
     */
    async getConfigRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConfigData>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/config`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConfigDataFromJSON(jsonValue));
    }

    /**
     * todo
     * Get app config
     */
    async getConfig(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConfigData> {
        const response = await this.getConfigRaw(initOverrides);
        return await response.value();
    }

}
