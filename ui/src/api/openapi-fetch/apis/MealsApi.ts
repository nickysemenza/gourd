/* tslint:disable */
/* eslint-disable */
/**
 * Gourd Recipe Database
 * API for https://github.com/nickysemenza/gourd
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n@nickysemenza.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Meal,
    MealFromJSON,
    MealToJSON,
    MealRecipeUpdate,
    MealRecipeUpdateFromJSON,
    MealRecipeUpdateToJSON,
    PaginatedMeals,
    PaginatedMealsFromJSON,
    PaginatedMealsToJSON,
} from '../models';

export interface MealsApiGetMealByIdRequest {
    mealId: string;
}

export interface MealsApiListMealsRequest {
    offset?: number;
    limit?: number;
}

export interface MealsApiUpdateRecipesForMealRequest {
    mealId: string;
    mealRecipeUpdate: MealRecipeUpdate;
}

/**
 * 
 */
export class MealsApi extends runtime.BaseAPI {

    /**
     * todo
     * Info for a specific meal
     */
    async getMealByIdRaw(requestParameters: MealsApiGetMealByIdRequest): Promise<runtime.ApiResponse<Meal>> {
        if (requestParameters.mealId === null || requestParameters.mealId === undefined) {
            throw new runtime.RequiredError('mealId','Required parameter requestParameters.mealId was null or undefined when calling getMealById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/meals/{meal_id}`.replace(`{${"meal_id"}}`, encodeURIComponent(String(requestParameters.mealId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MealFromJSON(jsonValue));
    }

    /**
     * todo
     * Info for a specific meal
     */
    async getMealById(requestParameters: MealsApiGetMealByIdRequest): Promise<Meal> {
        const response = await this.getMealByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * todo
     * List all meals
     */
    async listMealsRaw(requestParameters: MealsApiListMealsRequest): Promise<runtime.ApiResponse<PaginatedMeals>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/meals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedMealsFromJSON(jsonValue));
    }

    /**
     * todo
     * List all meals
     */
    async listMeals(requestParameters: MealsApiListMealsRequest): Promise<PaginatedMeals> {
        const response = await this.listMealsRaw(requestParameters);
        return await response.value();
    }

    /**
     * todo
     * Update the recipes associated with a given meal
     */
    async updateRecipesForMealRaw(requestParameters: MealsApiUpdateRecipesForMealRequest): Promise<runtime.ApiResponse<Meal>> {
        if (requestParameters.mealId === null || requestParameters.mealId === undefined) {
            throw new runtime.RequiredError('mealId','Required parameter requestParameters.mealId was null or undefined when calling updateRecipesForMeal.');
        }

        if (requestParameters.mealRecipeUpdate === null || requestParameters.mealRecipeUpdate === undefined) {
            throw new runtime.RequiredError('mealRecipeUpdate','Required parameter requestParameters.mealRecipeUpdate was null or undefined when calling updateRecipesForMeal.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/meals/{meal_id}/recipes`.replace(`{${"meal_id"}}`, encodeURIComponent(String(requestParameters.mealId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: MealRecipeUpdateToJSON(requestParameters.mealRecipeUpdate),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MealFromJSON(jsonValue));
    }

    /**
     * todo
     * Update the recipes associated with a given meal
     */
    async updateRecipesForMeal(requestParameters: MealsApiUpdateRecipesForMealRequest): Promise<Meal> {
        const response = await this.updateRecipesForMealRaw(requestParameters);
        return await response.value();
    }

}
