// Code generated by SQLBoiler 4.10.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UsdaFoodNutrientSource is an object representing the database table.
type UsdaFoodNutrientSource struct {
	ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Code        null.Int    `boil:"code" json:"code,omitempty" toml:"code" yaml:"code,omitempty"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`

	R *usdaFoodNutrientSourceR `boil:"rel" json:"rel" toml:"rel" yaml:"rel"`
	L usdaFoodNutrientSourceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UsdaFoodNutrientSourceColumns = struct {
	ID          string
	Code        string
	Description string
}{
	ID:          "id",
	Code:        "code",
	Description: "description",
}

var UsdaFoodNutrientSourceTableColumns = struct {
	ID          string
	Code        string
	Description string
}{
	ID:          "usda_food_nutrient_source.id",
	Code:        "usda_food_nutrient_source.code",
	Description: "usda_food_nutrient_source.description",
}

// Generated where

var UsdaFoodNutrientSourceWhere = struct {
	ID          whereHelperint
	Code        whereHelpernull_Int
	Description whereHelpernull_String
}{
	ID:          whereHelperint{field: "\"usda_food_nutrient_source\".\"id\""},
	Code:        whereHelpernull_Int{field: "\"usda_food_nutrient_source\".\"code\""},
	Description: whereHelpernull_String{field: "\"usda_food_nutrient_source\".\"description\""},
}

// UsdaFoodNutrientSourceRels is where relationship names are stored.
var UsdaFoodNutrientSourceRels = struct {
	SourceUsdaFoodNutrientDerivations string
}{
	SourceUsdaFoodNutrientDerivations: "SourceUsdaFoodNutrientDerivations",
}

// usdaFoodNutrientSourceR is where relationships are stored.
type usdaFoodNutrientSourceR struct {
	SourceUsdaFoodNutrientDerivations UsdaFoodNutrientDerivationSlice `boil:"SourceUsdaFoodNutrientDerivations" json:"SourceUsdaFoodNutrientDerivations" toml:"SourceUsdaFoodNutrientDerivations" yaml:"SourceUsdaFoodNutrientDerivations"`
}

// NewStruct creates a new relationship struct
func (*usdaFoodNutrientSourceR) NewStruct() *usdaFoodNutrientSourceR {
	return &usdaFoodNutrientSourceR{}
}

// usdaFoodNutrientSourceL is where Load methods for each relationship are stored.
type usdaFoodNutrientSourceL struct{}

var (
	usdaFoodNutrientSourceAllColumns            = []string{"id", "code", "description"}
	usdaFoodNutrientSourceColumnsWithoutDefault = []string{"id"}
	usdaFoodNutrientSourceColumnsWithDefault    = []string{"code", "description"}
	usdaFoodNutrientSourcePrimaryKeyColumns     = []string{"id"}
	usdaFoodNutrientSourceGeneratedColumns      = []string{}
)

type (
	// UsdaFoodNutrientSourceSlice is an alias for a slice of pointers to UsdaFoodNutrientSource.
	// This should almost always be used instead of []UsdaFoodNutrientSource.
	UsdaFoodNutrientSourceSlice []*UsdaFoodNutrientSource
	// UsdaFoodNutrientSourceHook is the signature for custom UsdaFoodNutrientSource hook methods
	UsdaFoodNutrientSourceHook func(context.Context, boil.ContextExecutor, *UsdaFoodNutrientSource) error

	usdaFoodNutrientSourceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usdaFoodNutrientSourceType                 = reflect.TypeOf(&UsdaFoodNutrientSource{})
	usdaFoodNutrientSourceMapping              = queries.MakeStructMapping(usdaFoodNutrientSourceType)
	usdaFoodNutrientSourcePrimaryKeyMapping, _ = queries.BindMapping(usdaFoodNutrientSourceType, usdaFoodNutrientSourceMapping, usdaFoodNutrientSourcePrimaryKeyColumns)
	usdaFoodNutrientSourceInsertCacheMut       sync.RWMutex
	usdaFoodNutrientSourceInsertCache          = make(map[string]insertCache)
	usdaFoodNutrientSourceUpdateCacheMut       sync.RWMutex
	usdaFoodNutrientSourceUpdateCache          = make(map[string]updateCache)
	usdaFoodNutrientSourceUpsertCacheMut       sync.RWMutex
	usdaFoodNutrientSourceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var usdaFoodNutrientSourceAfterSelectHooks []UsdaFoodNutrientSourceHook

var usdaFoodNutrientSourceBeforeInsertHooks []UsdaFoodNutrientSourceHook
var usdaFoodNutrientSourceAfterInsertHooks []UsdaFoodNutrientSourceHook

var usdaFoodNutrientSourceBeforeUpdateHooks []UsdaFoodNutrientSourceHook
var usdaFoodNutrientSourceAfterUpdateHooks []UsdaFoodNutrientSourceHook

var usdaFoodNutrientSourceBeforeDeleteHooks []UsdaFoodNutrientSourceHook
var usdaFoodNutrientSourceAfterDeleteHooks []UsdaFoodNutrientSourceHook

var usdaFoodNutrientSourceBeforeUpsertHooks []UsdaFoodNutrientSourceHook
var usdaFoodNutrientSourceAfterUpsertHooks []UsdaFoodNutrientSourceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UsdaFoodNutrientSource) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientSourceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UsdaFoodNutrientSource) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientSourceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UsdaFoodNutrientSource) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientSourceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UsdaFoodNutrientSource) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientSourceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UsdaFoodNutrientSource) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientSourceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UsdaFoodNutrientSource) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientSourceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UsdaFoodNutrientSource) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientSourceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UsdaFoodNutrientSource) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientSourceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UsdaFoodNutrientSource) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientSourceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUsdaFoodNutrientSourceHook registers your hook function for all future operations.
func AddUsdaFoodNutrientSourceHook(hookPoint boil.HookPoint, usdaFoodNutrientSourceHook UsdaFoodNutrientSourceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		usdaFoodNutrientSourceAfterSelectHooks = append(usdaFoodNutrientSourceAfterSelectHooks, usdaFoodNutrientSourceHook)
	case boil.BeforeInsertHook:
		usdaFoodNutrientSourceBeforeInsertHooks = append(usdaFoodNutrientSourceBeforeInsertHooks, usdaFoodNutrientSourceHook)
	case boil.AfterInsertHook:
		usdaFoodNutrientSourceAfterInsertHooks = append(usdaFoodNutrientSourceAfterInsertHooks, usdaFoodNutrientSourceHook)
	case boil.BeforeUpdateHook:
		usdaFoodNutrientSourceBeforeUpdateHooks = append(usdaFoodNutrientSourceBeforeUpdateHooks, usdaFoodNutrientSourceHook)
	case boil.AfterUpdateHook:
		usdaFoodNutrientSourceAfterUpdateHooks = append(usdaFoodNutrientSourceAfterUpdateHooks, usdaFoodNutrientSourceHook)
	case boil.BeforeDeleteHook:
		usdaFoodNutrientSourceBeforeDeleteHooks = append(usdaFoodNutrientSourceBeforeDeleteHooks, usdaFoodNutrientSourceHook)
	case boil.AfterDeleteHook:
		usdaFoodNutrientSourceAfterDeleteHooks = append(usdaFoodNutrientSourceAfterDeleteHooks, usdaFoodNutrientSourceHook)
	case boil.BeforeUpsertHook:
		usdaFoodNutrientSourceBeforeUpsertHooks = append(usdaFoodNutrientSourceBeforeUpsertHooks, usdaFoodNutrientSourceHook)
	case boil.AfterUpsertHook:
		usdaFoodNutrientSourceAfterUpsertHooks = append(usdaFoodNutrientSourceAfterUpsertHooks, usdaFoodNutrientSourceHook)
	}
}

// One returns a single usdaFoodNutrientSource record from the query.
func (q usdaFoodNutrientSourceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UsdaFoodNutrientSource, error) {
	o := &UsdaFoodNutrientSource{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for usda_food_nutrient_source")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UsdaFoodNutrientSource records from the query.
func (q usdaFoodNutrientSourceQuery) All(ctx context.Context, exec boil.ContextExecutor) (UsdaFoodNutrientSourceSlice, error) {
	var o []*UsdaFoodNutrientSource

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UsdaFoodNutrientSource slice")
	}

	if len(usdaFoodNutrientSourceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UsdaFoodNutrientSource records in the query.
func (q usdaFoodNutrientSourceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count usda_food_nutrient_source rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q usdaFoodNutrientSourceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if usda_food_nutrient_source exists")
	}

	return count > 0, nil
}

// SourceUsdaFoodNutrientDerivations retrieves all the usda_food_nutrient_derivation's UsdaFoodNutrientDerivations with an executor via source_id column.
func (o *UsdaFoodNutrientSource) SourceUsdaFoodNutrientDerivations(mods ...qm.QueryMod) usdaFoodNutrientDerivationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"usda_food_nutrient_derivation\".\"source_id\"=?", o.ID),
	)

	return UsdaFoodNutrientDerivations(queryMods...)
}

// LoadSourceUsdaFoodNutrientDerivations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (usdaFoodNutrientSourceL) LoadSourceUsdaFoodNutrientDerivations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsdaFoodNutrientSource interface{}, mods queries.Applicator) error {
	var slice []*UsdaFoodNutrientSource
	var object *UsdaFoodNutrientSource

	if singular {
		object = maybeUsdaFoodNutrientSource.(*UsdaFoodNutrientSource)
	} else {
		slice = *maybeUsdaFoodNutrientSource.(*[]*UsdaFoodNutrientSource)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &usdaFoodNutrientSourceR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usdaFoodNutrientSourceR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`usda_food_nutrient_derivation`),
		qm.WhereIn(`usda_food_nutrient_derivation.source_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load usda_food_nutrient_derivation")
	}

	var resultSlice []*UsdaFoodNutrientDerivation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice usda_food_nutrient_derivation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on usda_food_nutrient_derivation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usda_food_nutrient_derivation")
	}

	if len(usdaFoodNutrientDerivationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SourceUsdaFoodNutrientDerivations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &usdaFoodNutrientDerivationR{}
			}
			foreign.R.Source = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SourceID) {
				local.R.SourceUsdaFoodNutrientDerivations = append(local.R.SourceUsdaFoodNutrientDerivations, foreign)
				if foreign.R == nil {
					foreign.R = &usdaFoodNutrientDerivationR{}
				}
				foreign.R.Source = local
				break
			}
		}
	}

	return nil
}

// AddSourceUsdaFoodNutrientDerivations adds the given related objects to the existing relationships
// of the usda_food_nutrient_source, optionally inserting them as new records.
// Appends related to o.R.SourceUsdaFoodNutrientDerivations.
// Sets related.R.Source appropriately.
func (o *UsdaFoodNutrientSource) AddSourceUsdaFoodNutrientDerivations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UsdaFoodNutrientDerivation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SourceID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"usda_food_nutrient_derivation\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"source_id"}),
				strmangle.WhereClause("\"", "\"", 2, usdaFoodNutrientDerivationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SourceID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &usdaFoodNutrientSourceR{
			SourceUsdaFoodNutrientDerivations: related,
		}
	} else {
		o.R.SourceUsdaFoodNutrientDerivations = append(o.R.SourceUsdaFoodNutrientDerivations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &usdaFoodNutrientDerivationR{
				Source: o,
			}
		} else {
			rel.R.Source = o
		}
	}
	return nil
}

// SetSourceUsdaFoodNutrientDerivations removes all previously related items of the
// usda_food_nutrient_source replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Source's SourceUsdaFoodNutrientDerivations accordingly.
// Replaces o.R.SourceUsdaFoodNutrientDerivations with related.
// Sets related.R.Source's SourceUsdaFoodNutrientDerivations accordingly.
func (o *UsdaFoodNutrientSource) SetSourceUsdaFoodNutrientDerivations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UsdaFoodNutrientDerivation) error {
	query := "update \"usda_food_nutrient_derivation\" set \"source_id\" = null where \"source_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SourceUsdaFoodNutrientDerivations {
			queries.SetScanner(&rel.SourceID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Source = nil
		}
		o.R.SourceUsdaFoodNutrientDerivations = nil
	}

	return o.AddSourceUsdaFoodNutrientDerivations(ctx, exec, insert, related...)
}

// RemoveSourceUsdaFoodNutrientDerivations relationships from objects passed in.
// Removes related items from R.SourceUsdaFoodNutrientDerivations (uses pointer comparison, removal does not keep order)
// Sets related.R.Source.
func (o *UsdaFoodNutrientSource) RemoveSourceUsdaFoodNutrientDerivations(ctx context.Context, exec boil.ContextExecutor, related ...*UsdaFoodNutrientDerivation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SourceID, nil)
		if rel.R != nil {
			rel.R.Source = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("source_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SourceUsdaFoodNutrientDerivations {
			if rel != ri {
				continue
			}

			ln := len(o.R.SourceUsdaFoodNutrientDerivations)
			if ln > 1 && i < ln-1 {
				o.R.SourceUsdaFoodNutrientDerivations[i] = o.R.SourceUsdaFoodNutrientDerivations[ln-1]
			}
			o.R.SourceUsdaFoodNutrientDerivations = o.R.SourceUsdaFoodNutrientDerivations[:ln-1]
			break
		}
	}

	return nil
}

// UsdaFoodNutrientSources retrieves all the records using an executor.
func UsdaFoodNutrientSources(mods ...qm.QueryMod) usdaFoodNutrientSourceQuery {
	mods = append(mods, qm.From("\"usda_food_nutrient_source\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"usda_food_nutrient_source\".*"})
	}

	return usdaFoodNutrientSourceQuery{q}
}

// FindUsdaFoodNutrientSource retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUsdaFoodNutrientSource(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UsdaFoodNutrientSource, error) {
	usdaFoodNutrientSourceObj := &UsdaFoodNutrientSource{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"usda_food_nutrient_source\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, usdaFoodNutrientSourceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from usda_food_nutrient_source")
	}

	if err = usdaFoodNutrientSourceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return usdaFoodNutrientSourceObj, err
	}

	return usdaFoodNutrientSourceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UsdaFoodNutrientSource) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no usda_food_nutrient_source provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaFoodNutrientSourceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	usdaFoodNutrientSourceInsertCacheMut.RLock()
	cache, cached := usdaFoodNutrientSourceInsertCache[key]
	usdaFoodNutrientSourceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			usdaFoodNutrientSourceAllColumns,
			usdaFoodNutrientSourceColumnsWithDefault,
			usdaFoodNutrientSourceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(usdaFoodNutrientSourceType, usdaFoodNutrientSourceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(usdaFoodNutrientSourceType, usdaFoodNutrientSourceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"usda_food_nutrient_source\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"usda_food_nutrient_source\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into usda_food_nutrient_source")
	}

	if !cached {
		usdaFoodNutrientSourceInsertCacheMut.Lock()
		usdaFoodNutrientSourceInsertCache[key] = cache
		usdaFoodNutrientSourceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UsdaFoodNutrientSource.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UsdaFoodNutrientSource) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	usdaFoodNutrientSourceUpdateCacheMut.RLock()
	cache, cached := usdaFoodNutrientSourceUpdateCache[key]
	usdaFoodNutrientSourceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			usdaFoodNutrientSourceAllColumns,
			usdaFoodNutrientSourcePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update usda_food_nutrient_source, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"usda_food_nutrient_source\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, usdaFoodNutrientSourcePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(usdaFoodNutrientSourceType, usdaFoodNutrientSourceMapping, append(wl, usdaFoodNutrientSourcePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update usda_food_nutrient_source row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for usda_food_nutrient_source")
	}

	if !cached {
		usdaFoodNutrientSourceUpdateCacheMut.Lock()
		usdaFoodNutrientSourceUpdateCache[key] = cache
		usdaFoodNutrientSourceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q usdaFoodNutrientSourceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for usda_food_nutrient_source")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for usda_food_nutrient_source")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UsdaFoodNutrientSourceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaFoodNutrientSourcePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"usda_food_nutrient_source\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, usdaFoodNutrientSourcePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in usdaFoodNutrientSource slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all usdaFoodNutrientSource")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UsdaFoodNutrientSource) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no usda_food_nutrient_source provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaFoodNutrientSourceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	usdaFoodNutrientSourceUpsertCacheMut.RLock()
	cache, cached := usdaFoodNutrientSourceUpsertCache[key]
	usdaFoodNutrientSourceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			usdaFoodNutrientSourceAllColumns,
			usdaFoodNutrientSourceColumnsWithDefault,
			usdaFoodNutrientSourceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			usdaFoodNutrientSourceAllColumns,
			usdaFoodNutrientSourcePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert usda_food_nutrient_source, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(usdaFoodNutrientSourcePrimaryKeyColumns))
			copy(conflict, usdaFoodNutrientSourcePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"usda_food_nutrient_source\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(usdaFoodNutrientSourceType, usdaFoodNutrientSourceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(usdaFoodNutrientSourceType, usdaFoodNutrientSourceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert usda_food_nutrient_source")
	}

	if !cached {
		usdaFoodNutrientSourceUpsertCacheMut.Lock()
		usdaFoodNutrientSourceUpsertCache[key] = cache
		usdaFoodNutrientSourceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UsdaFoodNutrientSource record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UsdaFoodNutrientSource) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UsdaFoodNutrientSource provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), usdaFoodNutrientSourcePrimaryKeyMapping)
	sql := "DELETE FROM \"usda_food_nutrient_source\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from usda_food_nutrient_source")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for usda_food_nutrient_source")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q usdaFoodNutrientSourceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no usdaFoodNutrientSourceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from usda_food_nutrient_source")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for usda_food_nutrient_source")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UsdaFoodNutrientSourceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(usdaFoodNutrientSourceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaFoodNutrientSourcePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"usda_food_nutrient_source\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaFoodNutrientSourcePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from usdaFoodNutrientSource slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for usda_food_nutrient_source")
	}

	if len(usdaFoodNutrientSourceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UsdaFoodNutrientSource) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUsdaFoodNutrientSource(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsdaFoodNutrientSourceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UsdaFoodNutrientSourceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaFoodNutrientSourcePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"usda_food_nutrient_source\".* FROM \"usda_food_nutrient_source\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaFoodNutrientSourcePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UsdaFoodNutrientSourceSlice")
	}

	*o = slice

	return nil
}

// UsdaFoodNutrientSourceExists checks if the UsdaFoodNutrientSource row exists.
func UsdaFoodNutrientSourceExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"usda_food_nutrient_source\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if usda_food_nutrient_source exists")
	}

	return exists, nil
}
