// Code generated by SQLBoiler 4.8.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRecipeDetails(t *testing.T) {
	t.Parallel()

	query := RecipeDetails()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRecipeDetailsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeDetail{}
	if err = randomize.Struct(seed, o, recipeDetailDBTypes, true, recipeDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecipeDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecipeDetailsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeDetail{}
	if err = randomize.Struct(seed, o, recipeDetailDBTypes, true, recipeDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RecipeDetails().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecipeDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecipeDetailsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeDetail{}
	if err = randomize.Struct(seed, o, recipeDetailDBTypes, true, recipeDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RecipeDetailSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecipeDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecipeDetailsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeDetail{}
	if err = randomize.Struct(seed, o, recipeDetailDBTypes, true, recipeDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RecipeDetailExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if RecipeDetail exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RecipeDetailExists to return true, but got false.")
	}
}

func testRecipeDetailsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeDetail{}
	if err = randomize.Struct(seed, o, recipeDetailDBTypes, true, recipeDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	recipeDetailFound, err := FindRecipeDetail(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if recipeDetailFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRecipeDetailsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeDetail{}
	if err = randomize.Struct(seed, o, recipeDetailDBTypes, true, recipeDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RecipeDetails().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRecipeDetailsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeDetail{}
	if err = randomize.Struct(seed, o, recipeDetailDBTypes, true, recipeDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RecipeDetails().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRecipeDetailsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	recipeDetailOne := &RecipeDetail{}
	recipeDetailTwo := &RecipeDetail{}
	if err = randomize.Struct(seed, recipeDetailOne, recipeDetailDBTypes, false, recipeDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeDetail struct: %s", err)
	}
	if err = randomize.Struct(seed, recipeDetailTwo, recipeDetailDBTypes, false, recipeDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = recipeDetailOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = recipeDetailTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RecipeDetails().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRecipeDetailsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	recipeDetailOne := &RecipeDetail{}
	recipeDetailTwo := &RecipeDetail{}
	if err = randomize.Struct(seed, recipeDetailOne, recipeDetailDBTypes, false, recipeDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeDetail struct: %s", err)
	}
	if err = randomize.Struct(seed, recipeDetailTwo, recipeDetailDBTypes, false, recipeDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = recipeDetailOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = recipeDetailTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecipeDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func recipeDetailBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RecipeDetail) error {
	*o = RecipeDetail{}
	return nil
}

func recipeDetailAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RecipeDetail) error {
	*o = RecipeDetail{}
	return nil
}

func recipeDetailAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RecipeDetail) error {
	*o = RecipeDetail{}
	return nil
}

func recipeDetailBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RecipeDetail) error {
	*o = RecipeDetail{}
	return nil
}

func recipeDetailAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RecipeDetail) error {
	*o = RecipeDetail{}
	return nil
}

func recipeDetailBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RecipeDetail) error {
	*o = RecipeDetail{}
	return nil
}

func recipeDetailAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RecipeDetail) error {
	*o = RecipeDetail{}
	return nil
}

func recipeDetailBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RecipeDetail) error {
	*o = RecipeDetail{}
	return nil
}

func recipeDetailAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RecipeDetail) error {
	*o = RecipeDetail{}
	return nil
}

func testRecipeDetailsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RecipeDetail{}
	o := &RecipeDetail{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, recipeDetailDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RecipeDetail object: %s", err)
	}

	AddRecipeDetailHook(boil.BeforeInsertHook, recipeDetailBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	recipeDetailBeforeInsertHooks = []RecipeDetailHook{}

	AddRecipeDetailHook(boil.AfterInsertHook, recipeDetailAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	recipeDetailAfterInsertHooks = []RecipeDetailHook{}

	AddRecipeDetailHook(boil.AfterSelectHook, recipeDetailAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	recipeDetailAfterSelectHooks = []RecipeDetailHook{}

	AddRecipeDetailHook(boil.BeforeUpdateHook, recipeDetailBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	recipeDetailBeforeUpdateHooks = []RecipeDetailHook{}

	AddRecipeDetailHook(boil.AfterUpdateHook, recipeDetailAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	recipeDetailAfterUpdateHooks = []RecipeDetailHook{}

	AddRecipeDetailHook(boil.BeforeDeleteHook, recipeDetailBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	recipeDetailBeforeDeleteHooks = []RecipeDetailHook{}

	AddRecipeDetailHook(boil.AfterDeleteHook, recipeDetailAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	recipeDetailAfterDeleteHooks = []RecipeDetailHook{}

	AddRecipeDetailHook(boil.BeforeUpsertHook, recipeDetailBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	recipeDetailBeforeUpsertHooks = []RecipeDetailHook{}

	AddRecipeDetailHook(boil.AfterUpsertHook, recipeDetailAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	recipeDetailAfterUpsertHooks = []RecipeDetailHook{}
}

func testRecipeDetailsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeDetail{}
	if err = randomize.Struct(seed, o, recipeDetailDBTypes, true, recipeDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecipeDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRecipeDetailsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeDetail{}
	if err = randomize.Struct(seed, o, recipeDetailDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RecipeDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(recipeDetailColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RecipeDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRecipeDetailToManyRecipeSections(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RecipeDetail
	var b, c RecipeSection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recipeDetailDBTypes, true, recipeDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeDetail struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, recipeSectionDBTypes, false, recipeSectionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, recipeSectionDBTypes, false, recipeSectionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.RecipeDetail = a.ID
	c.RecipeDetail = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.RecipeSections().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.RecipeDetail == b.RecipeDetail {
			bFound = true
		}
		if v.RecipeDetail == c.RecipeDetail {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RecipeDetailSlice{&a}
	if err = a.L.LoadRecipeSections(ctx, tx, false, (*[]*RecipeDetail)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RecipeSections); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RecipeSections = nil
	if err = a.L.LoadRecipeSections(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RecipeSections); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRecipeDetailToManyAddOpRecipeSections(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RecipeDetail
	var b, c, d, e RecipeSection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recipeDetailDBTypes, false, strmangle.SetComplement(recipeDetailPrimaryKeyColumns, recipeDetailColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RecipeSection{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, recipeSectionDBTypes, false, strmangle.SetComplement(recipeSectionPrimaryKeyColumns, recipeSectionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*RecipeSection{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRecipeSections(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.RecipeDetail {
			t.Error("foreign key was wrong value", a.ID, first.RecipeDetail)
		}
		if a.ID != second.RecipeDetail {
			t.Error("foreign key was wrong value", a.ID, second.RecipeDetail)
		}

		if first.R.RecipeSectionRecipeDetail != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.RecipeSectionRecipeDetail != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RecipeSections[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RecipeSections[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RecipeSections().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testRecipeDetailToOneRecipeUsingRecipe(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RecipeDetail
	var foreign Recipe

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, recipeDetailDBTypes, false, recipeDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeDetail struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, recipeDBTypes, false, recipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Recipe struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.RecipeID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Recipe().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RecipeDetailSlice{&local}
	if err = local.L.LoadRecipe(ctx, tx, false, (*[]*RecipeDetail)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Recipe == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Recipe = nil
	if err = local.L.LoadRecipe(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Recipe == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRecipeDetailToOneSetOpRecipeUsingRecipe(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RecipeDetail
	var b, c Recipe

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recipeDetailDBTypes, false, strmangle.SetComplement(recipeDetailPrimaryKeyColumns, recipeDetailColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, recipeDBTypes, false, strmangle.SetComplement(recipePrimaryKeyColumns, recipeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, recipeDBTypes, false, strmangle.SetComplement(recipePrimaryKeyColumns, recipeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Recipe{&b, &c} {
		err = a.SetRecipe(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Recipe != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RecipeDetails[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RecipeID != x.ID {
			t.Error("foreign key was wrong value", a.RecipeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RecipeID))
		reflect.Indirect(reflect.ValueOf(&a.RecipeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RecipeID != x.ID {
			t.Error("foreign key was wrong value", a.RecipeID, x.ID)
		}
	}
}

func testRecipeDetailsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeDetail{}
	if err = randomize.Struct(seed, o, recipeDetailDBTypes, true, recipeDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRecipeDetailsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeDetail{}
	if err = randomize.Struct(seed, o, recipeDetailDBTypes, true, recipeDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RecipeDetailSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRecipeDetailsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeDetail{}
	if err = randomize.Struct(seed, o, recipeDetailDBTypes, true, recipeDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RecipeDetails().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	recipeDetailDBTypes = map[string]string{`ID`: `text`, `RecipeID`: `text`, `Name`: `text`, `Equipment`: `text`, `Source`: `jsonb`, `Servings`: `integer`, `Quantity`: `integer`, `Unit`: `text`, `Version`: `integer`, `IsLatestVersion`: `boolean`, `CreatedAt`: `timestamp without time zone`}
	_                   = bytes.MinRead
)

func testRecipeDetailsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(recipeDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(recipeDetailAllColumns) == len(recipeDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RecipeDetail{}
	if err = randomize.Struct(seed, o, recipeDetailDBTypes, true, recipeDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecipeDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, recipeDetailDBTypes, true, recipeDetailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecipeDetail struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRecipeDetailsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(recipeDetailAllColumns) == len(recipeDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RecipeDetail{}
	if err = randomize.Struct(seed, o, recipeDetailDBTypes, true, recipeDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecipeDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, recipeDetailDBTypes, true, recipeDetailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecipeDetail struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(recipeDetailAllColumns, recipeDetailPrimaryKeyColumns) {
		fields = recipeDetailAllColumns
	} else {
		fields = strmangle.SetComplement(
			recipeDetailAllColumns,
			recipeDetailPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RecipeDetailSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRecipeDetailsUpsert(t *testing.T) {
	t.Parallel()

	if len(recipeDetailAllColumns) == len(recipeDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RecipeDetail{}
	if err = randomize.Struct(seed, &o, recipeDetailDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RecipeDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RecipeDetail: %s", err)
	}

	count, err := RecipeDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, recipeDetailDBTypes, false, recipeDetailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecipeDetail struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RecipeDetail: %s", err)
	}

	count, err = RecipeDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
