// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UsdaSubSampleResult is an object representing the database table.
type UsdaSubSampleResult struct {
	FoodNutrientID int          `boil:"food_nutrient_id" json:"food_nutrient_id" toml:"food_nutrient_id" yaml:"food_nutrient_id"`
	AdjustedAmount null.Float32 `boil:"adjusted_amount" json:"adjusted_amount,omitempty" toml:"adjusted_amount" yaml:"adjusted_amount,omitempty"`
	LabMethodID    null.Int     `boil:"lab_method_id" json:"lab_method_id,omitempty" toml:"lab_method_id" yaml:"lab_method_id,omitempty"`
	NutrientName   null.String  `boil:"nutrient_name" json:"nutrient_name,omitempty" toml:"nutrient_name" yaml:"nutrient_name,omitempty"`

	R *usdaSubSampleResultR `boil:"rel" json:"rel" toml:"rel" yaml:"rel"`
	L usdaSubSampleResultL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UsdaSubSampleResultColumns = struct {
	FoodNutrientID string
	AdjustedAmount string
	LabMethodID    string
	NutrientName   string
}{
	FoodNutrientID: "food_nutrient_id",
	AdjustedAmount: "adjusted_amount",
	LabMethodID:    "lab_method_id",
	NutrientName:   "nutrient_name",
}

var UsdaSubSampleResultTableColumns = struct {
	FoodNutrientID string
	AdjustedAmount string
	LabMethodID    string
	NutrientName   string
}{
	FoodNutrientID: "usda_sub_sample_result.food_nutrient_id",
	AdjustedAmount: "usda_sub_sample_result.adjusted_amount",
	LabMethodID:    "usda_sub_sample_result.lab_method_id",
	NutrientName:   "usda_sub_sample_result.nutrient_name",
}

// Generated where

var UsdaSubSampleResultWhere = struct {
	FoodNutrientID whereHelperint
	AdjustedAmount whereHelpernull_Float32
	LabMethodID    whereHelpernull_Int
	NutrientName   whereHelpernull_String
}{
	FoodNutrientID: whereHelperint{field: "\"usda_sub_sample_result\".\"food_nutrient_id\""},
	AdjustedAmount: whereHelpernull_Float32{field: "\"usda_sub_sample_result\".\"adjusted_amount\""},
	LabMethodID:    whereHelpernull_Int{field: "\"usda_sub_sample_result\".\"lab_method_id\""},
	NutrientName:   whereHelpernull_String{field: "\"usda_sub_sample_result\".\"nutrient_name\""},
}

// UsdaSubSampleResultRels is where relationship names are stored.
var UsdaSubSampleResultRels = struct {
	FoodNutrient string
	LabMethod    string
}{
	FoodNutrient: "FoodNutrient",
	LabMethod:    "LabMethod",
}

// usdaSubSampleResultR is where relationships are stored.
type usdaSubSampleResultR struct {
	FoodNutrient *UsdaFoodNutrient `boil:"FoodNutrient" json:"FoodNutrient" toml:"FoodNutrient" yaml:"FoodNutrient"`
	LabMethod    *UsdaLabMethod    `boil:"LabMethod" json:"LabMethod" toml:"LabMethod" yaml:"LabMethod"`
}

// NewStruct creates a new relationship struct
func (*usdaSubSampleResultR) NewStruct() *usdaSubSampleResultR {
	return &usdaSubSampleResultR{}
}

// usdaSubSampleResultL is where Load methods for each relationship are stored.
type usdaSubSampleResultL struct{}

var (
	usdaSubSampleResultAllColumns            = []string{"food_nutrient_id", "adjusted_amount", "lab_method_id", "nutrient_name"}
	usdaSubSampleResultColumnsWithoutDefault = []string{"food_nutrient_id", "adjusted_amount", "lab_method_id", "nutrient_name"}
	usdaSubSampleResultColumnsWithDefault    = []string{}
	usdaSubSampleResultPrimaryKeyColumns     = []string{"food_nutrient_id"}
	usdaSubSampleResultGeneratedColumns      = []string{}
)

type (
	// UsdaSubSampleResultSlice is an alias for a slice of pointers to UsdaSubSampleResult.
	// This should almost always be used instead of []UsdaSubSampleResult.
	UsdaSubSampleResultSlice []*UsdaSubSampleResult
	// UsdaSubSampleResultHook is the signature for custom UsdaSubSampleResult hook methods
	UsdaSubSampleResultHook func(context.Context, boil.ContextExecutor, *UsdaSubSampleResult) error

	usdaSubSampleResultQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usdaSubSampleResultType                 = reflect.TypeOf(&UsdaSubSampleResult{})
	usdaSubSampleResultMapping              = queries.MakeStructMapping(usdaSubSampleResultType)
	usdaSubSampleResultPrimaryKeyMapping, _ = queries.BindMapping(usdaSubSampleResultType, usdaSubSampleResultMapping, usdaSubSampleResultPrimaryKeyColumns)
	usdaSubSampleResultInsertCacheMut       sync.RWMutex
	usdaSubSampleResultInsertCache          = make(map[string]insertCache)
	usdaSubSampleResultUpdateCacheMut       sync.RWMutex
	usdaSubSampleResultUpdateCache          = make(map[string]updateCache)
	usdaSubSampleResultUpsertCacheMut       sync.RWMutex
	usdaSubSampleResultUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var usdaSubSampleResultAfterSelectHooks []UsdaSubSampleResultHook

var usdaSubSampleResultBeforeInsertHooks []UsdaSubSampleResultHook
var usdaSubSampleResultAfterInsertHooks []UsdaSubSampleResultHook

var usdaSubSampleResultBeforeUpdateHooks []UsdaSubSampleResultHook
var usdaSubSampleResultAfterUpdateHooks []UsdaSubSampleResultHook

var usdaSubSampleResultBeforeDeleteHooks []UsdaSubSampleResultHook
var usdaSubSampleResultAfterDeleteHooks []UsdaSubSampleResultHook

var usdaSubSampleResultBeforeUpsertHooks []UsdaSubSampleResultHook
var usdaSubSampleResultAfterUpsertHooks []UsdaSubSampleResultHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UsdaSubSampleResult) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaSubSampleResultAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UsdaSubSampleResult) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaSubSampleResultBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UsdaSubSampleResult) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaSubSampleResultAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UsdaSubSampleResult) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaSubSampleResultBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UsdaSubSampleResult) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaSubSampleResultAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UsdaSubSampleResult) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaSubSampleResultBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UsdaSubSampleResult) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaSubSampleResultAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UsdaSubSampleResult) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaSubSampleResultBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UsdaSubSampleResult) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaSubSampleResultAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUsdaSubSampleResultHook registers your hook function for all future operations.
func AddUsdaSubSampleResultHook(hookPoint boil.HookPoint, usdaSubSampleResultHook UsdaSubSampleResultHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		usdaSubSampleResultAfterSelectHooks = append(usdaSubSampleResultAfterSelectHooks, usdaSubSampleResultHook)
	case boil.BeforeInsertHook:
		usdaSubSampleResultBeforeInsertHooks = append(usdaSubSampleResultBeforeInsertHooks, usdaSubSampleResultHook)
	case boil.AfterInsertHook:
		usdaSubSampleResultAfterInsertHooks = append(usdaSubSampleResultAfterInsertHooks, usdaSubSampleResultHook)
	case boil.BeforeUpdateHook:
		usdaSubSampleResultBeforeUpdateHooks = append(usdaSubSampleResultBeforeUpdateHooks, usdaSubSampleResultHook)
	case boil.AfterUpdateHook:
		usdaSubSampleResultAfterUpdateHooks = append(usdaSubSampleResultAfterUpdateHooks, usdaSubSampleResultHook)
	case boil.BeforeDeleteHook:
		usdaSubSampleResultBeforeDeleteHooks = append(usdaSubSampleResultBeforeDeleteHooks, usdaSubSampleResultHook)
	case boil.AfterDeleteHook:
		usdaSubSampleResultAfterDeleteHooks = append(usdaSubSampleResultAfterDeleteHooks, usdaSubSampleResultHook)
	case boil.BeforeUpsertHook:
		usdaSubSampleResultBeforeUpsertHooks = append(usdaSubSampleResultBeforeUpsertHooks, usdaSubSampleResultHook)
	case boil.AfterUpsertHook:
		usdaSubSampleResultAfterUpsertHooks = append(usdaSubSampleResultAfterUpsertHooks, usdaSubSampleResultHook)
	}
}

// One returns a single usdaSubSampleResult record from the query.
func (q usdaSubSampleResultQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UsdaSubSampleResult, error) {
	o := &UsdaSubSampleResult{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for usda_sub_sample_result")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UsdaSubSampleResult records from the query.
func (q usdaSubSampleResultQuery) All(ctx context.Context, exec boil.ContextExecutor) (UsdaSubSampleResultSlice, error) {
	var o []*UsdaSubSampleResult

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UsdaSubSampleResult slice")
	}

	if len(usdaSubSampleResultAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UsdaSubSampleResult records in the query.
func (q usdaSubSampleResultQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count usda_sub_sample_result rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q usdaSubSampleResultQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if usda_sub_sample_result exists")
	}

	return count > 0, nil
}

// FoodNutrient pointed to by the foreign key.
func (o *UsdaSubSampleResult) FoodNutrient(mods ...qm.QueryMod) usdaFoodNutrientQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FoodNutrientID),
	}

	queryMods = append(queryMods, mods...)

	query := UsdaFoodNutrients(queryMods...)
	queries.SetFrom(query.Query, "\"usda_food_nutrient\"")

	return query
}

// LabMethod pointed to by the foreign key.
func (o *UsdaSubSampleResult) LabMethod(mods ...qm.QueryMod) usdaLabMethodQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LabMethodID),
	}

	queryMods = append(queryMods, mods...)

	query := UsdaLabMethods(queryMods...)
	queries.SetFrom(query.Query, "\"usda_lab_method\"")

	return query
}

// LoadFoodNutrient allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (usdaSubSampleResultL) LoadFoodNutrient(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsdaSubSampleResult interface{}, mods queries.Applicator) error {
	var slice []*UsdaSubSampleResult
	var object *UsdaSubSampleResult

	if singular {
		object = maybeUsdaSubSampleResult.(*UsdaSubSampleResult)
	} else {
		slice = *maybeUsdaSubSampleResult.(*[]*UsdaSubSampleResult)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &usdaSubSampleResultR{}
		}
		args = append(args, object.FoodNutrientID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usdaSubSampleResultR{}
			}

			for _, a := range args {
				if a == obj.FoodNutrientID {
					continue Outer
				}
			}

			args = append(args, obj.FoodNutrientID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`usda_food_nutrient`),
		qm.WhereIn(`usda_food_nutrient.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UsdaFoodNutrient")
	}

	var resultSlice []*UsdaFoodNutrient
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UsdaFoodNutrient")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for usda_food_nutrient")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usda_food_nutrient")
	}

	if len(usdaSubSampleResultAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FoodNutrient = foreign
		if foreign.R == nil {
			foreign.R = &usdaFoodNutrientR{}
		}
		foreign.R.FoodNutrientUsdaSubSampleResult = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FoodNutrientID == foreign.ID {
				local.R.FoodNutrient = foreign
				if foreign.R == nil {
					foreign.R = &usdaFoodNutrientR{}
				}
				foreign.R.FoodNutrientUsdaSubSampleResult = local
				break
			}
		}
	}

	return nil
}

// LoadLabMethod allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (usdaSubSampleResultL) LoadLabMethod(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsdaSubSampleResult interface{}, mods queries.Applicator) error {
	var slice []*UsdaSubSampleResult
	var object *UsdaSubSampleResult

	if singular {
		object = maybeUsdaSubSampleResult.(*UsdaSubSampleResult)
	} else {
		slice = *maybeUsdaSubSampleResult.(*[]*UsdaSubSampleResult)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &usdaSubSampleResultR{}
		}
		if !queries.IsNil(object.LabMethodID) {
			args = append(args, object.LabMethodID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usdaSubSampleResultR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.LabMethodID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.LabMethodID) {
				args = append(args, obj.LabMethodID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`usda_lab_method`),
		qm.WhereIn(`usda_lab_method.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UsdaLabMethod")
	}

	var resultSlice []*UsdaLabMethod
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UsdaLabMethod")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for usda_lab_method")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usda_lab_method")
	}

	if len(usdaSubSampleResultAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.LabMethod = foreign
		if foreign.R == nil {
			foreign.R = &usdaLabMethodR{}
		}
		foreign.R.LabMethodUsdaSubSampleResults = append(foreign.R.LabMethodUsdaSubSampleResults, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.LabMethodID, foreign.ID) {
				local.R.LabMethod = foreign
				if foreign.R == nil {
					foreign.R = &usdaLabMethodR{}
				}
				foreign.R.LabMethodUsdaSubSampleResults = append(foreign.R.LabMethodUsdaSubSampleResults, local)
				break
			}
		}
	}

	return nil
}

// SetFoodNutrient of the usdaSubSampleResult to the related item.
// Sets o.R.FoodNutrient to related.
// Adds o to related.R.FoodNutrientUsdaSubSampleResult.
func (o *UsdaSubSampleResult) SetFoodNutrient(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UsdaFoodNutrient) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"usda_sub_sample_result\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"food_nutrient_id"}),
		strmangle.WhereClause("\"", "\"", 2, usdaSubSampleResultPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.FoodNutrientID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FoodNutrientID = related.ID
	if o.R == nil {
		o.R = &usdaSubSampleResultR{
			FoodNutrient: related,
		}
	} else {
		o.R.FoodNutrient = related
	}

	if related.R == nil {
		related.R = &usdaFoodNutrientR{
			FoodNutrientUsdaSubSampleResult: o,
		}
	} else {
		related.R.FoodNutrientUsdaSubSampleResult = o
	}

	return nil
}

// SetLabMethod of the usdaSubSampleResult to the related item.
// Sets o.R.LabMethod to related.
// Adds o to related.R.LabMethodUsdaSubSampleResults.
func (o *UsdaSubSampleResult) SetLabMethod(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UsdaLabMethod) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"usda_sub_sample_result\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"lab_method_id"}),
		strmangle.WhereClause("\"", "\"", 2, usdaSubSampleResultPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.FoodNutrientID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.LabMethodID, related.ID)
	if o.R == nil {
		o.R = &usdaSubSampleResultR{
			LabMethod: related,
		}
	} else {
		o.R.LabMethod = related
	}

	if related.R == nil {
		related.R = &usdaLabMethodR{
			LabMethodUsdaSubSampleResults: UsdaSubSampleResultSlice{o},
		}
	} else {
		related.R.LabMethodUsdaSubSampleResults = append(related.R.LabMethodUsdaSubSampleResults, o)
	}

	return nil
}

// RemoveLabMethod relationship.
// Sets o.R.LabMethod to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *UsdaSubSampleResult) RemoveLabMethod(ctx context.Context, exec boil.ContextExecutor, related *UsdaLabMethod) error {
	var err error

	queries.SetScanner(&o.LabMethodID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("lab_method_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.LabMethod = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.LabMethodUsdaSubSampleResults {
		if queries.Equal(o.LabMethodID, ri.LabMethodID) {
			continue
		}

		ln := len(related.R.LabMethodUsdaSubSampleResults)
		if ln > 1 && i < ln-1 {
			related.R.LabMethodUsdaSubSampleResults[i] = related.R.LabMethodUsdaSubSampleResults[ln-1]
		}
		related.R.LabMethodUsdaSubSampleResults = related.R.LabMethodUsdaSubSampleResults[:ln-1]
		break
	}
	return nil
}

// UsdaSubSampleResults retrieves all the records using an executor.
func UsdaSubSampleResults(mods ...qm.QueryMod) usdaSubSampleResultQuery {
	mods = append(mods, qm.From("\"usda_sub_sample_result\""))
	return usdaSubSampleResultQuery{NewQuery(mods...)}
}

// FindUsdaSubSampleResult retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUsdaSubSampleResult(ctx context.Context, exec boil.ContextExecutor, foodNutrientID int, selectCols ...string) (*UsdaSubSampleResult, error) {
	usdaSubSampleResultObj := &UsdaSubSampleResult{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"usda_sub_sample_result\" where \"food_nutrient_id\"=$1", sel,
	)

	q := queries.Raw(query, foodNutrientID)

	err := q.Bind(ctx, exec, usdaSubSampleResultObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from usda_sub_sample_result")
	}

	if err = usdaSubSampleResultObj.doAfterSelectHooks(ctx, exec); err != nil {
		return usdaSubSampleResultObj, err
	}

	return usdaSubSampleResultObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UsdaSubSampleResult) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no usda_sub_sample_result provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaSubSampleResultColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	usdaSubSampleResultInsertCacheMut.RLock()
	cache, cached := usdaSubSampleResultInsertCache[key]
	usdaSubSampleResultInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			usdaSubSampleResultAllColumns,
			usdaSubSampleResultColumnsWithDefault,
			usdaSubSampleResultColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(usdaSubSampleResultType, usdaSubSampleResultMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(usdaSubSampleResultType, usdaSubSampleResultMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"usda_sub_sample_result\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"usda_sub_sample_result\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into usda_sub_sample_result")
	}

	if !cached {
		usdaSubSampleResultInsertCacheMut.Lock()
		usdaSubSampleResultInsertCache[key] = cache
		usdaSubSampleResultInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UsdaSubSampleResult.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UsdaSubSampleResult) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	usdaSubSampleResultUpdateCacheMut.RLock()
	cache, cached := usdaSubSampleResultUpdateCache[key]
	usdaSubSampleResultUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			usdaSubSampleResultAllColumns,
			usdaSubSampleResultPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update usda_sub_sample_result, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"usda_sub_sample_result\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, usdaSubSampleResultPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(usdaSubSampleResultType, usdaSubSampleResultMapping, append(wl, usdaSubSampleResultPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update usda_sub_sample_result row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for usda_sub_sample_result")
	}

	if !cached {
		usdaSubSampleResultUpdateCacheMut.Lock()
		usdaSubSampleResultUpdateCache[key] = cache
		usdaSubSampleResultUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q usdaSubSampleResultQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for usda_sub_sample_result")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for usda_sub_sample_result")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UsdaSubSampleResultSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaSubSampleResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"usda_sub_sample_result\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, usdaSubSampleResultPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in usdaSubSampleResult slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all usdaSubSampleResult")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UsdaSubSampleResult) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no usda_sub_sample_result provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaSubSampleResultColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	usdaSubSampleResultUpsertCacheMut.RLock()
	cache, cached := usdaSubSampleResultUpsertCache[key]
	usdaSubSampleResultUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			usdaSubSampleResultAllColumns,
			usdaSubSampleResultColumnsWithDefault,
			usdaSubSampleResultColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			usdaSubSampleResultAllColumns,
			usdaSubSampleResultPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert usda_sub_sample_result, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(usdaSubSampleResultPrimaryKeyColumns))
			copy(conflict, usdaSubSampleResultPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"usda_sub_sample_result\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(usdaSubSampleResultType, usdaSubSampleResultMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(usdaSubSampleResultType, usdaSubSampleResultMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert usda_sub_sample_result")
	}

	if !cached {
		usdaSubSampleResultUpsertCacheMut.Lock()
		usdaSubSampleResultUpsertCache[key] = cache
		usdaSubSampleResultUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UsdaSubSampleResult record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UsdaSubSampleResult) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UsdaSubSampleResult provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), usdaSubSampleResultPrimaryKeyMapping)
	sql := "DELETE FROM \"usda_sub_sample_result\" WHERE \"food_nutrient_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from usda_sub_sample_result")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for usda_sub_sample_result")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q usdaSubSampleResultQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no usdaSubSampleResultQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from usda_sub_sample_result")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for usda_sub_sample_result")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UsdaSubSampleResultSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(usdaSubSampleResultBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaSubSampleResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"usda_sub_sample_result\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaSubSampleResultPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from usdaSubSampleResult slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for usda_sub_sample_result")
	}

	if len(usdaSubSampleResultAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UsdaSubSampleResult) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUsdaSubSampleResult(ctx, exec, o.FoodNutrientID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsdaSubSampleResultSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UsdaSubSampleResultSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaSubSampleResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"usda_sub_sample_result\".* FROM \"usda_sub_sample_result\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaSubSampleResultPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UsdaSubSampleResultSlice")
	}

	*o = slice

	return nil
}

// UsdaSubSampleResultExists checks if the UsdaSubSampleResult row exists.
func UsdaSubSampleResultExists(ctx context.Context, exec boil.ContextExecutor, foodNutrientID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"usda_sub_sample_result\" where \"food_nutrient_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, foodNutrientID)
	}
	row := exec.QueryRowContext(ctx, sql, foodNutrientID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if usda_sub_sample_result exists")
	}

	return exists, nil
}
