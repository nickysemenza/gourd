// Code generated by SQLBoiler 4.8.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUsdaLabMethodNutrients(t *testing.T) {
	t.Parallel()

	query := UsdaLabMethodNutrients()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUsdaLabMethodNutrientsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaLabMethodNutrient{}
	if err = randomize.Struct(seed, o, usdaLabMethodNutrientDBTypes, true, usdaLabMethodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethodNutrient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaLabMethodNutrients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaLabMethodNutrientsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaLabMethodNutrient{}
	if err = randomize.Struct(seed, o, usdaLabMethodNutrientDBTypes, true, usdaLabMethodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethodNutrient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UsdaLabMethodNutrients().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaLabMethodNutrients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaLabMethodNutrientsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaLabMethodNutrient{}
	if err = randomize.Struct(seed, o, usdaLabMethodNutrientDBTypes, true, usdaLabMethodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethodNutrient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UsdaLabMethodNutrientSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaLabMethodNutrients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaLabMethodNutrientsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaLabMethodNutrient{}
	if err = randomize.Struct(seed, o, usdaLabMethodNutrientDBTypes, true, usdaLabMethodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethodNutrient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UsdaLabMethodNutrientExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if UsdaLabMethodNutrient exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UsdaLabMethodNutrientExists to return true, but got false.")
	}
}

func testUsdaLabMethodNutrientsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaLabMethodNutrient{}
	if err = randomize.Struct(seed, o, usdaLabMethodNutrientDBTypes, true, usdaLabMethodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethodNutrient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	usdaLabMethodNutrientFound, err := FindUsdaLabMethodNutrient(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if usdaLabMethodNutrientFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUsdaLabMethodNutrientsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaLabMethodNutrient{}
	if err = randomize.Struct(seed, o, usdaLabMethodNutrientDBTypes, true, usdaLabMethodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethodNutrient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UsdaLabMethodNutrients().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUsdaLabMethodNutrientsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaLabMethodNutrient{}
	if err = randomize.Struct(seed, o, usdaLabMethodNutrientDBTypes, true, usdaLabMethodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethodNutrient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UsdaLabMethodNutrients().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUsdaLabMethodNutrientsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	usdaLabMethodNutrientOne := &UsdaLabMethodNutrient{}
	usdaLabMethodNutrientTwo := &UsdaLabMethodNutrient{}
	if err = randomize.Struct(seed, usdaLabMethodNutrientOne, usdaLabMethodNutrientDBTypes, false, usdaLabMethodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethodNutrient struct: %s", err)
	}
	if err = randomize.Struct(seed, usdaLabMethodNutrientTwo, usdaLabMethodNutrientDBTypes, false, usdaLabMethodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethodNutrient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = usdaLabMethodNutrientOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = usdaLabMethodNutrientTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UsdaLabMethodNutrients().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUsdaLabMethodNutrientsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	usdaLabMethodNutrientOne := &UsdaLabMethodNutrient{}
	usdaLabMethodNutrientTwo := &UsdaLabMethodNutrient{}
	if err = randomize.Struct(seed, usdaLabMethodNutrientOne, usdaLabMethodNutrientDBTypes, false, usdaLabMethodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethodNutrient struct: %s", err)
	}
	if err = randomize.Struct(seed, usdaLabMethodNutrientTwo, usdaLabMethodNutrientDBTypes, false, usdaLabMethodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethodNutrient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = usdaLabMethodNutrientOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = usdaLabMethodNutrientTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaLabMethodNutrients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func usdaLabMethodNutrientBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaLabMethodNutrient) error {
	*o = UsdaLabMethodNutrient{}
	return nil
}

func usdaLabMethodNutrientAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaLabMethodNutrient) error {
	*o = UsdaLabMethodNutrient{}
	return nil
}

func usdaLabMethodNutrientAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UsdaLabMethodNutrient) error {
	*o = UsdaLabMethodNutrient{}
	return nil
}

func usdaLabMethodNutrientBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UsdaLabMethodNutrient) error {
	*o = UsdaLabMethodNutrient{}
	return nil
}

func usdaLabMethodNutrientAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UsdaLabMethodNutrient) error {
	*o = UsdaLabMethodNutrient{}
	return nil
}

func usdaLabMethodNutrientBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UsdaLabMethodNutrient) error {
	*o = UsdaLabMethodNutrient{}
	return nil
}

func usdaLabMethodNutrientAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UsdaLabMethodNutrient) error {
	*o = UsdaLabMethodNutrient{}
	return nil
}

func usdaLabMethodNutrientBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaLabMethodNutrient) error {
	*o = UsdaLabMethodNutrient{}
	return nil
}

func usdaLabMethodNutrientAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaLabMethodNutrient) error {
	*o = UsdaLabMethodNutrient{}
	return nil
}

func testUsdaLabMethodNutrientsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UsdaLabMethodNutrient{}
	o := &UsdaLabMethodNutrient{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, usdaLabMethodNutrientDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethodNutrient object: %s", err)
	}

	AddUsdaLabMethodNutrientHook(boil.BeforeInsertHook, usdaLabMethodNutrientBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	usdaLabMethodNutrientBeforeInsertHooks = []UsdaLabMethodNutrientHook{}

	AddUsdaLabMethodNutrientHook(boil.AfterInsertHook, usdaLabMethodNutrientAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	usdaLabMethodNutrientAfterInsertHooks = []UsdaLabMethodNutrientHook{}

	AddUsdaLabMethodNutrientHook(boil.AfterSelectHook, usdaLabMethodNutrientAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	usdaLabMethodNutrientAfterSelectHooks = []UsdaLabMethodNutrientHook{}

	AddUsdaLabMethodNutrientHook(boil.BeforeUpdateHook, usdaLabMethodNutrientBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	usdaLabMethodNutrientBeforeUpdateHooks = []UsdaLabMethodNutrientHook{}

	AddUsdaLabMethodNutrientHook(boil.AfterUpdateHook, usdaLabMethodNutrientAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	usdaLabMethodNutrientAfterUpdateHooks = []UsdaLabMethodNutrientHook{}

	AddUsdaLabMethodNutrientHook(boil.BeforeDeleteHook, usdaLabMethodNutrientBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	usdaLabMethodNutrientBeforeDeleteHooks = []UsdaLabMethodNutrientHook{}

	AddUsdaLabMethodNutrientHook(boil.AfterDeleteHook, usdaLabMethodNutrientAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	usdaLabMethodNutrientAfterDeleteHooks = []UsdaLabMethodNutrientHook{}

	AddUsdaLabMethodNutrientHook(boil.BeforeUpsertHook, usdaLabMethodNutrientBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	usdaLabMethodNutrientBeforeUpsertHooks = []UsdaLabMethodNutrientHook{}

	AddUsdaLabMethodNutrientHook(boil.AfterUpsertHook, usdaLabMethodNutrientAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	usdaLabMethodNutrientAfterUpsertHooks = []UsdaLabMethodNutrientHook{}
}

func testUsdaLabMethodNutrientsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaLabMethodNutrient{}
	if err = randomize.Struct(seed, o, usdaLabMethodNutrientDBTypes, true, usdaLabMethodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethodNutrient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaLabMethodNutrients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUsdaLabMethodNutrientsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaLabMethodNutrient{}
	if err = randomize.Struct(seed, o, usdaLabMethodNutrientDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethodNutrient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(usdaLabMethodNutrientColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UsdaLabMethodNutrients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUsdaLabMethodNutrientToOneUsdaLabMethodUsingLabMethod(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UsdaLabMethodNutrient
	var foreign UsdaLabMethod

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, usdaLabMethodNutrientDBTypes, true, usdaLabMethodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethodNutrient struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, usdaLabMethodDBTypes, false, usdaLabMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethod struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.LabMethodID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.LabMethod().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UsdaLabMethodNutrientSlice{&local}
	if err = local.L.LoadLabMethod(ctx, tx, false, (*[]*UsdaLabMethodNutrient)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.LabMethod == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.LabMethod = nil
	if err = local.L.LoadLabMethod(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.LabMethod == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUsdaLabMethodNutrientToOneSetOpUsdaLabMethodUsingLabMethod(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaLabMethodNutrient
	var b, c UsdaLabMethod

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaLabMethodNutrientDBTypes, false, strmangle.SetComplement(usdaLabMethodNutrientPrimaryKeyColumns, usdaLabMethodNutrientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, usdaLabMethodDBTypes, false, strmangle.SetComplement(usdaLabMethodPrimaryKeyColumns, usdaLabMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, usdaLabMethodDBTypes, false, strmangle.SetComplement(usdaLabMethodPrimaryKeyColumns, usdaLabMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UsdaLabMethod{&b, &c} {
		err = a.SetLabMethod(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.LabMethod != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.LabMethodUsdaLabMethodNutrients[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.LabMethodID, x.ID) {
			t.Error("foreign key was wrong value", a.LabMethodID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.LabMethodID))
		reflect.Indirect(reflect.ValueOf(&a.LabMethodID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.LabMethodID, x.ID) {
			t.Error("foreign key was wrong value", a.LabMethodID, x.ID)
		}
	}
}

func testUsdaLabMethodNutrientToOneRemoveOpUsdaLabMethodUsingLabMethod(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaLabMethodNutrient
	var b UsdaLabMethod

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaLabMethodNutrientDBTypes, false, strmangle.SetComplement(usdaLabMethodNutrientPrimaryKeyColumns, usdaLabMethodNutrientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, usdaLabMethodDBTypes, false, strmangle.SetComplement(usdaLabMethodPrimaryKeyColumns, usdaLabMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetLabMethod(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveLabMethod(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.LabMethod().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.LabMethod != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.LabMethodID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.LabMethodUsdaLabMethodNutrients) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testUsdaLabMethodNutrientsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaLabMethodNutrient{}
	if err = randomize.Struct(seed, o, usdaLabMethodNutrientDBTypes, true, usdaLabMethodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethodNutrient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsdaLabMethodNutrientsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaLabMethodNutrient{}
	if err = randomize.Struct(seed, o, usdaLabMethodNutrientDBTypes, true, usdaLabMethodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethodNutrient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UsdaLabMethodNutrientSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsdaLabMethodNutrientsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaLabMethodNutrient{}
	if err = randomize.Struct(seed, o, usdaLabMethodNutrientDBTypes, true, usdaLabMethodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethodNutrient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UsdaLabMethodNutrients().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	usdaLabMethodNutrientDBTypes = map[string]string{`ID`: `integer`, `LabMethodID`: `integer`, `NutrientID`: `integer`}
	_                            = bytes.MinRead
)

func testUsdaLabMethodNutrientsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(usdaLabMethodNutrientPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(usdaLabMethodNutrientAllColumns) == len(usdaLabMethodNutrientPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UsdaLabMethodNutrient{}
	if err = randomize.Struct(seed, o, usdaLabMethodNutrientDBTypes, true, usdaLabMethodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethodNutrient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaLabMethodNutrients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, usdaLabMethodNutrientDBTypes, true, usdaLabMethodNutrientPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethodNutrient struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUsdaLabMethodNutrientsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(usdaLabMethodNutrientAllColumns) == len(usdaLabMethodNutrientPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UsdaLabMethodNutrient{}
	if err = randomize.Struct(seed, o, usdaLabMethodNutrientDBTypes, true, usdaLabMethodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethodNutrient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaLabMethodNutrients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, usdaLabMethodNutrientDBTypes, true, usdaLabMethodNutrientPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethodNutrient struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(usdaLabMethodNutrientAllColumns, usdaLabMethodNutrientPrimaryKeyColumns) {
		fields = usdaLabMethodNutrientAllColumns
	} else {
		fields = strmangle.SetComplement(
			usdaLabMethodNutrientAllColumns,
			usdaLabMethodNutrientPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UsdaLabMethodNutrientSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUsdaLabMethodNutrientsUpsert(t *testing.T) {
	t.Parallel()

	if len(usdaLabMethodNutrientAllColumns) == len(usdaLabMethodNutrientPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UsdaLabMethodNutrient{}
	if err = randomize.Struct(seed, &o, usdaLabMethodNutrientDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethodNutrient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UsdaLabMethodNutrient: %s", err)
	}

	count, err := UsdaLabMethodNutrients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, usdaLabMethodNutrientDBTypes, false, usdaLabMethodNutrientPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethodNutrient struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UsdaLabMethodNutrient: %s", err)
	}

	count, err = UsdaLabMethodNutrients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
