// Code generated by SQLBoiler 4.10.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UsdaLabMethod is an object representing the database table.
type UsdaLabMethod struct {
	ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Technique   null.String `boil:"technique" json:"technique,omitempty" toml:"technique" yaml:"technique,omitempty"`

	R *usdaLabMethodR `boil:"rel" json:"rel" toml:"rel" yaml:"rel"`
	L usdaLabMethodL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UsdaLabMethodColumns = struct {
	ID          string
	Description string
	Technique   string
}{
	ID:          "id",
	Description: "description",
	Technique:   "technique",
}

var UsdaLabMethodTableColumns = struct {
	ID          string
	Description string
	Technique   string
}{
	ID:          "usda_lab_method.id",
	Description: "usda_lab_method.description",
	Technique:   "usda_lab_method.technique",
}

// Generated where

var UsdaLabMethodWhere = struct {
	ID          whereHelperint
	Description whereHelpernull_String
	Technique   whereHelpernull_String
}{
	ID:          whereHelperint{field: "\"usda_lab_method\".\"id\""},
	Description: whereHelpernull_String{field: "\"usda_lab_method\".\"description\""},
	Technique:   whereHelpernull_String{field: "\"usda_lab_method\".\"technique\""},
}

// UsdaLabMethodRels is where relationship names are stored.
var UsdaLabMethodRels = struct {
	LabMethodUsdaLabMethodCodes     string
	LabMethodUsdaLabMethodNutrients string
	LabMethodUsdaSubSampleResults   string
}{
	LabMethodUsdaLabMethodCodes:     "LabMethodUsdaLabMethodCodes",
	LabMethodUsdaLabMethodNutrients: "LabMethodUsdaLabMethodNutrients",
	LabMethodUsdaSubSampleResults:   "LabMethodUsdaSubSampleResults",
}

// usdaLabMethodR is where relationships are stored.
type usdaLabMethodR struct {
	LabMethodUsdaLabMethodCodes     UsdaLabMethodCodeSlice     `boil:"LabMethodUsdaLabMethodCodes" json:"LabMethodUsdaLabMethodCodes" toml:"LabMethodUsdaLabMethodCodes" yaml:"LabMethodUsdaLabMethodCodes"`
	LabMethodUsdaLabMethodNutrients UsdaLabMethodNutrientSlice `boil:"LabMethodUsdaLabMethodNutrients" json:"LabMethodUsdaLabMethodNutrients" toml:"LabMethodUsdaLabMethodNutrients" yaml:"LabMethodUsdaLabMethodNutrients"`
	LabMethodUsdaSubSampleResults   UsdaSubSampleResultSlice   `boil:"LabMethodUsdaSubSampleResults" json:"LabMethodUsdaSubSampleResults" toml:"LabMethodUsdaSubSampleResults" yaml:"LabMethodUsdaSubSampleResults"`
}

// NewStruct creates a new relationship struct
func (*usdaLabMethodR) NewStruct() *usdaLabMethodR {
	return &usdaLabMethodR{}
}

// usdaLabMethodL is where Load methods for each relationship are stored.
type usdaLabMethodL struct{}

var (
	usdaLabMethodAllColumns            = []string{"id", "description", "technique"}
	usdaLabMethodColumnsWithoutDefault = []string{"id"}
	usdaLabMethodColumnsWithDefault    = []string{"description", "technique"}
	usdaLabMethodPrimaryKeyColumns     = []string{"id"}
	usdaLabMethodGeneratedColumns      = []string{}
)

type (
	// UsdaLabMethodSlice is an alias for a slice of pointers to UsdaLabMethod.
	// This should almost always be used instead of []UsdaLabMethod.
	UsdaLabMethodSlice []*UsdaLabMethod
	// UsdaLabMethodHook is the signature for custom UsdaLabMethod hook methods
	UsdaLabMethodHook func(context.Context, boil.ContextExecutor, *UsdaLabMethod) error

	usdaLabMethodQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usdaLabMethodType                 = reflect.TypeOf(&UsdaLabMethod{})
	usdaLabMethodMapping              = queries.MakeStructMapping(usdaLabMethodType)
	usdaLabMethodPrimaryKeyMapping, _ = queries.BindMapping(usdaLabMethodType, usdaLabMethodMapping, usdaLabMethodPrimaryKeyColumns)
	usdaLabMethodInsertCacheMut       sync.RWMutex
	usdaLabMethodInsertCache          = make(map[string]insertCache)
	usdaLabMethodUpdateCacheMut       sync.RWMutex
	usdaLabMethodUpdateCache          = make(map[string]updateCache)
	usdaLabMethodUpsertCacheMut       sync.RWMutex
	usdaLabMethodUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var usdaLabMethodAfterSelectHooks []UsdaLabMethodHook

var usdaLabMethodBeforeInsertHooks []UsdaLabMethodHook
var usdaLabMethodAfterInsertHooks []UsdaLabMethodHook

var usdaLabMethodBeforeUpdateHooks []UsdaLabMethodHook
var usdaLabMethodAfterUpdateHooks []UsdaLabMethodHook

var usdaLabMethodBeforeDeleteHooks []UsdaLabMethodHook
var usdaLabMethodAfterDeleteHooks []UsdaLabMethodHook

var usdaLabMethodBeforeUpsertHooks []UsdaLabMethodHook
var usdaLabMethodAfterUpsertHooks []UsdaLabMethodHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UsdaLabMethod) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaLabMethodAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UsdaLabMethod) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaLabMethodBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UsdaLabMethod) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaLabMethodAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UsdaLabMethod) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaLabMethodBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UsdaLabMethod) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaLabMethodAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UsdaLabMethod) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaLabMethodBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UsdaLabMethod) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaLabMethodAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UsdaLabMethod) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaLabMethodBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UsdaLabMethod) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaLabMethodAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUsdaLabMethodHook registers your hook function for all future operations.
func AddUsdaLabMethodHook(hookPoint boil.HookPoint, usdaLabMethodHook UsdaLabMethodHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		usdaLabMethodAfterSelectHooks = append(usdaLabMethodAfterSelectHooks, usdaLabMethodHook)
	case boil.BeforeInsertHook:
		usdaLabMethodBeforeInsertHooks = append(usdaLabMethodBeforeInsertHooks, usdaLabMethodHook)
	case boil.AfterInsertHook:
		usdaLabMethodAfterInsertHooks = append(usdaLabMethodAfterInsertHooks, usdaLabMethodHook)
	case boil.BeforeUpdateHook:
		usdaLabMethodBeforeUpdateHooks = append(usdaLabMethodBeforeUpdateHooks, usdaLabMethodHook)
	case boil.AfterUpdateHook:
		usdaLabMethodAfterUpdateHooks = append(usdaLabMethodAfterUpdateHooks, usdaLabMethodHook)
	case boil.BeforeDeleteHook:
		usdaLabMethodBeforeDeleteHooks = append(usdaLabMethodBeforeDeleteHooks, usdaLabMethodHook)
	case boil.AfterDeleteHook:
		usdaLabMethodAfterDeleteHooks = append(usdaLabMethodAfterDeleteHooks, usdaLabMethodHook)
	case boil.BeforeUpsertHook:
		usdaLabMethodBeforeUpsertHooks = append(usdaLabMethodBeforeUpsertHooks, usdaLabMethodHook)
	case boil.AfterUpsertHook:
		usdaLabMethodAfterUpsertHooks = append(usdaLabMethodAfterUpsertHooks, usdaLabMethodHook)
	}
}

// One returns a single usdaLabMethod record from the query.
func (q usdaLabMethodQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UsdaLabMethod, error) {
	o := &UsdaLabMethod{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for usda_lab_method")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UsdaLabMethod records from the query.
func (q usdaLabMethodQuery) All(ctx context.Context, exec boil.ContextExecutor) (UsdaLabMethodSlice, error) {
	var o []*UsdaLabMethod

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UsdaLabMethod slice")
	}

	if len(usdaLabMethodAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UsdaLabMethod records in the query.
func (q usdaLabMethodQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count usda_lab_method rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q usdaLabMethodQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if usda_lab_method exists")
	}

	return count > 0, nil
}

// LabMethodUsdaLabMethodCodes retrieves all the usda_lab_method_code's UsdaLabMethodCodes with an executor via lab_method_id column.
func (o *UsdaLabMethod) LabMethodUsdaLabMethodCodes(mods ...qm.QueryMod) usdaLabMethodCodeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"usda_lab_method_code\".\"lab_method_id\"=?", o.ID),
	)

	return UsdaLabMethodCodes(queryMods...)
}

// LabMethodUsdaLabMethodNutrients retrieves all the usda_lab_method_nutrient's UsdaLabMethodNutrients with an executor via lab_method_id column.
func (o *UsdaLabMethod) LabMethodUsdaLabMethodNutrients(mods ...qm.QueryMod) usdaLabMethodNutrientQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"usda_lab_method_nutrient\".\"lab_method_id\"=?", o.ID),
	)

	return UsdaLabMethodNutrients(queryMods...)
}

// LabMethodUsdaSubSampleResults retrieves all the usda_sub_sample_result's UsdaSubSampleResults with an executor via lab_method_id column.
func (o *UsdaLabMethod) LabMethodUsdaSubSampleResults(mods ...qm.QueryMod) usdaSubSampleResultQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"usda_sub_sample_result\".\"lab_method_id\"=?", o.ID),
	)

	return UsdaSubSampleResults(queryMods...)
}

// LoadLabMethodUsdaLabMethodCodes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (usdaLabMethodL) LoadLabMethodUsdaLabMethodCodes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsdaLabMethod interface{}, mods queries.Applicator) error {
	var slice []*UsdaLabMethod
	var object *UsdaLabMethod

	if singular {
		object = maybeUsdaLabMethod.(*UsdaLabMethod)
	} else {
		slice = *maybeUsdaLabMethod.(*[]*UsdaLabMethod)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &usdaLabMethodR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usdaLabMethodR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`usda_lab_method_code`),
		qm.WhereIn(`usda_lab_method_code.lab_method_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load usda_lab_method_code")
	}

	var resultSlice []*UsdaLabMethodCode
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice usda_lab_method_code")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on usda_lab_method_code")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usda_lab_method_code")
	}

	if len(usdaLabMethodCodeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.LabMethodUsdaLabMethodCodes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &usdaLabMethodCodeR{}
			}
			foreign.R.LabMethod = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.LabMethodID) {
				local.R.LabMethodUsdaLabMethodCodes = append(local.R.LabMethodUsdaLabMethodCodes, foreign)
				if foreign.R == nil {
					foreign.R = &usdaLabMethodCodeR{}
				}
				foreign.R.LabMethod = local
				break
			}
		}
	}

	return nil
}

// LoadLabMethodUsdaLabMethodNutrients allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (usdaLabMethodL) LoadLabMethodUsdaLabMethodNutrients(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsdaLabMethod interface{}, mods queries.Applicator) error {
	var slice []*UsdaLabMethod
	var object *UsdaLabMethod

	if singular {
		object = maybeUsdaLabMethod.(*UsdaLabMethod)
	} else {
		slice = *maybeUsdaLabMethod.(*[]*UsdaLabMethod)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &usdaLabMethodR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usdaLabMethodR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`usda_lab_method_nutrient`),
		qm.WhereIn(`usda_lab_method_nutrient.lab_method_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load usda_lab_method_nutrient")
	}

	var resultSlice []*UsdaLabMethodNutrient
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice usda_lab_method_nutrient")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on usda_lab_method_nutrient")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usda_lab_method_nutrient")
	}

	if len(usdaLabMethodNutrientAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.LabMethodUsdaLabMethodNutrients = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &usdaLabMethodNutrientR{}
			}
			foreign.R.LabMethod = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.LabMethodID) {
				local.R.LabMethodUsdaLabMethodNutrients = append(local.R.LabMethodUsdaLabMethodNutrients, foreign)
				if foreign.R == nil {
					foreign.R = &usdaLabMethodNutrientR{}
				}
				foreign.R.LabMethod = local
				break
			}
		}
	}

	return nil
}

// LoadLabMethodUsdaSubSampleResults allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (usdaLabMethodL) LoadLabMethodUsdaSubSampleResults(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsdaLabMethod interface{}, mods queries.Applicator) error {
	var slice []*UsdaLabMethod
	var object *UsdaLabMethod

	if singular {
		object = maybeUsdaLabMethod.(*UsdaLabMethod)
	} else {
		slice = *maybeUsdaLabMethod.(*[]*UsdaLabMethod)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &usdaLabMethodR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usdaLabMethodR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`usda_sub_sample_result`),
		qm.WhereIn(`usda_sub_sample_result.lab_method_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load usda_sub_sample_result")
	}

	var resultSlice []*UsdaSubSampleResult
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice usda_sub_sample_result")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on usda_sub_sample_result")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usda_sub_sample_result")
	}

	if len(usdaSubSampleResultAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.LabMethodUsdaSubSampleResults = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &usdaSubSampleResultR{}
			}
			foreign.R.LabMethod = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.LabMethodID) {
				local.R.LabMethodUsdaSubSampleResults = append(local.R.LabMethodUsdaSubSampleResults, foreign)
				if foreign.R == nil {
					foreign.R = &usdaSubSampleResultR{}
				}
				foreign.R.LabMethod = local
				break
			}
		}
	}

	return nil
}

// AddLabMethodUsdaLabMethodCodes adds the given related objects to the existing relationships
// of the usda_lab_method, optionally inserting them as new records.
// Appends related to o.R.LabMethodUsdaLabMethodCodes.
// Sets related.R.LabMethod appropriately.
func (o *UsdaLabMethod) AddLabMethodUsdaLabMethodCodes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UsdaLabMethodCode) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.LabMethodID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"usda_lab_method_code\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"lab_method_id"}),
				strmangle.WhereClause("\"", "\"", 2, usdaLabMethodCodePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.LabMethodID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &usdaLabMethodR{
			LabMethodUsdaLabMethodCodes: related,
		}
	} else {
		o.R.LabMethodUsdaLabMethodCodes = append(o.R.LabMethodUsdaLabMethodCodes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &usdaLabMethodCodeR{
				LabMethod: o,
			}
		} else {
			rel.R.LabMethod = o
		}
	}
	return nil
}

// SetLabMethodUsdaLabMethodCodes removes all previously related items of the
// usda_lab_method replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.LabMethod's LabMethodUsdaLabMethodCodes accordingly.
// Replaces o.R.LabMethodUsdaLabMethodCodes with related.
// Sets related.R.LabMethod's LabMethodUsdaLabMethodCodes accordingly.
func (o *UsdaLabMethod) SetLabMethodUsdaLabMethodCodes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UsdaLabMethodCode) error {
	query := "update \"usda_lab_method_code\" set \"lab_method_id\" = null where \"lab_method_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.LabMethodUsdaLabMethodCodes {
			queries.SetScanner(&rel.LabMethodID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.LabMethod = nil
		}
		o.R.LabMethodUsdaLabMethodCodes = nil
	}

	return o.AddLabMethodUsdaLabMethodCodes(ctx, exec, insert, related...)
}

// RemoveLabMethodUsdaLabMethodCodes relationships from objects passed in.
// Removes related items from R.LabMethodUsdaLabMethodCodes (uses pointer comparison, removal does not keep order)
// Sets related.R.LabMethod.
func (o *UsdaLabMethod) RemoveLabMethodUsdaLabMethodCodes(ctx context.Context, exec boil.ContextExecutor, related ...*UsdaLabMethodCode) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.LabMethodID, nil)
		if rel.R != nil {
			rel.R.LabMethod = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("lab_method_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.LabMethodUsdaLabMethodCodes {
			if rel != ri {
				continue
			}

			ln := len(o.R.LabMethodUsdaLabMethodCodes)
			if ln > 1 && i < ln-1 {
				o.R.LabMethodUsdaLabMethodCodes[i] = o.R.LabMethodUsdaLabMethodCodes[ln-1]
			}
			o.R.LabMethodUsdaLabMethodCodes = o.R.LabMethodUsdaLabMethodCodes[:ln-1]
			break
		}
	}

	return nil
}

// AddLabMethodUsdaLabMethodNutrients adds the given related objects to the existing relationships
// of the usda_lab_method, optionally inserting them as new records.
// Appends related to o.R.LabMethodUsdaLabMethodNutrients.
// Sets related.R.LabMethod appropriately.
func (o *UsdaLabMethod) AddLabMethodUsdaLabMethodNutrients(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UsdaLabMethodNutrient) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.LabMethodID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"usda_lab_method_nutrient\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"lab_method_id"}),
				strmangle.WhereClause("\"", "\"", 2, usdaLabMethodNutrientPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.LabMethodID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &usdaLabMethodR{
			LabMethodUsdaLabMethodNutrients: related,
		}
	} else {
		o.R.LabMethodUsdaLabMethodNutrients = append(o.R.LabMethodUsdaLabMethodNutrients, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &usdaLabMethodNutrientR{
				LabMethod: o,
			}
		} else {
			rel.R.LabMethod = o
		}
	}
	return nil
}

// SetLabMethodUsdaLabMethodNutrients removes all previously related items of the
// usda_lab_method replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.LabMethod's LabMethodUsdaLabMethodNutrients accordingly.
// Replaces o.R.LabMethodUsdaLabMethodNutrients with related.
// Sets related.R.LabMethod's LabMethodUsdaLabMethodNutrients accordingly.
func (o *UsdaLabMethod) SetLabMethodUsdaLabMethodNutrients(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UsdaLabMethodNutrient) error {
	query := "update \"usda_lab_method_nutrient\" set \"lab_method_id\" = null where \"lab_method_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.LabMethodUsdaLabMethodNutrients {
			queries.SetScanner(&rel.LabMethodID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.LabMethod = nil
		}
		o.R.LabMethodUsdaLabMethodNutrients = nil
	}

	return o.AddLabMethodUsdaLabMethodNutrients(ctx, exec, insert, related...)
}

// RemoveLabMethodUsdaLabMethodNutrients relationships from objects passed in.
// Removes related items from R.LabMethodUsdaLabMethodNutrients (uses pointer comparison, removal does not keep order)
// Sets related.R.LabMethod.
func (o *UsdaLabMethod) RemoveLabMethodUsdaLabMethodNutrients(ctx context.Context, exec boil.ContextExecutor, related ...*UsdaLabMethodNutrient) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.LabMethodID, nil)
		if rel.R != nil {
			rel.R.LabMethod = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("lab_method_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.LabMethodUsdaLabMethodNutrients {
			if rel != ri {
				continue
			}

			ln := len(o.R.LabMethodUsdaLabMethodNutrients)
			if ln > 1 && i < ln-1 {
				o.R.LabMethodUsdaLabMethodNutrients[i] = o.R.LabMethodUsdaLabMethodNutrients[ln-1]
			}
			o.R.LabMethodUsdaLabMethodNutrients = o.R.LabMethodUsdaLabMethodNutrients[:ln-1]
			break
		}
	}

	return nil
}

// AddLabMethodUsdaSubSampleResults adds the given related objects to the existing relationships
// of the usda_lab_method, optionally inserting them as new records.
// Appends related to o.R.LabMethodUsdaSubSampleResults.
// Sets related.R.LabMethod appropriately.
func (o *UsdaLabMethod) AddLabMethodUsdaSubSampleResults(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UsdaSubSampleResult) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.LabMethodID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"usda_sub_sample_result\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"lab_method_id"}),
				strmangle.WhereClause("\"", "\"", 2, usdaSubSampleResultPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.FoodNutrientID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.LabMethodID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &usdaLabMethodR{
			LabMethodUsdaSubSampleResults: related,
		}
	} else {
		o.R.LabMethodUsdaSubSampleResults = append(o.R.LabMethodUsdaSubSampleResults, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &usdaSubSampleResultR{
				LabMethod: o,
			}
		} else {
			rel.R.LabMethod = o
		}
	}
	return nil
}

// SetLabMethodUsdaSubSampleResults removes all previously related items of the
// usda_lab_method replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.LabMethod's LabMethodUsdaSubSampleResults accordingly.
// Replaces o.R.LabMethodUsdaSubSampleResults with related.
// Sets related.R.LabMethod's LabMethodUsdaSubSampleResults accordingly.
func (o *UsdaLabMethod) SetLabMethodUsdaSubSampleResults(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UsdaSubSampleResult) error {
	query := "update \"usda_sub_sample_result\" set \"lab_method_id\" = null where \"lab_method_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.LabMethodUsdaSubSampleResults {
			queries.SetScanner(&rel.LabMethodID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.LabMethod = nil
		}
		o.R.LabMethodUsdaSubSampleResults = nil
	}

	return o.AddLabMethodUsdaSubSampleResults(ctx, exec, insert, related...)
}

// RemoveLabMethodUsdaSubSampleResults relationships from objects passed in.
// Removes related items from R.LabMethodUsdaSubSampleResults (uses pointer comparison, removal does not keep order)
// Sets related.R.LabMethod.
func (o *UsdaLabMethod) RemoveLabMethodUsdaSubSampleResults(ctx context.Context, exec boil.ContextExecutor, related ...*UsdaSubSampleResult) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.LabMethodID, nil)
		if rel.R != nil {
			rel.R.LabMethod = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("lab_method_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.LabMethodUsdaSubSampleResults {
			if rel != ri {
				continue
			}

			ln := len(o.R.LabMethodUsdaSubSampleResults)
			if ln > 1 && i < ln-1 {
				o.R.LabMethodUsdaSubSampleResults[i] = o.R.LabMethodUsdaSubSampleResults[ln-1]
			}
			o.R.LabMethodUsdaSubSampleResults = o.R.LabMethodUsdaSubSampleResults[:ln-1]
			break
		}
	}

	return nil
}

// UsdaLabMethods retrieves all the records using an executor.
func UsdaLabMethods(mods ...qm.QueryMod) usdaLabMethodQuery {
	mods = append(mods, qm.From("\"usda_lab_method\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"usda_lab_method\".*"})
	}

	return usdaLabMethodQuery{q}
}

// FindUsdaLabMethod retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUsdaLabMethod(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UsdaLabMethod, error) {
	usdaLabMethodObj := &UsdaLabMethod{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"usda_lab_method\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, usdaLabMethodObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from usda_lab_method")
	}

	if err = usdaLabMethodObj.doAfterSelectHooks(ctx, exec); err != nil {
		return usdaLabMethodObj, err
	}

	return usdaLabMethodObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UsdaLabMethod) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no usda_lab_method provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaLabMethodColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	usdaLabMethodInsertCacheMut.RLock()
	cache, cached := usdaLabMethodInsertCache[key]
	usdaLabMethodInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			usdaLabMethodAllColumns,
			usdaLabMethodColumnsWithDefault,
			usdaLabMethodColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(usdaLabMethodType, usdaLabMethodMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(usdaLabMethodType, usdaLabMethodMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"usda_lab_method\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"usda_lab_method\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into usda_lab_method")
	}

	if !cached {
		usdaLabMethodInsertCacheMut.Lock()
		usdaLabMethodInsertCache[key] = cache
		usdaLabMethodInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UsdaLabMethod.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UsdaLabMethod) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	usdaLabMethodUpdateCacheMut.RLock()
	cache, cached := usdaLabMethodUpdateCache[key]
	usdaLabMethodUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			usdaLabMethodAllColumns,
			usdaLabMethodPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update usda_lab_method, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"usda_lab_method\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, usdaLabMethodPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(usdaLabMethodType, usdaLabMethodMapping, append(wl, usdaLabMethodPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update usda_lab_method row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for usda_lab_method")
	}

	if !cached {
		usdaLabMethodUpdateCacheMut.Lock()
		usdaLabMethodUpdateCache[key] = cache
		usdaLabMethodUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q usdaLabMethodQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for usda_lab_method")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for usda_lab_method")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UsdaLabMethodSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaLabMethodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"usda_lab_method\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, usdaLabMethodPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in usdaLabMethod slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all usdaLabMethod")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UsdaLabMethod) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no usda_lab_method provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaLabMethodColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	usdaLabMethodUpsertCacheMut.RLock()
	cache, cached := usdaLabMethodUpsertCache[key]
	usdaLabMethodUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			usdaLabMethodAllColumns,
			usdaLabMethodColumnsWithDefault,
			usdaLabMethodColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			usdaLabMethodAllColumns,
			usdaLabMethodPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert usda_lab_method, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(usdaLabMethodPrimaryKeyColumns))
			copy(conflict, usdaLabMethodPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"usda_lab_method\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(usdaLabMethodType, usdaLabMethodMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(usdaLabMethodType, usdaLabMethodMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert usda_lab_method")
	}

	if !cached {
		usdaLabMethodUpsertCacheMut.Lock()
		usdaLabMethodUpsertCache[key] = cache
		usdaLabMethodUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UsdaLabMethod record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UsdaLabMethod) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UsdaLabMethod provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), usdaLabMethodPrimaryKeyMapping)
	sql := "DELETE FROM \"usda_lab_method\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from usda_lab_method")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for usda_lab_method")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q usdaLabMethodQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no usdaLabMethodQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from usda_lab_method")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for usda_lab_method")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UsdaLabMethodSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(usdaLabMethodBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaLabMethodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"usda_lab_method\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaLabMethodPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from usdaLabMethod slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for usda_lab_method")
	}

	if len(usdaLabMethodAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UsdaLabMethod) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUsdaLabMethod(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsdaLabMethodSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UsdaLabMethodSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaLabMethodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"usda_lab_method\".* FROM \"usda_lab_method\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaLabMethodPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UsdaLabMethodSlice")
	}

	*o = slice

	return nil
}

// UsdaLabMethodExists checks if the UsdaLabMethod row exists.
func UsdaLabMethodExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"usda_lab_method\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if usda_lab_method exists")
	}

	return exists, nil
}
