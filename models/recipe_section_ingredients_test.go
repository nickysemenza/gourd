// Code generated by SQLBoiler 4.8.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRecipeSectionIngredients(t *testing.T) {
	t.Parallel()

	query := RecipeSectionIngredients()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRecipeSectionIngredientsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSectionIngredient{}
	if err = randomize.Struct(seed, o, recipeSectionIngredientDBTypes, true, recipeSectionIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionIngredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecipeSectionIngredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecipeSectionIngredientsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSectionIngredient{}
	if err = randomize.Struct(seed, o, recipeSectionIngredientDBTypes, true, recipeSectionIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionIngredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RecipeSectionIngredients().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecipeSectionIngredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecipeSectionIngredientsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSectionIngredient{}
	if err = randomize.Struct(seed, o, recipeSectionIngredientDBTypes, true, recipeSectionIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionIngredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RecipeSectionIngredientSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecipeSectionIngredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecipeSectionIngredientsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSectionIngredient{}
	if err = randomize.Struct(seed, o, recipeSectionIngredientDBTypes, true, recipeSectionIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionIngredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RecipeSectionIngredientExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if RecipeSectionIngredient exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RecipeSectionIngredientExists to return true, but got false.")
	}
}

func testRecipeSectionIngredientsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSectionIngredient{}
	if err = randomize.Struct(seed, o, recipeSectionIngredientDBTypes, true, recipeSectionIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionIngredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	recipeSectionIngredientFound, err := FindRecipeSectionIngredient(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if recipeSectionIngredientFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRecipeSectionIngredientsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSectionIngredient{}
	if err = randomize.Struct(seed, o, recipeSectionIngredientDBTypes, true, recipeSectionIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionIngredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RecipeSectionIngredients().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRecipeSectionIngredientsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSectionIngredient{}
	if err = randomize.Struct(seed, o, recipeSectionIngredientDBTypes, true, recipeSectionIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionIngredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RecipeSectionIngredients().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRecipeSectionIngredientsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	recipeSectionIngredientOne := &RecipeSectionIngredient{}
	recipeSectionIngredientTwo := &RecipeSectionIngredient{}
	if err = randomize.Struct(seed, recipeSectionIngredientOne, recipeSectionIngredientDBTypes, false, recipeSectionIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionIngredient struct: %s", err)
	}
	if err = randomize.Struct(seed, recipeSectionIngredientTwo, recipeSectionIngredientDBTypes, false, recipeSectionIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionIngredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = recipeSectionIngredientOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = recipeSectionIngredientTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RecipeSectionIngredients().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRecipeSectionIngredientsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	recipeSectionIngredientOne := &RecipeSectionIngredient{}
	recipeSectionIngredientTwo := &RecipeSectionIngredient{}
	if err = randomize.Struct(seed, recipeSectionIngredientOne, recipeSectionIngredientDBTypes, false, recipeSectionIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionIngredient struct: %s", err)
	}
	if err = randomize.Struct(seed, recipeSectionIngredientTwo, recipeSectionIngredientDBTypes, false, recipeSectionIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionIngredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = recipeSectionIngredientOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = recipeSectionIngredientTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecipeSectionIngredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func recipeSectionIngredientBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RecipeSectionIngredient) error {
	*o = RecipeSectionIngredient{}
	return nil
}

func recipeSectionIngredientAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RecipeSectionIngredient) error {
	*o = RecipeSectionIngredient{}
	return nil
}

func recipeSectionIngredientAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RecipeSectionIngredient) error {
	*o = RecipeSectionIngredient{}
	return nil
}

func recipeSectionIngredientBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RecipeSectionIngredient) error {
	*o = RecipeSectionIngredient{}
	return nil
}

func recipeSectionIngredientAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RecipeSectionIngredient) error {
	*o = RecipeSectionIngredient{}
	return nil
}

func recipeSectionIngredientBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RecipeSectionIngredient) error {
	*o = RecipeSectionIngredient{}
	return nil
}

func recipeSectionIngredientAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RecipeSectionIngredient) error {
	*o = RecipeSectionIngredient{}
	return nil
}

func recipeSectionIngredientBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RecipeSectionIngredient) error {
	*o = RecipeSectionIngredient{}
	return nil
}

func recipeSectionIngredientAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RecipeSectionIngredient) error {
	*o = RecipeSectionIngredient{}
	return nil
}

func testRecipeSectionIngredientsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RecipeSectionIngredient{}
	o := &RecipeSectionIngredient{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, recipeSectionIngredientDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RecipeSectionIngredient object: %s", err)
	}

	AddRecipeSectionIngredientHook(boil.BeforeInsertHook, recipeSectionIngredientBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	recipeSectionIngredientBeforeInsertHooks = []RecipeSectionIngredientHook{}

	AddRecipeSectionIngredientHook(boil.AfterInsertHook, recipeSectionIngredientAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	recipeSectionIngredientAfterInsertHooks = []RecipeSectionIngredientHook{}

	AddRecipeSectionIngredientHook(boil.AfterSelectHook, recipeSectionIngredientAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	recipeSectionIngredientAfterSelectHooks = []RecipeSectionIngredientHook{}

	AddRecipeSectionIngredientHook(boil.BeforeUpdateHook, recipeSectionIngredientBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	recipeSectionIngredientBeforeUpdateHooks = []RecipeSectionIngredientHook{}

	AddRecipeSectionIngredientHook(boil.AfterUpdateHook, recipeSectionIngredientAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	recipeSectionIngredientAfterUpdateHooks = []RecipeSectionIngredientHook{}

	AddRecipeSectionIngredientHook(boil.BeforeDeleteHook, recipeSectionIngredientBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	recipeSectionIngredientBeforeDeleteHooks = []RecipeSectionIngredientHook{}

	AddRecipeSectionIngredientHook(boil.AfterDeleteHook, recipeSectionIngredientAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	recipeSectionIngredientAfterDeleteHooks = []RecipeSectionIngredientHook{}

	AddRecipeSectionIngredientHook(boil.BeforeUpsertHook, recipeSectionIngredientBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	recipeSectionIngredientBeforeUpsertHooks = []RecipeSectionIngredientHook{}

	AddRecipeSectionIngredientHook(boil.AfterUpsertHook, recipeSectionIngredientAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	recipeSectionIngredientAfterUpsertHooks = []RecipeSectionIngredientHook{}
}

func testRecipeSectionIngredientsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSectionIngredient{}
	if err = randomize.Struct(seed, o, recipeSectionIngredientDBTypes, true, recipeSectionIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionIngredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecipeSectionIngredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRecipeSectionIngredientsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSectionIngredient{}
	if err = randomize.Struct(seed, o, recipeSectionIngredientDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RecipeSectionIngredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(recipeSectionIngredientColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RecipeSectionIngredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRecipeSectionIngredientToManySubstitutesForRecipeSectionIngredients(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RecipeSectionIngredient
	var b, c RecipeSectionIngredient

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recipeSectionIngredientDBTypes, true, recipeSectionIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionIngredient struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, recipeSectionIngredientDBTypes, false, recipeSectionIngredientColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, recipeSectionIngredientDBTypes, false, recipeSectionIngredientColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.SubstitutesFor, a.ID)
	queries.Assign(&c.SubstitutesFor, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SubstitutesForRecipeSectionIngredients().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.SubstitutesFor, b.SubstitutesFor) {
			bFound = true
		}
		if queries.Equal(v.SubstitutesFor, c.SubstitutesFor) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RecipeSectionIngredientSlice{&a}
	if err = a.L.LoadSubstitutesForRecipeSectionIngredients(ctx, tx, false, (*[]*RecipeSectionIngredient)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SubstitutesForRecipeSectionIngredients); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SubstitutesForRecipeSectionIngredients = nil
	if err = a.L.LoadSubstitutesForRecipeSectionIngredients(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SubstitutesForRecipeSectionIngredients); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRecipeSectionIngredientToManyAddOpSubstitutesForRecipeSectionIngredients(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RecipeSectionIngredient
	var b, c, d, e RecipeSectionIngredient

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recipeSectionIngredientDBTypes, false, strmangle.SetComplement(recipeSectionIngredientPrimaryKeyColumns, recipeSectionIngredientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RecipeSectionIngredient{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, recipeSectionIngredientDBTypes, false, strmangle.SetComplement(recipeSectionIngredientPrimaryKeyColumns, recipeSectionIngredientColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*RecipeSectionIngredient{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSubstitutesForRecipeSectionIngredients(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.SubstitutesFor) {
			t.Error("foreign key was wrong value", a.ID, first.SubstitutesFor)
		}
		if !queries.Equal(a.ID, second.SubstitutesFor) {
			t.Error("foreign key was wrong value", a.ID, second.SubstitutesFor)
		}

		if first.R.SubstitutesForRecipeSectionIngredient != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SubstitutesForRecipeSectionIngredient != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SubstitutesForRecipeSectionIngredients[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SubstitutesForRecipeSectionIngredients[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SubstitutesForRecipeSectionIngredients().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testRecipeSectionIngredientToManySetOpSubstitutesForRecipeSectionIngredients(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RecipeSectionIngredient
	var b, c, d, e RecipeSectionIngredient

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recipeSectionIngredientDBTypes, false, strmangle.SetComplement(recipeSectionIngredientPrimaryKeyColumns, recipeSectionIngredientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RecipeSectionIngredient{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, recipeSectionIngredientDBTypes, false, strmangle.SetComplement(recipeSectionIngredientPrimaryKeyColumns, recipeSectionIngredientColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetSubstitutesForRecipeSectionIngredients(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SubstitutesForRecipeSectionIngredients().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetSubstitutesForRecipeSectionIngredients(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SubstitutesForRecipeSectionIngredients().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SubstitutesFor) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SubstitutesFor) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.SubstitutesFor) {
		t.Error("foreign key was wrong value", a.ID, d.SubstitutesFor)
	}
	if !queries.Equal(a.ID, e.SubstitutesFor) {
		t.Error("foreign key was wrong value", a.ID, e.SubstitutesFor)
	}

	if b.R.SubstitutesForRecipeSectionIngredient != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SubstitutesForRecipeSectionIngredient != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SubstitutesForRecipeSectionIngredient != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.SubstitutesForRecipeSectionIngredient != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.SubstitutesForRecipeSectionIngredients[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.SubstitutesForRecipeSectionIngredients[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testRecipeSectionIngredientToManyRemoveOpSubstitutesForRecipeSectionIngredients(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RecipeSectionIngredient
	var b, c, d, e RecipeSectionIngredient

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recipeSectionIngredientDBTypes, false, strmangle.SetComplement(recipeSectionIngredientPrimaryKeyColumns, recipeSectionIngredientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RecipeSectionIngredient{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, recipeSectionIngredientDBTypes, false, strmangle.SetComplement(recipeSectionIngredientPrimaryKeyColumns, recipeSectionIngredientColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddSubstitutesForRecipeSectionIngredients(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SubstitutesForRecipeSectionIngredients().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveSubstitutesForRecipeSectionIngredients(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SubstitutesForRecipeSectionIngredients().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SubstitutesFor) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SubstitutesFor) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.SubstitutesForRecipeSectionIngredient != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SubstitutesForRecipeSectionIngredient != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SubstitutesForRecipeSectionIngredient != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.SubstitutesForRecipeSectionIngredient != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.SubstitutesForRecipeSectionIngredients) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.SubstitutesForRecipeSectionIngredients[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.SubstitutesForRecipeSectionIngredients[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testRecipeSectionIngredientToOneIngredientUsingRecipeSectionIngredientIngredient(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RecipeSectionIngredient
	var foreign Ingredient

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, recipeSectionIngredientDBTypes, true, recipeSectionIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionIngredient struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, ingredientDBTypes, false, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Ingredient, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.RecipeSectionIngredientIngredient().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RecipeSectionIngredientSlice{&local}
	if err = local.L.LoadRecipeSectionIngredientIngredient(ctx, tx, false, (*[]*RecipeSectionIngredient)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RecipeSectionIngredientIngredient == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.RecipeSectionIngredientIngredient = nil
	if err = local.L.LoadRecipeSectionIngredientIngredient(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RecipeSectionIngredientIngredient == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRecipeSectionIngredientToOneRecipeUsingRecipeSectionIngredientRecipe(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RecipeSectionIngredient
	var foreign Recipe

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, recipeSectionIngredientDBTypes, true, recipeSectionIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionIngredient struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, recipeDBTypes, false, recipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Recipe struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Recipe, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.RecipeSectionIngredientRecipe().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RecipeSectionIngredientSlice{&local}
	if err = local.L.LoadRecipeSectionIngredientRecipe(ctx, tx, false, (*[]*RecipeSectionIngredient)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RecipeSectionIngredientRecipe == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.RecipeSectionIngredientRecipe = nil
	if err = local.L.LoadRecipeSectionIngredientRecipe(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RecipeSectionIngredientRecipe == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRecipeSectionIngredientToOneRecipeSectionUsingSectionRecipeSection(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RecipeSectionIngredient
	var foreign RecipeSection

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, recipeSectionIngredientDBTypes, false, recipeSectionIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionIngredient struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, recipeSectionDBTypes, false, recipeSectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSection struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.Section = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.SectionRecipeSection().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RecipeSectionIngredientSlice{&local}
	if err = local.L.LoadSectionRecipeSection(ctx, tx, false, (*[]*RecipeSectionIngredient)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SectionRecipeSection == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SectionRecipeSection = nil
	if err = local.L.LoadSectionRecipeSection(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SectionRecipeSection == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRecipeSectionIngredientToOneRecipeSectionIngredientUsingSubstitutesForRecipeSectionIngredient(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RecipeSectionIngredient
	var foreign RecipeSectionIngredient

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, recipeSectionIngredientDBTypes, true, recipeSectionIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionIngredient struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, recipeSectionIngredientDBTypes, false, recipeSectionIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionIngredient struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.SubstitutesFor, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.SubstitutesForRecipeSectionIngredient().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RecipeSectionIngredientSlice{&local}
	if err = local.L.LoadSubstitutesForRecipeSectionIngredient(ctx, tx, false, (*[]*RecipeSectionIngredient)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SubstitutesForRecipeSectionIngredient == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SubstitutesForRecipeSectionIngredient = nil
	if err = local.L.LoadSubstitutesForRecipeSectionIngredient(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SubstitutesForRecipeSectionIngredient == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRecipeSectionIngredientToOneSetOpIngredientUsingRecipeSectionIngredientIngredient(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RecipeSectionIngredient
	var b, c Ingredient

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recipeSectionIngredientDBTypes, false, strmangle.SetComplement(recipeSectionIngredientPrimaryKeyColumns, recipeSectionIngredientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, ingredientDBTypes, false, strmangle.SetComplement(ingredientPrimaryKeyColumns, ingredientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, ingredientDBTypes, false, strmangle.SetComplement(ingredientPrimaryKeyColumns, ingredientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Ingredient{&b, &c} {
		err = a.SetRecipeSectionIngredientIngredient(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.RecipeSectionIngredientIngredient != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RecipeSectionIngredients[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Ingredient, x.ID) {
			t.Error("foreign key was wrong value", a.Ingredient)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Ingredient))
		reflect.Indirect(reflect.ValueOf(&a.Ingredient)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Ingredient, x.ID) {
			t.Error("foreign key was wrong value", a.Ingredient, x.ID)
		}
	}
}

func testRecipeSectionIngredientToOneRemoveOpIngredientUsingRecipeSectionIngredientIngredient(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RecipeSectionIngredient
	var b Ingredient

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recipeSectionIngredientDBTypes, false, strmangle.SetComplement(recipeSectionIngredientPrimaryKeyColumns, recipeSectionIngredientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, ingredientDBTypes, false, strmangle.SetComplement(ingredientPrimaryKeyColumns, ingredientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetRecipeSectionIngredientIngredient(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveRecipeSectionIngredientIngredient(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.RecipeSectionIngredientIngredient().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.RecipeSectionIngredientIngredient != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Ingredient) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.RecipeSectionIngredients) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testRecipeSectionIngredientToOneSetOpRecipeUsingRecipeSectionIngredientRecipe(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RecipeSectionIngredient
	var b, c Recipe

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recipeSectionIngredientDBTypes, false, strmangle.SetComplement(recipeSectionIngredientPrimaryKeyColumns, recipeSectionIngredientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, recipeDBTypes, false, strmangle.SetComplement(recipePrimaryKeyColumns, recipeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, recipeDBTypes, false, strmangle.SetComplement(recipePrimaryKeyColumns, recipeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Recipe{&b, &c} {
		err = a.SetRecipeSectionIngredientRecipe(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.RecipeSectionIngredientRecipe != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RecipeSectionIngredients[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Recipe, x.ID) {
			t.Error("foreign key was wrong value", a.Recipe)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Recipe))
		reflect.Indirect(reflect.ValueOf(&a.Recipe)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Recipe, x.ID) {
			t.Error("foreign key was wrong value", a.Recipe, x.ID)
		}
	}
}

func testRecipeSectionIngredientToOneRemoveOpRecipeUsingRecipeSectionIngredientRecipe(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RecipeSectionIngredient
	var b Recipe

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recipeSectionIngredientDBTypes, false, strmangle.SetComplement(recipeSectionIngredientPrimaryKeyColumns, recipeSectionIngredientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, recipeDBTypes, false, strmangle.SetComplement(recipePrimaryKeyColumns, recipeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetRecipeSectionIngredientRecipe(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveRecipeSectionIngredientRecipe(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.RecipeSectionIngredientRecipe().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.RecipeSectionIngredientRecipe != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Recipe) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.RecipeSectionIngredients) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testRecipeSectionIngredientToOneSetOpRecipeSectionUsingSectionRecipeSection(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RecipeSectionIngredient
	var b, c RecipeSection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recipeSectionIngredientDBTypes, false, strmangle.SetComplement(recipeSectionIngredientPrimaryKeyColumns, recipeSectionIngredientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, recipeSectionDBTypes, false, strmangle.SetComplement(recipeSectionPrimaryKeyColumns, recipeSectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, recipeSectionDBTypes, false, strmangle.SetComplement(recipeSectionPrimaryKeyColumns, recipeSectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*RecipeSection{&b, &c} {
		err = a.SetSectionRecipeSection(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SectionRecipeSection != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SectionRecipeSectionIngredients[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Section != x.ID {
			t.Error("foreign key was wrong value", a.Section)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Section))
		reflect.Indirect(reflect.ValueOf(&a.Section)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Section != x.ID {
			t.Error("foreign key was wrong value", a.Section, x.ID)
		}
	}
}
func testRecipeSectionIngredientToOneSetOpRecipeSectionIngredientUsingSubstitutesForRecipeSectionIngredient(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RecipeSectionIngredient
	var b, c RecipeSectionIngredient

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recipeSectionIngredientDBTypes, false, strmangle.SetComplement(recipeSectionIngredientPrimaryKeyColumns, recipeSectionIngredientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, recipeSectionIngredientDBTypes, false, strmangle.SetComplement(recipeSectionIngredientPrimaryKeyColumns, recipeSectionIngredientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, recipeSectionIngredientDBTypes, false, strmangle.SetComplement(recipeSectionIngredientPrimaryKeyColumns, recipeSectionIngredientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*RecipeSectionIngredient{&b, &c} {
		err = a.SetSubstitutesForRecipeSectionIngredient(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SubstitutesForRecipeSectionIngredient != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SubstitutesForRecipeSectionIngredients[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.SubstitutesFor, x.ID) {
			t.Error("foreign key was wrong value", a.SubstitutesFor)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SubstitutesFor))
		reflect.Indirect(reflect.ValueOf(&a.SubstitutesFor)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.SubstitutesFor, x.ID) {
			t.Error("foreign key was wrong value", a.SubstitutesFor, x.ID)
		}
	}
}

func testRecipeSectionIngredientToOneRemoveOpRecipeSectionIngredientUsingSubstitutesForRecipeSectionIngredient(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RecipeSectionIngredient
	var b RecipeSectionIngredient

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recipeSectionIngredientDBTypes, false, strmangle.SetComplement(recipeSectionIngredientPrimaryKeyColumns, recipeSectionIngredientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, recipeSectionIngredientDBTypes, false, strmangle.SetComplement(recipeSectionIngredientPrimaryKeyColumns, recipeSectionIngredientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSubstitutesForRecipeSectionIngredient(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSubstitutesForRecipeSectionIngredient(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.SubstitutesForRecipeSectionIngredient().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.SubstitutesForRecipeSectionIngredient != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.SubstitutesFor) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.SubstitutesForRecipeSectionIngredients) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testRecipeSectionIngredientsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSectionIngredient{}
	if err = randomize.Struct(seed, o, recipeSectionIngredientDBTypes, true, recipeSectionIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionIngredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRecipeSectionIngredientsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSectionIngredient{}
	if err = randomize.Struct(seed, o, recipeSectionIngredientDBTypes, true, recipeSectionIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionIngredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RecipeSectionIngredientSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRecipeSectionIngredientsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSectionIngredient{}
	if err = randomize.Struct(seed, o, recipeSectionIngredientDBTypes, true, recipeSectionIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionIngredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RecipeSectionIngredients().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	recipeSectionIngredientDBTypes = map[string]string{`ID`: `text`, `Section`: `text`, `Sort`: `integer`, `Ingredient`: `text`, `Recipe`: `text`, `Amounts`: `json`, `Adjective`: `text`, `Original`: `text`, `Optional`: `boolean`, `SubstitutesFor`: `text`}
	_                              = bytes.MinRead
)

func testRecipeSectionIngredientsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(recipeSectionIngredientPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(recipeSectionIngredientAllColumns) == len(recipeSectionIngredientPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSectionIngredient{}
	if err = randomize.Struct(seed, o, recipeSectionIngredientDBTypes, true, recipeSectionIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionIngredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecipeSectionIngredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, recipeSectionIngredientDBTypes, true, recipeSectionIngredientPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionIngredient struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRecipeSectionIngredientsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(recipeSectionIngredientAllColumns) == len(recipeSectionIngredientPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSectionIngredient{}
	if err = randomize.Struct(seed, o, recipeSectionIngredientDBTypes, true, recipeSectionIngredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionIngredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecipeSectionIngredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, recipeSectionIngredientDBTypes, true, recipeSectionIngredientPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionIngredient struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(recipeSectionIngredientAllColumns, recipeSectionIngredientPrimaryKeyColumns) {
		fields = recipeSectionIngredientAllColumns
	} else {
		fields = strmangle.SetComplement(
			recipeSectionIngredientAllColumns,
			recipeSectionIngredientPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RecipeSectionIngredientSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRecipeSectionIngredientsUpsert(t *testing.T) {
	t.Parallel()

	if len(recipeSectionIngredientAllColumns) == len(recipeSectionIngredientPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RecipeSectionIngredient{}
	if err = randomize.Struct(seed, &o, recipeSectionIngredientDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RecipeSectionIngredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RecipeSectionIngredient: %s", err)
	}

	count, err := RecipeSectionIngredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, recipeSectionIngredientDBTypes, false, recipeSectionIngredientPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionIngredient struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RecipeSectionIngredient: %s", err)
	}

	count, err = RecipeSectionIngredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
