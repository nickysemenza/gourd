// Code generated by SQLBoiler 4.8.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRecipeSectionInstructions(t *testing.T) {
	t.Parallel()

	query := RecipeSectionInstructions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRecipeSectionInstructionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSectionInstruction{}
	if err = randomize.Struct(seed, o, recipeSectionInstructionDBTypes, true, recipeSectionInstructionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionInstruction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecipeSectionInstructions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecipeSectionInstructionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSectionInstruction{}
	if err = randomize.Struct(seed, o, recipeSectionInstructionDBTypes, true, recipeSectionInstructionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionInstruction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RecipeSectionInstructions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecipeSectionInstructions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecipeSectionInstructionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSectionInstruction{}
	if err = randomize.Struct(seed, o, recipeSectionInstructionDBTypes, true, recipeSectionInstructionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionInstruction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RecipeSectionInstructionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecipeSectionInstructions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecipeSectionInstructionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSectionInstruction{}
	if err = randomize.Struct(seed, o, recipeSectionInstructionDBTypes, true, recipeSectionInstructionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionInstruction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RecipeSectionInstructionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if RecipeSectionInstruction exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RecipeSectionInstructionExists to return true, but got false.")
	}
}

func testRecipeSectionInstructionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSectionInstruction{}
	if err = randomize.Struct(seed, o, recipeSectionInstructionDBTypes, true, recipeSectionInstructionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionInstruction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	recipeSectionInstructionFound, err := FindRecipeSectionInstruction(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if recipeSectionInstructionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRecipeSectionInstructionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSectionInstruction{}
	if err = randomize.Struct(seed, o, recipeSectionInstructionDBTypes, true, recipeSectionInstructionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionInstruction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RecipeSectionInstructions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRecipeSectionInstructionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSectionInstruction{}
	if err = randomize.Struct(seed, o, recipeSectionInstructionDBTypes, true, recipeSectionInstructionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionInstruction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RecipeSectionInstructions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRecipeSectionInstructionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	recipeSectionInstructionOne := &RecipeSectionInstruction{}
	recipeSectionInstructionTwo := &RecipeSectionInstruction{}
	if err = randomize.Struct(seed, recipeSectionInstructionOne, recipeSectionInstructionDBTypes, false, recipeSectionInstructionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionInstruction struct: %s", err)
	}
	if err = randomize.Struct(seed, recipeSectionInstructionTwo, recipeSectionInstructionDBTypes, false, recipeSectionInstructionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionInstruction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = recipeSectionInstructionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = recipeSectionInstructionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RecipeSectionInstructions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRecipeSectionInstructionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	recipeSectionInstructionOne := &RecipeSectionInstruction{}
	recipeSectionInstructionTwo := &RecipeSectionInstruction{}
	if err = randomize.Struct(seed, recipeSectionInstructionOne, recipeSectionInstructionDBTypes, false, recipeSectionInstructionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionInstruction struct: %s", err)
	}
	if err = randomize.Struct(seed, recipeSectionInstructionTwo, recipeSectionInstructionDBTypes, false, recipeSectionInstructionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionInstruction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = recipeSectionInstructionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = recipeSectionInstructionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecipeSectionInstructions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func recipeSectionInstructionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RecipeSectionInstruction) error {
	*o = RecipeSectionInstruction{}
	return nil
}

func recipeSectionInstructionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RecipeSectionInstruction) error {
	*o = RecipeSectionInstruction{}
	return nil
}

func recipeSectionInstructionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RecipeSectionInstruction) error {
	*o = RecipeSectionInstruction{}
	return nil
}

func recipeSectionInstructionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RecipeSectionInstruction) error {
	*o = RecipeSectionInstruction{}
	return nil
}

func recipeSectionInstructionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RecipeSectionInstruction) error {
	*o = RecipeSectionInstruction{}
	return nil
}

func recipeSectionInstructionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RecipeSectionInstruction) error {
	*o = RecipeSectionInstruction{}
	return nil
}

func recipeSectionInstructionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RecipeSectionInstruction) error {
	*o = RecipeSectionInstruction{}
	return nil
}

func recipeSectionInstructionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RecipeSectionInstruction) error {
	*o = RecipeSectionInstruction{}
	return nil
}

func recipeSectionInstructionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RecipeSectionInstruction) error {
	*o = RecipeSectionInstruction{}
	return nil
}

func testRecipeSectionInstructionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RecipeSectionInstruction{}
	o := &RecipeSectionInstruction{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, recipeSectionInstructionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RecipeSectionInstruction object: %s", err)
	}

	AddRecipeSectionInstructionHook(boil.BeforeInsertHook, recipeSectionInstructionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	recipeSectionInstructionBeforeInsertHooks = []RecipeSectionInstructionHook{}

	AddRecipeSectionInstructionHook(boil.AfterInsertHook, recipeSectionInstructionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	recipeSectionInstructionAfterInsertHooks = []RecipeSectionInstructionHook{}

	AddRecipeSectionInstructionHook(boil.AfterSelectHook, recipeSectionInstructionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	recipeSectionInstructionAfterSelectHooks = []RecipeSectionInstructionHook{}

	AddRecipeSectionInstructionHook(boil.BeforeUpdateHook, recipeSectionInstructionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	recipeSectionInstructionBeforeUpdateHooks = []RecipeSectionInstructionHook{}

	AddRecipeSectionInstructionHook(boil.AfterUpdateHook, recipeSectionInstructionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	recipeSectionInstructionAfterUpdateHooks = []RecipeSectionInstructionHook{}

	AddRecipeSectionInstructionHook(boil.BeforeDeleteHook, recipeSectionInstructionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	recipeSectionInstructionBeforeDeleteHooks = []RecipeSectionInstructionHook{}

	AddRecipeSectionInstructionHook(boil.AfterDeleteHook, recipeSectionInstructionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	recipeSectionInstructionAfterDeleteHooks = []RecipeSectionInstructionHook{}

	AddRecipeSectionInstructionHook(boil.BeforeUpsertHook, recipeSectionInstructionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	recipeSectionInstructionBeforeUpsertHooks = []RecipeSectionInstructionHook{}

	AddRecipeSectionInstructionHook(boil.AfterUpsertHook, recipeSectionInstructionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	recipeSectionInstructionAfterUpsertHooks = []RecipeSectionInstructionHook{}
}

func testRecipeSectionInstructionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSectionInstruction{}
	if err = randomize.Struct(seed, o, recipeSectionInstructionDBTypes, true, recipeSectionInstructionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionInstruction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecipeSectionInstructions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRecipeSectionInstructionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSectionInstruction{}
	if err = randomize.Struct(seed, o, recipeSectionInstructionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RecipeSectionInstruction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(recipeSectionInstructionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RecipeSectionInstructions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRecipeSectionInstructionToOneRecipeSectionUsingSectionRecipeSection(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RecipeSectionInstruction
	var foreign RecipeSection

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, recipeSectionInstructionDBTypes, false, recipeSectionInstructionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionInstruction struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, recipeSectionDBTypes, false, recipeSectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSection struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.Section = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.SectionRecipeSection().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RecipeSectionInstructionSlice{&local}
	if err = local.L.LoadSectionRecipeSection(ctx, tx, false, (*[]*RecipeSectionInstruction)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SectionRecipeSection == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SectionRecipeSection = nil
	if err = local.L.LoadSectionRecipeSection(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SectionRecipeSection == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRecipeSectionInstructionToOneSetOpRecipeSectionUsingSectionRecipeSection(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RecipeSectionInstruction
	var b, c RecipeSection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recipeSectionInstructionDBTypes, false, strmangle.SetComplement(recipeSectionInstructionPrimaryKeyColumns, recipeSectionInstructionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, recipeSectionDBTypes, false, strmangle.SetComplement(recipeSectionPrimaryKeyColumns, recipeSectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, recipeSectionDBTypes, false, strmangle.SetComplement(recipeSectionPrimaryKeyColumns, recipeSectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*RecipeSection{&b, &c} {
		err = a.SetSectionRecipeSection(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SectionRecipeSection != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SectionRecipeSectionInstructions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Section != x.ID {
			t.Error("foreign key was wrong value", a.Section)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Section))
		reflect.Indirect(reflect.ValueOf(&a.Section)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Section != x.ID {
			t.Error("foreign key was wrong value", a.Section, x.ID)
		}
	}
}

func testRecipeSectionInstructionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSectionInstruction{}
	if err = randomize.Struct(seed, o, recipeSectionInstructionDBTypes, true, recipeSectionInstructionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionInstruction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRecipeSectionInstructionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSectionInstruction{}
	if err = randomize.Struct(seed, o, recipeSectionInstructionDBTypes, true, recipeSectionInstructionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionInstruction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RecipeSectionInstructionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRecipeSectionInstructionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSectionInstruction{}
	if err = randomize.Struct(seed, o, recipeSectionInstructionDBTypes, true, recipeSectionInstructionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionInstruction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RecipeSectionInstructions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	recipeSectionInstructionDBTypes = map[string]string{`ID`: `text`, `Section`: `text`, `Sort`: `integer`, `Instruction`: `text`}
	_                               = bytes.MinRead
)

func testRecipeSectionInstructionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(recipeSectionInstructionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(recipeSectionInstructionAllColumns) == len(recipeSectionInstructionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSectionInstruction{}
	if err = randomize.Struct(seed, o, recipeSectionInstructionDBTypes, true, recipeSectionInstructionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionInstruction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecipeSectionInstructions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, recipeSectionInstructionDBTypes, true, recipeSectionInstructionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionInstruction struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRecipeSectionInstructionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(recipeSectionInstructionAllColumns) == len(recipeSectionInstructionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSectionInstruction{}
	if err = randomize.Struct(seed, o, recipeSectionInstructionDBTypes, true, recipeSectionInstructionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionInstruction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecipeSectionInstructions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, recipeSectionInstructionDBTypes, true, recipeSectionInstructionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionInstruction struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(recipeSectionInstructionAllColumns, recipeSectionInstructionPrimaryKeyColumns) {
		fields = recipeSectionInstructionAllColumns
	} else {
		fields = strmangle.SetComplement(
			recipeSectionInstructionAllColumns,
			recipeSectionInstructionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RecipeSectionInstructionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRecipeSectionInstructionsUpsert(t *testing.T) {
	t.Parallel()

	if len(recipeSectionInstructionAllColumns) == len(recipeSectionInstructionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RecipeSectionInstruction{}
	if err = randomize.Struct(seed, &o, recipeSectionInstructionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RecipeSectionInstruction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RecipeSectionInstruction: %s", err)
	}

	count, err := RecipeSectionInstructions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, recipeSectionInstructionDBTypes, false, recipeSectionInstructionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecipeSectionInstruction struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RecipeSectionInstruction: %s", err)
	}

	count, err = RecipeSectionInstructions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
