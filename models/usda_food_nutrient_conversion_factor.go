// Code generated by SQLBoiler 4.8.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UsdaFoodNutrientConversionFactor is an object representing the database table.
type UsdaFoodNutrientConversionFactor struct {
	ID    int      `boil:"id" json:"id" toml:"id" yaml:"id"`
	FDCID null.Int `boil:"fdc_id" json:"fdc_id,omitempty" toml:"fdc_id" yaml:"fdc_id,omitempty"`

	R *usdaFoodNutrientConversionFactorR `boil:"rel" json:"rel" toml:"rel" yaml:"rel"`
	L usdaFoodNutrientConversionFactorL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UsdaFoodNutrientConversionFactorColumns = struct {
	ID    string
	FDCID string
}{
	ID:    "id",
	FDCID: "fdc_id",
}

var UsdaFoodNutrientConversionFactorTableColumns = struct {
	ID    string
	FDCID string
}{
	ID:    "usda_food_nutrient_conversion_factor.id",
	FDCID: "usda_food_nutrient_conversion_factor.fdc_id",
}

// Generated where

var UsdaFoodNutrientConversionFactorWhere = struct {
	ID    whereHelperint
	FDCID whereHelpernull_Int
}{
	ID:    whereHelperint{field: "\"usda_food_nutrient_conversion_factor\".\"id\""},
	FDCID: whereHelpernull_Int{field: "\"usda_food_nutrient_conversion_factor\".\"fdc_id\""},
}

// UsdaFoodNutrientConversionFactorRels is where relationship names are stored.
var UsdaFoodNutrientConversionFactorRels = struct {
	FDC                                                         string
	FoodNutrientConversionFactorUsdaFoodProteinConversionFactor string
}{
	FDC: "FDC",
	FoodNutrientConversionFactorUsdaFoodProteinConversionFactor: "FoodNutrientConversionFactorUsdaFoodProteinConversionFactor",
}

// usdaFoodNutrientConversionFactorR is where relationships are stored.
type usdaFoodNutrientConversionFactorR struct {
	FDC                                                         *UsdaFood                        `boil:"FDC" json:"FDC" toml:"FDC" yaml:"FDC"`
	FoodNutrientConversionFactorUsdaFoodProteinConversionFactor *UsdaFoodProteinConversionFactor `boil:"FoodNutrientConversionFactorUsdaFoodProteinConversionFactor" json:"FoodNutrientConversionFactorUsdaFoodProteinConversionFactor" toml:"FoodNutrientConversionFactorUsdaFoodProteinConversionFactor" yaml:"FoodNutrientConversionFactorUsdaFoodProteinConversionFactor"`
}

// NewStruct creates a new relationship struct
func (*usdaFoodNutrientConversionFactorR) NewStruct() *usdaFoodNutrientConversionFactorR {
	return &usdaFoodNutrientConversionFactorR{}
}

// usdaFoodNutrientConversionFactorL is where Load methods for each relationship are stored.
type usdaFoodNutrientConversionFactorL struct{}

var (
	usdaFoodNutrientConversionFactorAllColumns            = []string{"id", "fdc_id"}
	usdaFoodNutrientConversionFactorColumnsWithoutDefault = []string{"id", "fdc_id"}
	usdaFoodNutrientConversionFactorColumnsWithDefault    = []string{}
	usdaFoodNutrientConversionFactorPrimaryKeyColumns     = []string{"id"}
)

type (
	// UsdaFoodNutrientConversionFactorSlice is an alias for a slice of pointers to UsdaFoodNutrientConversionFactor.
	// This should almost always be used instead of []UsdaFoodNutrientConversionFactor.
	UsdaFoodNutrientConversionFactorSlice []*UsdaFoodNutrientConversionFactor
	// UsdaFoodNutrientConversionFactorHook is the signature for custom UsdaFoodNutrientConversionFactor hook methods
	UsdaFoodNutrientConversionFactorHook func(context.Context, boil.ContextExecutor, *UsdaFoodNutrientConversionFactor) error

	usdaFoodNutrientConversionFactorQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usdaFoodNutrientConversionFactorType                 = reflect.TypeOf(&UsdaFoodNutrientConversionFactor{})
	usdaFoodNutrientConversionFactorMapping              = queries.MakeStructMapping(usdaFoodNutrientConversionFactorType)
	usdaFoodNutrientConversionFactorPrimaryKeyMapping, _ = queries.BindMapping(usdaFoodNutrientConversionFactorType, usdaFoodNutrientConversionFactorMapping, usdaFoodNutrientConversionFactorPrimaryKeyColumns)
	usdaFoodNutrientConversionFactorInsertCacheMut       sync.RWMutex
	usdaFoodNutrientConversionFactorInsertCache          = make(map[string]insertCache)
	usdaFoodNutrientConversionFactorUpdateCacheMut       sync.RWMutex
	usdaFoodNutrientConversionFactorUpdateCache          = make(map[string]updateCache)
	usdaFoodNutrientConversionFactorUpsertCacheMut       sync.RWMutex
	usdaFoodNutrientConversionFactorUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var usdaFoodNutrientConversionFactorBeforeInsertHooks []UsdaFoodNutrientConversionFactorHook
var usdaFoodNutrientConversionFactorBeforeUpdateHooks []UsdaFoodNutrientConversionFactorHook
var usdaFoodNutrientConversionFactorBeforeDeleteHooks []UsdaFoodNutrientConversionFactorHook
var usdaFoodNutrientConversionFactorBeforeUpsertHooks []UsdaFoodNutrientConversionFactorHook

var usdaFoodNutrientConversionFactorAfterInsertHooks []UsdaFoodNutrientConversionFactorHook
var usdaFoodNutrientConversionFactorAfterSelectHooks []UsdaFoodNutrientConversionFactorHook
var usdaFoodNutrientConversionFactorAfterUpdateHooks []UsdaFoodNutrientConversionFactorHook
var usdaFoodNutrientConversionFactorAfterDeleteHooks []UsdaFoodNutrientConversionFactorHook
var usdaFoodNutrientConversionFactorAfterUpsertHooks []UsdaFoodNutrientConversionFactorHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UsdaFoodNutrientConversionFactor) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientConversionFactorBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UsdaFoodNutrientConversionFactor) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientConversionFactorBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UsdaFoodNutrientConversionFactor) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientConversionFactorBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UsdaFoodNutrientConversionFactor) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientConversionFactorBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UsdaFoodNutrientConversionFactor) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientConversionFactorAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UsdaFoodNutrientConversionFactor) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientConversionFactorAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UsdaFoodNutrientConversionFactor) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientConversionFactorAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UsdaFoodNutrientConversionFactor) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientConversionFactorAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UsdaFoodNutrientConversionFactor) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientConversionFactorAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUsdaFoodNutrientConversionFactorHook registers your hook function for all future operations.
func AddUsdaFoodNutrientConversionFactorHook(hookPoint boil.HookPoint, usdaFoodNutrientConversionFactorHook UsdaFoodNutrientConversionFactorHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		usdaFoodNutrientConversionFactorBeforeInsertHooks = append(usdaFoodNutrientConversionFactorBeforeInsertHooks, usdaFoodNutrientConversionFactorHook)
	case boil.BeforeUpdateHook:
		usdaFoodNutrientConversionFactorBeforeUpdateHooks = append(usdaFoodNutrientConversionFactorBeforeUpdateHooks, usdaFoodNutrientConversionFactorHook)
	case boil.BeforeDeleteHook:
		usdaFoodNutrientConversionFactorBeforeDeleteHooks = append(usdaFoodNutrientConversionFactorBeforeDeleteHooks, usdaFoodNutrientConversionFactorHook)
	case boil.BeforeUpsertHook:
		usdaFoodNutrientConversionFactorBeforeUpsertHooks = append(usdaFoodNutrientConversionFactorBeforeUpsertHooks, usdaFoodNutrientConversionFactorHook)
	case boil.AfterInsertHook:
		usdaFoodNutrientConversionFactorAfterInsertHooks = append(usdaFoodNutrientConversionFactorAfterInsertHooks, usdaFoodNutrientConversionFactorHook)
	case boil.AfterSelectHook:
		usdaFoodNutrientConversionFactorAfterSelectHooks = append(usdaFoodNutrientConversionFactorAfterSelectHooks, usdaFoodNutrientConversionFactorHook)
	case boil.AfterUpdateHook:
		usdaFoodNutrientConversionFactorAfterUpdateHooks = append(usdaFoodNutrientConversionFactorAfterUpdateHooks, usdaFoodNutrientConversionFactorHook)
	case boil.AfterDeleteHook:
		usdaFoodNutrientConversionFactorAfterDeleteHooks = append(usdaFoodNutrientConversionFactorAfterDeleteHooks, usdaFoodNutrientConversionFactorHook)
	case boil.AfterUpsertHook:
		usdaFoodNutrientConversionFactorAfterUpsertHooks = append(usdaFoodNutrientConversionFactorAfterUpsertHooks, usdaFoodNutrientConversionFactorHook)
	}
}

// One returns a single usdaFoodNutrientConversionFactor record from the query.
func (q usdaFoodNutrientConversionFactorQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UsdaFoodNutrientConversionFactor, error) {
	o := &UsdaFoodNutrientConversionFactor{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for usda_food_nutrient_conversion_factor")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UsdaFoodNutrientConversionFactor records from the query.
func (q usdaFoodNutrientConversionFactorQuery) All(ctx context.Context, exec boil.ContextExecutor) (UsdaFoodNutrientConversionFactorSlice, error) {
	var o []*UsdaFoodNutrientConversionFactor

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UsdaFoodNutrientConversionFactor slice")
	}

	if len(usdaFoodNutrientConversionFactorAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UsdaFoodNutrientConversionFactor records in the query.
func (q usdaFoodNutrientConversionFactorQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count usda_food_nutrient_conversion_factor rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q usdaFoodNutrientConversionFactorQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if usda_food_nutrient_conversion_factor exists")
	}

	return count > 0, nil
}

// FDC pointed to by the foreign key.
func (o *UsdaFoodNutrientConversionFactor) FDC(mods ...qm.QueryMod) usdaFoodQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"fdc_id\" = ?", o.FDCID),
	}

	queryMods = append(queryMods, mods...)

	query := UsdaFoods(queryMods...)
	queries.SetFrom(query.Query, "\"usda_food\"")

	return query
}

// FoodNutrientConversionFactorUsdaFoodProteinConversionFactor pointed to by the foreign key.
func (o *UsdaFoodNutrientConversionFactor) FoodNutrientConversionFactorUsdaFoodProteinConversionFactor(mods ...qm.QueryMod) usdaFoodProteinConversionFactorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"food_nutrient_conversion_factor_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := UsdaFoodProteinConversionFactors(queryMods...)
	queries.SetFrom(query.Query, "\"usda_food_protein_conversion_factor\"")

	return query
}

// LoadFDC allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (usdaFoodNutrientConversionFactorL) LoadFDC(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsdaFoodNutrientConversionFactor interface{}, mods queries.Applicator) error {
	var slice []*UsdaFoodNutrientConversionFactor
	var object *UsdaFoodNutrientConversionFactor

	if singular {
		object = maybeUsdaFoodNutrientConversionFactor.(*UsdaFoodNutrientConversionFactor)
	} else {
		slice = *maybeUsdaFoodNutrientConversionFactor.(*[]*UsdaFoodNutrientConversionFactor)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &usdaFoodNutrientConversionFactorR{}
		}
		if !queries.IsNil(object.FDCID) {
			args = append(args, object.FDCID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usdaFoodNutrientConversionFactorR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.FDCID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.FDCID) {
				args = append(args, obj.FDCID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`usda_food`),
		qm.WhereIn(`usda_food.fdc_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UsdaFood")
	}

	var resultSlice []*UsdaFood
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UsdaFood")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for usda_food")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usda_food")
	}

	if len(usdaFoodNutrientConversionFactorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FDC = foreign
		if foreign.R == nil {
			foreign.R = &usdaFoodR{}
		}
		foreign.R.FDCUsdaFoodNutrientConversionFactors = append(foreign.R.FDCUsdaFoodNutrientConversionFactors, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.FDCID, foreign.FDCID) {
				local.R.FDC = foreign
				if foreign.R == nil {
					foreign.R = &usdaFoodR{}
				}
				foreign.R.FDCUsdaFoodNutrientConversionFactors = append(foreign.R.FDCUsdaFoodNutrientConversionFactors, local)
				break
			}
		}
	}

	return nil
}

// LoadFoodNutrientConversionFactorUsdaFoodProteinConversionFactor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (usdaFoodNutrientConversionFactorL) LoadFoodNutrientConversionFactorUsdaFoodProteinConversionFactor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsdaFoodNutrientConversionFactor interface{}, mods queries.Applicator) error {
	var slice []*UsdaFoodNutrientConversionFactor
	var object *UsdaFoodNutrientConversionFactor

	if singular {
		object = maybeUsdaFoodNutrientConversionFactor.(*UsdaFoodNutrientConversionFactor)
	} else {
		slice = *maybeUsdaFoodNutrientConversionFactor.(*[]*UsdaFoodNutrientConversionFactor)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &usdaFoodNutrientConversionFactorR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usdaFoodNutrientConversionFactorR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`usda_food_protein_conversion_factor`),
		qm.WhereIn(`usda_food_protein_conversion_factor.food_nutrient_conversion_factor_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UsdaFoodProteinConversionFactor")
	}

	var resultSlice []*UsdaFoodProteinConversionFactor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UsdaFoodProteinConversionFactor")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for usda_food_protein_conversion_factor")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usda_food_protein_conversion_factor")
	}

	if len(usdaFoodNutrientConversionFactorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FoodNutrientConversionFactorUsdaFoodProteinConversionFactor = foreign
		if foreign.R == nil {
			foreign.R = &usdaFoodProteinConversionFactorR{}
		}
		foreign.R.FoodNutrientConversionFactor = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.FoodNutrientConversionFactorID {
				local.R.FoodNutrientConversionFactorUsdaFoodProteinConversionFactor = foreign
				if foreign.R == nil {
					foreign.R = &usdaFoodProteinConversionFactorR{}
				}
				foreign.R.FoodNutrientConversionFactor = local
				break
			}
		}
	}

	return nil
}

// SetFDC of the usdaFoodNutrientConversionFactor to the related item.
// Sets o.R.FDC to related.
// Adds o to related.R.FDCUsdaFoodNutrientConversionFactors.
func (o *UsdaFoodNutrientConversionFactor) SetFDC(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UsdaFood) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"usda_food_nutrient_conversion_factor\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"fdc_id"}),
		strmangle.WhereClause("\"", "\"", 2, usdaFoodNutrientConversionFactorPrimaryKeyColumns),
	)
	values := []interface{}{related.FDCID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.FDCID, related.FDCID)
	if o.R == nil {
		o.R = &usdaFoodNutrientConversionFactorR{
			FDC: related,
		}
	} else {
		o.R.FDC = related
	}

	if related.R == nil {
		related.R = &usdaFoodR{
			FDCUsdaFoodNutrientConversionFactors: UsdaFoodNutrientConversionFactorSlice{o},
		}
	} else {
		related.R.FDCUsdaFoodNutrientConversionFactors = append(related.R.FDCUsdaFoodNutrientConversionFactors, o)
	}

	return nil
}

// RemoveFDC relationship.
// Sets o.R.FDC to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *UsdaFoodNutrientConversionFactor) RemoveFDC(ctx context.Context, exec boil.ContextExecutor, related *UsdaFood) error {
	var err error

	queries.SetScanner(&o.FDCID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("fdc_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.FDC = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.FDCUsdaFoodNutrientConversionFactors {
		if queries.Equal(o.FDCID, ri.FDCID) {
			continue
		}

		ln := len(related.R.FDCUsdaFoodNutrientConversionFactors)
		if ln > 1 && i < ln-1 {
			related.R.FDCUsdaFoodNutrientConversionFactors[i] = related.R.FDCUsdaFoodNutrientConversionFactors[ln-1]
		}
		related.R.FDCUsdaFoodNutrientConversionFactors = related.R.FDCUsdaFoodNutrientConversionFactors[:ln-1]
		break
	}
	return nil
}

// SetFoodNutrientConversionFactorUsdaFoodProteinConversionFactor of the usdaFoodNutrientConversionFactor to the related item.
// Sets o.R.FoodNutrientConversionFactorUsdaFoodProteinConversionFactor to related.
// Adds o to related.R.FoodNutrientConversionFactor.
func (o *UsdaFoodNutrientConversionFactor) SetFoodNutrientConversionFactorUsdaFoodProteinConversionFactor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UsdaFoodProteinConversionFactor) error {
	var err error

	if insert {
		related.FoodNutrientConversionFactorID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"usda_food_protein_conversion_factor\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"food_nutrient_conversion_factor_id"}),
			strmangle.WhereClause("\"", "\"", 2, usdaFoodProteinConversionFactorPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.FoodNutrientConversionFactorID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.FoodNutrientConversionFactorID = o.ID

	}

	if o.R == nil {
		o.R = &usdaFoodNutrientConversionFactorR{
			FoodNutrientConversionFactorUsdaFoodProteinConversionFactor: related,
		}
	} else {
		o.R.FoodNutrientConversionFactorUsdaFoodProteinConversionFactor = related
	}

	if related.R == nil {
		related.R = &usdaFoodProteinConversionFactorR{
			FoodNutrientConversionFactor: o,
		}
	} else {
		related.R.FoodNutrientConversionFactor = o
	}
	return nil
}

// UsdaFoodNutrientConversionFactors retrieves all the records using an executor.
func UsdaFoodNutrientConversionFactors(mods ...qm.QueryMod) usdaFoodNutrientConversionFactorQuery {
	mods = append(mods, qm.From("\"usda_food_nutrient_conversion_factor\""))
	return usdaFoodNutrientConversionFactorQuery{NewQuery(mods...)}
}

// FindUsdaFoodNutrientConversionFactor retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUsdaFoodNutrientConversionFactor(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UsdaFoodNutrientConversionFactor, error) {
	usdaFoodNutrientConversionFactorObj := &UsdaFoodNutrientConversionFactor{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"usda_food_nutrient_conversion_factor\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, usdaFoodNutrientConversionFactorObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from usda_food_nutrient_conversion_factor")
	}

	if err = usdaFoodNutrientConversionFactorObj.doAfterSelectHooks(ctx, exec); err != nil {
		return usdaFoodNutrientConversionFactorObj, err
	}

	return usdaFoodNutrientConversionFactorObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UsdaFoodNutrientConversionFactor) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no usda_food_nutrient_conversion_factor provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaFoodNutrientConversionFactorColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	usdaFoodNutrientConversionFactorInsertCacheMut.RLock()
	cache, cached := usdaFoodNutrientConversionFactorInsertCache[key]
	usdaFoodNutrientConversionFactorInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			usdaFoodNutrientConversionFactorAllColumns,
			usdaFoodNutrientConversionFactorColumnsWithDefault,
			usdaFoodNutrientConversionFactorColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(usdaFoodNutrientConversionFactorType, usdaFoodNutrientConversionFactorMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(usdaFoodNutrientConversionFactorType, usdaFoodNutrientConversionFactorMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"usda_food_nutrient_conversion_factor\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"usda_food_nutrient_conversion_factor\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into usda_food_nutrient_conversion_factor")
	}

	if !cached {
		usdaFoodNutrientConversionFactorInsertCacheMut.Lock()
		usdaFoodNutrientConversionFactorInsertCache[key] = cache
		usdaFoodNutrientConversionFactorInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UsdaFoodNutrientConversionFactor.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UsdaFoodNutrientConversionFactor) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	usdaFoodNutrientConversionFactorUpdateCacheMut.RLock()
	cache, cached := usdaFoodNutrientConversionFactorUpdateCache[key]
	usdaFoodNutrientConversionFactorUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			usdaFoodNutrientConversionFactorAllColumns,
			usdaFoodNutrientConversionFactorPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update usda_food_nutrient_conversion_factor, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"usda_food_nutrient_conversion_factor\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, usdaFoodNutrientConversionFactorPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(usdaFoodNutrientConversionFactorType, usdaFoodNutrientConversionFactorMapping, append(wl, usdaFoodNutrientConversionFactorPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update usda_food_nutrient_conversion_factor row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for usda_food_nutrient_conversion_factor")
	}

	if !cached {
		usdaFoodNutrientConversionFactorUpdateCacheMut.Lock()
		usdaFoodNutrientConversionFactorUpdateCache[key] = cache
		usdaFoodNutrientConversionFactorUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q usdaFoodNutrientConversionFactorQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for usda_food_nutrient_conversion_factor")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for usda_food_nutrient_conversion_factor")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UsdaFoodNutrientConversionFactorSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaFoodNutrientConversionFactorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"usda_food_nutrient_conversion_factor\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, usdaFoodNutrientConversionFactorPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in usdaFoodNutrientConversionFactor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all usdaFoodNutrientConversionFactor")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UsdaFoodNutrientConversionFactor) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no usda_food_nutrient_conversion_factor provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaFoodNutrientConversionFactorColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	usdaFoodNutrientConversionFactorUpsertCacheMut.RLock()
	cache, cached := usdaFoodNutrientConversionFactorUpsertCache[key]
	usdaFoodNutrientConversionFactorUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			usdaFoodNutrientConversionFactorAllColumns,
			usdaFoodNutrientConversionFactorColumnsWithDefault,
			usdaFoodNutrientConversionFactorColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			usdaFoodNutrientConversionFactorAllColumns,
			usdaFoodNutrientConversionFactorPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert usda_food_nutrient_conversion_factor, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(usdaFoodNutrientConversionFactorPrimaryKeyColumns))
			copy(conflict, usdaFoodNutrientConversionFactorPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"usda_food_nutrient_conversion_factor\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(usdaFoodNutrientConversionFactorType, usdaFoodNutrientConversionFactorMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(usdaFoodNutrientConversionFactorType, usdaFoodNutrientConversionFactorMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert usda_food_nutrient_conversion_factor")
	}

	if !cached {
		usdaFoodNutrientConversionFactorUpsertCacheMut.Lock()
		usdaFoodNutrientConversionFactorUpsertCache[key] = cache
		usdaFoodNutrientConversionFactorUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UsdaFoodNutrientConversionFactor record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UsdaFoodNutrientConversionFactor) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UsdaFoodNutrientConversionFactor provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), usdaFoodNutrientConversionFactorPrimaryKeyMapping)
	sql := "DELETE FROM \"usda_food_nutrient_conversion_factor\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from usda_food_nutrient_conversion_factor")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for usda_food_nutrient_conversion_factor")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q usdaFoodNutrientConversionFactorQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no usdaFoodNutrientConversionFactorQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from usda_food_nutrient_conversion_factor")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for usda_food_nutrient_conversion_factor")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UsdaFoodNutrientConversionFactorSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(usdaFoodNutrientConversionFactorBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaFoodNutrientConversionFactorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"usda_food_nutrient_conversion_factor\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaFoodNutrientConversionFactorPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from usdaFoodNutrientConversionFactor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for usda_food_nutrient_conversion_factor")
	}

	if len(usdaFoodNutrientConversionFactorAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UsdaFoodNutrientConversionFactor) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUsdaFoodNutrientConversionFactor(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsdaFoodNutrientConversionFactorSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UsdaFoodNutrientConversionFactorSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaFoodNutrientConversionFactorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"usda_food_nutrient_conversion_factor\".* FROM \"usda_food_nutrient_conversion_factor\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaFoodNutrientConversionFactorPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UsdaFoodNutrientConversionFactorSlice")
	}

	*o = slice

	return nil
}

// UsdaFoodNutrientConversionFactorExists checks if the UsdaFoodNutrientConversionFactor row exists.
func UsdaFoodNutrientConversionFactorExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"usda_food_nutrient_conversion_factor\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if usda_food_nutrient_conversion_factor exists")
	}

	return exists, nil
}
