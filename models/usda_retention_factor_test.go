// Code generated by SQLBoiler 4.8.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUsdaRetentionFactors(t *testing.T) {
	t.Parallel()

	query := UsdaRetentionFactors()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUsdaRetentionFactorsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaRetentionFactor{}
	if err = randomize.Struct(seed, o, usdaRetentionFactorDBTypes, true, usdaRetentionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaRetentionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaRetentionFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaRetentionFactorsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaRetentionFactor{}
	if err = randomize.Struct(seed, o, usdaRetentionFactorDBTypes, true, usdaRetentionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaRetentionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UsdaRetentionFactors().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaRetentionFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaRetentionFactorsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaRetentionFactor{}
	if err = randomize.Struct(seed, o, usdaRetentionFactorDBTypes, true, usdaRetentionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaRetentionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UsdaRetentionFactorSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaRetentionFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaRetentionFactorsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaRetentionFactor{}
	if err = randomize.Struct(seed, o, usdaRetentionFactorDBTypes, true, usdaRetentionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaRetentionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UsdaRetentionFactorExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if UsdaRetentionFactor exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UsdaRetentionFactorExists to return true, but got false.")
	}
}

func testUsdaRetentionFactorsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaRetentionFactor{}
	if err = randomize.Struct(seed, o, usdaRetentionFactorDBTypes, true, usdaRetentionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaRetentionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	usdaRetentionFactorFound, err := FindUsdaRetentionFactor(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if usdaRetentionFactorFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUsdaRetentionFactorsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaRetentionFactor{}
	if err = randomize.Struct(seed, o, usdaRetentionFactorDBTypes, true, usdaRetentionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaRetentionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UsdaRetentionFactors().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUsdaRetentionFactorsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaRetentionFactor{}
	if err = randomize.Struct(seed, o, usdaRetentionFactorDBTypes, true, usdaRetentionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaRetentionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UsdaRetentionFactors().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUsdaRetentionFactorsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	usdaRetentionFactorOne := &UsdaRetentionFactor{}
	usdaRetentionFactorTwo := &UsdaRetentionFactor{}
	if err = randomize.Struct(seed, usdaRetentionFactorOne, usdaRetentionFactorDBTypes, false, usdaRetentionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaRetentionFactor struct: %s", err)
	}
	if err = randomize.Struct(seed, usdaRetentionFactorTwo, usdaRetentionFactorDBTypes, false, usdaRetentionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaRetentionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = usdaRetentionFactorOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = usdaRetentionFactorTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UsdaRetentionFactors().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUsdaRetentionFactorsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	usdaRetentionFactorOne := &UsdaRetentionFactor{}
	usdaRetentionFactorTwo := &UsdaRetentionFactor{}
	if err = randomize.Struct(seed, usdaRetentionFactorOne, usdaRetentionFactorDBTypes, false, usdaRetentionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaRetentionFactor struct: %s", err)
	}
	if err = randomize.Struct(seed, usdaRetentionFactorTwo, usdaRetentionFactorDBTypes, false, usdaRetentionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaRetentionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = usdaRetentionFactorOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = usdaRetentionFactorTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaRetentionFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func usdaRetentionFactorBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaRetentionFactor) error {
	*o = UsdaRetentionFactor{}
	return nil
}

func usdaRetentionFactorAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaRetentionFactor) error {
	*o = UsdaRetentionFactor{}
	return nil
}

func usdaRetentionFactorAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UsdaRetentionFactor) error {
	*o = UsdaRetentionFactor{}
	return nil
}

func usdaRetentionFactorBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UsdaRetentionFactor) error {
	*o = UsdaRetentionFactor{}
	return nil
}

func usdaRetentionFactorAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UsdaRetentionFactor) error {
	*o = UsdaRetentionFactor{}
	return nil
}

func usdaRetentionFactorBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UsdaRetentionFactor) error {
	*o = UsdaRetentionFactor{}
	return nil
}

func usdaRetentionFactorAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UsdaRetentionFactor) error {
	*o = UsdaRetentionFactor{}
	return nil
}

func usdaRetentionFactorBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaRetentionFactor) error {
	*o = UsdaRetentionFactor{}
	return nil
}

func usdaRetentionFactorAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaRetentionFactor) error {
	*o = UsdaRetentionFactor{}
	return nil
}

func testUsdaRetentionFactorsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UsdaRetentionFactor{}
	o := &UsdaRetentionFactor{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, usdaRetentionFactorDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UsdaRetentionFactor object: %s", err)
	}

	AddUsdaRetentionFactorHook(boil.BeforeInsertHook, usdaRetentionFactorBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	usdaRetentionFactorBeforeInsertHooks = []UsdaRetentionFactorHook{}

	AddUsdaRetentionFactorHook(boil.AfterInsertHook, usdaRetentionFactorAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	usdaRetentionFactorAfterInsertHooks = []UsdaRetentionFactorHook{}

	AddUsdaRetentionFactorHook(boil.AfterSelectHook, usdaRetentionFactorAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	usdaRetentionFactorAfterSelectHooks = []UsdaRetentionFactorHook{}

	AddUsdaRetentionFactorHook(boil.BeforeUpdateHook, usdaRetentionFactorBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	usdaRetentionFactorBeforeUpdateHooks = []UsdaRetentionFactorHook{}

	AddUsdaRetentionFactorHook(boil.AfterUpdateHook, usdaRetentionFactorAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	usdaRetentionFactorAfterUpdateHooks = []UsdaRetentionFactorHook{}

	AddUsdaRetentionFactorHook(boil.BeforeDeleteHook, usdaRetentionFactorBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	usdaRetentionFactorBeforeDeleteHooks = []UsdaRetentionFactorHook{}

	AddUsdaRetentionFactorHook(boil.AfterDeleteHook, usdaRetentionFactorAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	usdaRetentionFactorAfterDeleteHooks = []UsdaRetentionFactorHook{}

	AddUsdaRetentionFactorHook(boil.BeforeUpsertHook, usdaRetentionFactorBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	usdaRetentionFactorBeforeUpsertHooks = []UsdaRetentionFactorHook{}

	AddUsdaRetentionFactorHook(boil.AfterUpsertHook, usdaRetentionFactorAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	usdaRetentionFactorAfterUpsertHooks = []UsdaRetentionFactorHook{}
}

func testUsdaRetentionFactorsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaRetentionFactor{}
	if err = randomize.Struct(seed, o, usdaRetentionFactorDBTypes, true, usdaRetentionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaRetentionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaRetentionFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUsdaRetentionFactorsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaRetentionFactor{}
	if err = randomize.Struct(seed, o, usdaRetentionFactorDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UsdaRetentionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(usdaRetentionFactorColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UsdaRetentionFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUsdaRetentionFactorToOneUsdaFoodCategoryUsingFoodGroup(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UsdaRetentionFactor
	var foreign UsdaFoodCategory

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, usdaRetentionFactorDBTypes, true, usdaRetentionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaRetentionFactor struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, usdaFoodCategoryDBTypes, false, usdaFoodCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodCategory struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.FoodGroupID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.FoodGroup().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UsdaRetentionFactorSlice{&local}
	if err = local.L.LoadFoodGroup(ctx, tx, false, (*[]*UsdaRetentionFactor)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FoodGroup == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.FoodGroup = nil
	if err = local.L.LoadFoodGroup(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FoodGroup == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUsdaRetentionFactorToOneSetOpUsdaFoodCategoryUsingFoodGroup(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaRetentionFactor
	var b, c UsdaFoodCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaRetentionFactorDBTypes, false, strmangle.SetComplement(usdaRetentionFactorPrimaryKeyColumns, usdaRetentionFactorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, usdaFoodCategoryDBTypes, false, strmangle.SetComplement(usdaFoodCategoryPrimaryKeyColumns, usdaFoodCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, usdaFoodCategoryDBTypes, false, strmangle.SetComplement(usdaFoodCategoryPrimaryKeyColumns, usdaFoodCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UsdaFoodCategory{&b, &c} {
		err = a.SetFoodGroup(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.FoodGroup != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FoodGroupUsdaRetentionFactors[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.FoodGroupID, x.ID) {
			t.Error("foreign key was wrong value", a.FoodGroupID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.FoodGroupID))
		reflect.Indirect(reflect.ValueOf(&a.FoodGroupID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.FoodGroupID, x.ID) {
			t.Error("foreign key was wrong value", a.FoodGroupID, x.ID)
		}
	}
}

func testUsdaRetentionFactorToOneRemoveOpUsdaFoodCategoryUsingFoodGroup(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaRetentionFactor
	var b UsdaFoodCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaRetentionFactorDBTypes, false, strmangle.SetComplement(usdaRetentionFactorPrimaryKeyColumns, usdaRetentionFactorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, usdaFoodCategoryDBTypes, false, strmangle.SetComplement(usdaFoodCategoryPrimaryKeyColumns, usdaFoodCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetFoodGroup(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveFoodGroup(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.FoodGroup().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.FoodGroup != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.FoodGroupID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.FoodGroupUsdaRetentionFactors) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testUsdaRetentionFactorsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaRetentionFactor{}
	if err = randomize.Struct(seed, o, usdaRetentionFactorDBTypes, true, usdaRetentionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaRetentionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsdaRetentionFactorsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaRetentionFactor{}
	if err = randomize.Struct(seed, o, usdaRetentionFactorDBTypes, true, usdaRetentionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaRetentionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UsdaRetentionFactorSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsdaRetentionFactorsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaRetentionFactor{}
	if err = randomize.Struct(seed, o, usdaRetentionFactorDBTypes, true, usdaRetentionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaRetentionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UsdaRetentionFactors().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	usdaRetentionFactorDBTypes = map[string]string{`ID`: `integer`, `Code`: `text`, `FoodGroupID`: `integer`, `Description`: `text`}
	_                          = bytes.MinRead
)

func testUsdaRetentionFactorsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(usdaRetentionFactorPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(usdaRetentionFactorAllColumns) == len(usdaRetentionFactorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UsdaRetentionFactor{}
	if err = randomize.Struct(seed, o, usdaRetentionFactorDBTypes, true, usdaRetentionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaRetentionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaRetentionFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, usdaRetentionFactorDBTypes, true, usdaRetentionFactorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaRetentionFactor struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUsdaRetentionFactorsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(usdaRetentionFactorAllColumns) == len(usdaRetentionFactorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UsdaRetentionFactor{}
	if err = randomize.Struct(seed, o, usdaRetentionFactorDBTypes, true, usdaRetentionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaRetentionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaRetentionFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, usdaRetentionFactorDBTypes, true, usdaRetentionFactorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaRetentionFactor struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(usdaRetentionFactorAllColumns, usdaRetentionFactorPrimaryKeyColumns) {
		fields = usdaRetentionFactorAllColumns
	} else {
		fields = strmangle.SetComplement(
			usdaRetentionFactorAllColumns,
			usdaRetentionFactorPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UsdaRetentionFactorSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUsdaRetentionFactorsUpsert(t *testing.T) {
	t.Parallel()

	if len(usdaRetentionFactorAllColumns) == len(usdaRetentionFactorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UsdaRetentionFactor{}
	if err = randomize.Struct(seed, &o, usdaRetentionFactorDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UsdaRetentionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UsdaRetentionFactor: %s", err)
	}

	count, err := UsdaRetentionFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, usdaRetentionFactorDBTypes, false, usdaRetentionFactorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaRetentionFactor struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UsdaRetentionFactor: %s", err)
	}

	count, err = UsdaRetentionFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
