// Code generated by SQLBoiler 4.8.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUsdaLabMethods(t *testing.T) {
	t.Parallel()

	query := UsdaLabMethods()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUsdaLabMethodsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaLabMethod{}
	if err = randomize.Struct(seed, o, usdaLabMethodDBTypes, true, usdaLabMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaLabMethods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaLabMethodsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaLabMethod{}
	if err = randomize.Struct(seed, o, usdaLabMethodDBTypes, true, usdaLabMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UsdaLabMethods().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaLabMethods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaLabMethodsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaLabMethod{}
	if err = randomize.Struct(seed, o, usdaLabMethodDBTypes, true, usdaLabMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UsdaLabMethodSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaLabMethods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaLabMethodsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaLabMethod{}
	if err = randomize.Struct(seed, o, usdaLabMethodDBTypes, true, usdaLabMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UsdaLabMethodExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if UsdaLabMethod exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UsdaLabMethodExists to return true, but got false.")
	}
}

func testUsdaLabMethodsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaLabMethod{}
	if err = randomize.Struct(seed, o, usdaLabMethodDBTypes, true, usdaLabMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	usdaLabMethodFound, err := FindUsdaLabMethod(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if usdaLabMethodFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUsdaLabMethodsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaLabMethod{}
	if err = randomize.Struct(seed, o, usdaLabMethodDBTypes, true, usdaLabMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UsdaLabMethods().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUsdaLabMethodsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaLabMethod{}
	if err = randomize.Struct(seed, o, usdaLabMethodDBTypes, true, usdaLabMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UsdaLabMethods().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUsdaLabMethodsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	usdaLabMethodOne := &UsdaLabMethod{}
	usdaLabMethodTwo := &UsdaLabMethod{}
	if err = randomize.Struct(seed, usdaLabMethodOne, usdaLabMethodDBTypes, false, usdaLabMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethod struct: %s", err)
	}
	if err = randomize.Struct(seed, usdaLabMethodTwo, usdaLabMethodDBTypes, false, usdaLabMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = usdaLabMethodOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = usdaLabMethodTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UsdaLabMethods().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUsdaLabMethodsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	usdaLabMethodOne := &UsdaLabMethod{}
	usdaLabMethodTwo := &UsdaLabMethod{}
	if err = randomize.Struct(seed, usdaLabMethodOne, usdaLabMethodDBTypes, false, usdaLabMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethod struct: %s", err)
	}
	if err = randomize.Struct(seed, usdaLabMethodTwo, usdaLabMethodDBTypes, false, usdaLabMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = usdaLabMethodOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = usdaLabMethodTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaLabMethods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func usdaLabMethodBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaLabMethod) error {
	*o = UsdaLabMethod{}
	return nil
}

func usdaLabMethodAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaLabMethod) error {
	*o = UsdaLabMethod{}
	return nil
}

func usdaLabMethodAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UsdaLabMethod) error {
	*o = UsdaLabMethod{}
	return nil
}

func usdaLabMethodBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UsdaLabMethod) error {
	*o = UsdaLabMethod{}
	return nil
}

func usdaLabMethodAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UsdaLabMethod) error {
	*o = UsdaLabMethod{}
	return nil
}

func usdaLabMethodBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UsdaLabMethod) error {
	*o = UsdaLabMethod{}
	return nil
}

func usdaLabMethodAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UsdaLabMethod) error {
	*o = UsdaLabMethod{}
	return nil
}

func usdaLabMethodBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaLabMethod) error {
	*o = UsdaLabMethod{}
	return nil
}

func usdaLabMethodAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaLabMethod) error {
	*o = UsdaLabMethod{}
	return nil
}

func testUsdaLabMethodsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UsdaLabMethod{}
	o := &UsdaLabMethod{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, usdaLabMethodDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethod object: %s", err)
	}

	AddUsdaLabMethodHook(boil.BeforeInsertHook, usdaLabMethodBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	usdaLabMethodBeforeInsertHooks = []UsdaLabMethodHook{}

	AddUsdaLabMethodHook(boil.AfterInsertHook, usdaLabMethodAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	usdaLabMethodAfterInsertHooks = []UsdaLabMethodHook{}

	AddUsdaLabMethodHook(boil.AfterSelectHook, usdaLabMethodAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	usdaLabMethodAfterSelectHooks = []UsdaLabMethodHook{}

	AddUsdaLabMethodHook(boil.BeforeUpdateHook, usdaLabMethodBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	usdaLabMethodBeforeUpdateHooks = []UsdaLabMethodHook{}

	AddUsdaLabMethodHook(boil.AfterUpdateHook, usdaLabMethodAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	usdaLabMethodAfterUpdateHooks = []UsdaLabMethodHook{}

	AddUsdaLabMethodHook(boil.BeforeDeleteHook, usdaLabMethodBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	usdaLabMethodBeforeDeleteHooks = []UsdaLabMethodHook{}

	AddUsdaLabMethodHook(boil.AfterDeleteHook, usdaLabMethodAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	usdaLabMethodAfterDeleteHooks = []UsdaLabMethodHook{}

	AddUsdaLabMethodHook(boil.BeforeUpsertHook, usdaLabMethodBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	usdaLabMethodBeforeUpsertHooks = []UsdaLabMethodHook{}

	AddUsdaLabMethodHook(boil.AfterUpsertHook, usdaLabMethodAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	usdaLabMethodAfterUpsertHooks = []UsdaLabMethodHook{}
}

func testUsdaLabMethodsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaLabMethod{}
	if err = randomize.Struct(seed, o, usdaLabMethodDBTypes, true, usdaLabMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaLabMethods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUsdaLabMethodsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaLabMethod{}
	if err = randomize.Struct(seed, o, usdaLabMethodDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(usdaLabMethodColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UsdaLabMethods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUsdaLabMethodToManyLabMethodUsdaLabMethodCodes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaLabMethod
	var b, c UsdaLabMethodCode

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaLabMethodDBTypes, true, usdaLabMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethod struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, usdaLabMethodCodeDBTypes, false, usdaLabMethodCodeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, usdaLabMethodCodeDBTypes, false, usdaLabMethodCodeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.LabMethodID, a.ID)
	queries.Assign(&c.LabMethodID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.LabMethodUsdaLabMethodCodes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.LabMethodID, b.LabMethodID) {
			bFound = true
		}
		if queries.Equal(v.LabMethodID, c.LabMethodID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UsdaLabMethodSlice{&a}
	if err = a.L.LoadLabMethodUsdaLabMethodCodes(ctx, tx, false, (*[]*UsdaLabMethod)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.LabMethodUsdaLabMethodCodes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.LabMethodUsdaLabMethodCodes = nil
	if err = a.L.LoadLabMethodUsdaLabMethodCodes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.LabMethodUsdaLabMethodCodes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUsdaLabMethodToManyLabMethodUsdaLabMethodNutrients(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaLabMethod
	var b, c UsdaLabMethodNutrient

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaLabMethodDBTypes, true, usdaLabMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethod struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, usdaLabMethodNutrientDBTypes, false, usdaLabMethodNutrientColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, usdaLabMethodNutrientDBTypes, false, usdaLabMethodNutrientColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.LabMethodID, a.ID)
	queries.Assign(&c.LabMethodID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.LabMethodUsdaLabMethodNutrients().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.LabMethodID, b.LabMethodID) {
			bFound = true
		}
		if queries.Equal(v.LabMethodID, c.LabMethodID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UsdaLabMethodSlice{&a}
	if err = a.L.LoadLabMethodUsdaLabMethodNutrients(ctx, tx, false, (*[]*UsdaLabMethod)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.LabMethodUsdaLabMethodNutrients); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.LabMethodUsdaLabMethodNutrients = nil
	if err = a.L.LoadLabMethodUsdaLabMethodNutrients(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.LabMethodUsdaLabMethodNutrients); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUsdaLabMethodToManyLabMethodUsdaSubSampleResults(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaLabMethod
	var b, c UsdaSubSampleResult

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaLabMethodDBTypes, true, usdaLabMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethod struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, usdaSubSampleResultDBTypes, false, usdaSubSampleResultColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, usdaSubSampleResultDBTypes, false, usdaSubSampleResultColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.LabMethodID, a.ID)
	queries.Assign(&c.LabMethodID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.LabMethodUsdaSubSampleResults().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.LabMethodID, b.LabMethodID) {
			bFound = true
		}
		if queries.Equal(v.LabMethodID, c.LabMethodID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UsdaLabMethodSlice{&a}
	if err = a.L.LoadLabMethodUsdaSubSampleResults(ctx, tx, false, (*[]*UsdaLabMethod)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.LabMethodUsdaSubSampleResults); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.LabMethodUsdaSubSampleResults = nil
	if err = a.L.LoadLabMethodUsdaSubSampleResults(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.LabMethodUsdaSubSampleResults); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUsdaLabMethodToManyAddOpLabMethodUsdaLabMethodCodes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaLabMethod
	var b, c, d, e UsdaLabMethodCode

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaLabMethodDBTypes, false, strmangle.SetComplement(usdaLabMethodPrimaryKeyColumns, usdaLabMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaLabMethodCode{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaLabMethodCodeDBTypes, false, strmangle.SetComplement(usdaLabMethodCodePrimaryKeyColumns, usdaLabMethodCodeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UsdaLabMethodCode{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddLabMethodUsdaLabMethodCodes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.LabMethodID) {
			t.Error("foreign key was wrong value", a.ID, first.LabMethodID)
		}
		if !queries.Equal(a.ID, second.LabMethodID) {
			t.Error("foreign key was wrong value", a.ID, second.LabMethodID)
		}

		if first.R.LabMethod != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.LabMethod != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.LabMethodUsdaLabMethodCodes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.LabMethodUsdaLabMethodCodes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.LabMethodUsdaLabMethodCodes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testUsdaLabMethodToManySetOpLabMethodUsdaLabMethodCodes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaLabMethod
	var b, c, d, e UsdaLabMethodCode

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaLabMethodDBTypes, false, strmangle.SetComplement(usdaLabMethodPrimaryKeyColumns, usdaLabMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaLabMethodCode{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaLabMethodCodeDBTypes, false, strmangle.SetComplement(usdaLabMethodCodePrimaryKeyColumns, usdaLabMethodCodeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetLabMethodUsdaLabMethodCodes(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.LabMethodUsdaLabMethodCodes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetLabMethodUsdaLabMethodCodes(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.LabMethodUsdaLabMethodCodes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.LabMethodID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.LabMethodID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.LabMethodID) {
		t.Error("foreign key was wrong value", a.ID, d.LabMethodID)
	}
	if !queries.Equal(a.ID, e.LabMethodID) {
		t.Error("foreign key was wrong value", a.ID, e.LabMethodID)
	}

	if b.R.LabMethod != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.LabMethod != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.LabMethod != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.LabMethod != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.LabMethodUsdaLabMethodCodes[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.LabMethodUsdaLabMethodCodes[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testUsdaLabMethodToManyRemoveOpLabMethodUsdaLabMethodCodes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaLabMethod
	var b, c, d, e UsdaLabMethodCode

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaLabMethodDBTypes, false, strmangle.SetComplement(usdaLabMethodPrimaryKeyColumns, usdaLabMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaLabMethodCode{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaLabMethodCodeDBTypes, false, strmangle.SetComplement(usdaLabMethodCodePrimaryKeyColumns, usdaLabMethodCodeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddLabMethodUsdaLabMethodCodes(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.LabMethodUsdaLabMethodCodes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveLabMethodUsdaLabMethodCodes(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.LabMethodUsdaLabMethodCodes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.LabMethodID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.LabMethodID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.LabMethod != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.LabMethod != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.LabMethod != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.LabMethod != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.LabMethodUsdaLabMethodCodes) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.LabMethodUsdaLabMethodCodes[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.LabMethodUsdaLabMethodCodes[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testUsdaLabMethodToManyAddOpLabMethodUsdaLabMethodNutrients(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaLabMethod
	var b, c, d, e UsdaLabMethodNutrient

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaLabMethodDBTypes, false, strmangle.SetComplement(usdaLabMethodPrimaryKeyColumns, usdaLabMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaLabMethodNutrient{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaLabMethodNutrientDBTypes, false, strmangle.SetComplement(usdaLabMethodNutrientPrimaryKeyColumns, usdaLabMethodNutrientColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UsdaLabMethodNutrient{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddLabMethodUsdaLabMethodNutrients(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.LabMethodID) {
			t.Error("foreign key was wrong value", a.ID, first.LabMethodID)
		}
		if !queries.Equal(a.ID, second.LabMethodID) {
			t.Error("foreign key was wrong value", a.ID, second.LabMethodID)
		}

		if first.R.LabMethod != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.LabMethod != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.LabMethodUsdaLabMethodNutrients[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.LabMethodUsdaLabMethodNutrients[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.LabMethodUsdaLabMethodNutrients().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testUsdaLabMethodToManySetOpLabMethodUsdaLabMethodNutrients(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaLabMethod
	var b, c, d, e UsdaLabMethodNutrient

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaLabMethodDBTypes, false, strmangle.SetComplement(usdaLabMethodPrimaryKeyColumns, usdaLabMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaLabMethodNutrient{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaLabMethodNutrientDBTypes, false, strmangle.SetComplement(usdaLabMethodNutrientPrimaryKeyColumns, usdaLabMethodNutrientColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetLabMethodUsdaLabMethodNutrients(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.LabMethodUsdaLabMethodNutrients().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetLabMethodUsdaLabMethodNutrients(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.LabMethodUsdaLabMethodNutrients().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.LabMethodID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.LabMethodID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.LabMethodID) {
		t.Error("foreign key was wrong value", a.ID, d.LabMethodID)
	}
	if !queries.Equal(a.ID, e.LabMethodID) {
		t.Error("foreign key was wrong value", a.ID, e.LabMethodID)
	}

	if b.R.LabMethod != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.LabMethod != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.LabMethod != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.LabMethod != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.LabMethodUsdaLabMethodNutrients[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.LabMethodUsdaLabMethodNutrients[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testUsdaLabMethodToManyRemoveOpLabMethodUsdaLabMethodNutrients(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaLabMethod
	var b, c, d, e UsdaLabMethodNutrient

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaLabMethodDBTypes, false, strmangle.SetComplement(usdaLabMethodPrimaryKeyColumns, usdaLabMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaLabMethodNutrient{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaLabMethodNutrientDBTypes, false, strmangle.SetComplement(usdaLabMethodNutrientPrimaryKeyColumns, usdaLabMethodNutrientColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddLabMethodUsdaLabMethodNutrients(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.LabMethodUsdaLabMethodNutrients().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveLabMethodUsdaLabMethodNutrients(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.LabMethodUsdaLabMethodNutrients().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.LabMethodID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.LabMethodID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.LabMethod != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.LabMethod != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.LabMethod != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.LabMethod != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.LabMethodUsdaLabMethodNutrients) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.LabMethodUsdaLabMethodNutrients[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.LabMethodUsdaLabMethodNutrients[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testUsdaLabMethodToManyAddOpLabMethodUsdaSubSampleResults(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaLabMethod
	var b, c, d, e UsdaSubSampleResult

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaLabMethodDBTypes, false, strmangle.SetComplement(usdaLabMethodPrimaryKeyColumns, usdaLabMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaSubSampleResult{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaSubSampleResultDBTypes, false, strmangle.SetComplement(usdaSubSampleResultPrimaryKeyColumns, usdaSubSampleResultColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UsdaSubSampleResult{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddLabMethodUsdaSubSampleResults(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.LabMethodID) {
			t.Error("foreign key was wrong value", a.ID, first.LabMethodID)
		}
		if !queries.Equal(a.ID, second.LabMethodID) {
			t.Error("foreign key was wrong value", a.ID, second.LabMethodID)
		}

		if first.R.LabMethod != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.LabMethod != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.LabMethodUsdaSubSampleResults[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.LabMethodUsdaSubSampleResults[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.LabMethodUsdaSubSampleResults().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testUsdaLabMethodToManySetOpLabMethodUsdaSubSampleResults(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaLabMethod
	var b, c, d, e UsdaSubSampleResult

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaLabMethodDBTypes, false, strmangle.SetComplement(usdaLabMethodPrimaryKeyColumns, usdaLabMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaSubSampleResult{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaSubSampleResultDBTypes, false, strmangle.SetComplement(usdaSubSampleResultPrimaryKeyColumns, usdaSubSampleResultColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetLabMethodUsdaSubSampleResults(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.LabMethodUsdaSubSampleResults().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetLabMethodUsdaSubSampleResults(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.LabMethodUsdaSubSampleResults().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.LabMethodID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.LabMethodID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.LabMethodID) {
		t.Error("foreign key was wrong value", a.ID, d.LabMethodID)
	}
	if !queries.Equal(a.ID, e.LabMethodID) {
		t.Error("foreign key was wrong value", a.ID, e.LabMethodID)
	}

	if b.R.LabMethod != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.LabMethod != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.LabMethod != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.LabMethod != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.LabMethodUsdaSubSampleResults[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.LabMethodUsdaSubSampleResults[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testUsdaLabMethodToManyRemoveOpLabMethodUsdaSubSampleResults(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaLabMethod
	var b, c, d, e UsdaSubSampleResult

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaLabMethodDBTypes, false, strmangle.SetComplement(usdaLabMethodPrimaryKeyColumns, usdaLabMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaSubSampleResult{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaSubSampleResultDBTypes, false, strmangle.SetComplement(usdaSubSampleResultPrimaryKeyColumns, usdaSubSampleResultColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddLabMethodUsdaSubSampleResults(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.LabMethodUsdaSubSampleResults().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveLabMethodUsdaSubSampleResults(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.LabMethodUsdaSubSampleResults().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.LabMethodID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.LabMethodID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.LabMethod != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.LabMethod != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.LabMethod != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.LabMethod != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.LabMethodUsdaSubSampleResults) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.LabMethodUsdaSubSampleResults[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.LabMethodUsdaSubSampleResults[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testUsdaLabMethodsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaLabMethod{}
	if err = randomize.Struct(seed, o, usdaLabMethodDBTypes, true, usdaLabMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsdaLabMethodsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaLabMethod{}
	if err = randomize.Struct(seed, o, usdaLabMethodDBTypes, true, usdaLabMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UsdaLabMethodSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsdaLabMethodsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaLabMethod{}
	if err = randomize.Struct(seed, o, usdaLabMethodDBTypes, true, usdaLabMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UsdaLabMethods().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	usdaLabMethodDBTypes = map[string]string{`ID`: `integer`, `Description`: `text`, `Technique`: `text`}
	_                    = bytes.MinRead
)

func testUsdaLabMethodsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(usdaLabMethodPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(usdaLabMethodAllColumns) == len(usdaLabMethodPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UsdaLabMethod{}
	if err = randomize.Struct(seed, o, usdaLabMethodDBTypes, true, usdaLabMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaLabMethods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, usdaLabMethodDBTypes, true, usdaLabMethodPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethod struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUsdaLabMethodsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(usdaLabMethodAllColumns) == len(usdaLabMethodPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UsdaLabMethod{}
	if err = randomize.Struct(seed, o, usdaLabMethodDBTypes, true, usdaLabMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaLabMethods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, usdaLabMethodDBTypes, true, usdaLabMethodPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethod struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(usdaLabMethodAllColumns, usdaLabMethodPrimaryKeyColumns) {
		fields = usdaLabMethodAllColumns
	} else {
		fields = strmangle.SetComplement(
			usdaLabMethodAllColumns,
			usdaLabMethodPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UsdaLabMethodSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUsdaLabMethodsUpsert(t *testing.T) {
	t.Parallel()

	if len(usdaLabMethodAllColumns) == len(usdaLabMethodPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UsdaLabMethod{}
	if err = randomize.Struct(seed, &o, usdaLabMethodDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UsdaLabMethod: %s", err)
	}

	count, err := UsdaLabMethods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, usdaLabMethodDBTypes, false, usdaLabMethodPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethod struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UsdaLabMethod: %s", err)
	}

	count, err = UsdaLabMethods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
