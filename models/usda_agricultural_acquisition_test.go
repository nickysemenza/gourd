// Code generated by SQLBoiler 4.8.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUsdaAgriculturalAcquisitions(t *testing.T) {
	t.Parallel()

	query := UsdaAgriculturalAcquisitions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUsdaAgriculturalAcquisitionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaAgriculturalAcquisition{}
	if err = randomize.Struct(seed, o, usdaAgriculturalAcquisitionDBTypes, true, usdaAgriculturalAcquisitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaAgriculturalAcquisition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaAgriculturalAcquisitions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaAgriculturalAcquisitionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaAgriculturalAcquisition{}
	if err = randomize.Struct(seed, o, usdaAgriculturalAcquisitionDBTypes, true, usdaAgriculturalAcquisitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaAgriculturalAcquisition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UsdaAgriculturalAcquisitions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaAgriculturalAcquisitions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaAgriculturalAcquisitionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaAgriculturalAcquisition{}
	if err = randomize.Struct(seed, o, usdaAgriculturalAcquisitionDBTypes, true, usdaAgriculturalAcquisitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaAgriculturalAcquisition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UsdaAgriculturalAcquisitionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaAgriculturalAcquisitions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaAgriculturalAcquisitionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaAgriculturalAcquisition{}
	if err = randomize.Struct(seed, o, usdaAgriculturalAcquisitionDBTypes, true, usdaAgriculturalAcquisitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaAgriculturalAcquisition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UsdaAgriculturalAcquisitionExists(ctx, tx, o.FDCID)
	if err != nil {
		t.Errorf("Unable to check if UsdaAgriculturalAcquisition exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UsdaAgriculturalAcquisitionExists to return true, but got false.")
	}
}

func testUsdaAgriculturalAcquisitionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaAgriculturalAcquisition{}
	if err = randomize.Struct(seed, o, usdaAgriculturalAcquisitionDBTypes, true, usdaAgriculturalAcquisitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaAgriculturalAcquisition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	usdaAgriculturalAcquisitionFound, err := FindUsdaAgriculturalAcquisition(ctx, tx, o.FDCID)
	if err != nil {
		t.Error(err)
	}

	if usdaAgriculturalAcquisitionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUsdaAgriculturalAcquisitionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaAgriculturalAcquisition{}
	if err = randomize.Struct(seed, o, usdaAgriculturalAcquisitionDBTypes, true, usdaAgriculturalAcquisitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaAgriculturalAcquisition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UsdaAgriculturalAcquisitions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUsdaAgriculturalAcquisitionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaAgriculturalAcquisition{}
	if err = randomize.Struct(seed, o, usdaAgriculturalAcquisitionDBTypes, true, usdaAgriculturalAcquisitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaAgriculturalAcquisition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UsdaAgriculturalAcquisitions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUsdaAgriculturalAcquisitionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	usdaAgriculturalAcquisitionOne := &UsdaAgriculturalAcquisition{}
	usdaAgriculturalAcquisitionTwo := &UsdaAgriculturalAcquisition{}
	if err = randomize.Struct(seed, usdaAgriculturalAcquisitionOne, usdaAgriculturalAcquisitionDBTypes, false, usdaAgriculturalAcquisitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaAgriculturalAcquisition struct: %s", err)
	}
	if err = randomize.Struct(seed, usdaAgriculturalAcquisitionTwo, usdaAgriculturalAcquisitionDBTypes, false, usdaAgriculturalAcquisitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaAgriculturalAcquisition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = usdaAgriculturalAcquisitionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = usdaAgriculturalAcquisitionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UsdaAgriculturalAcquisitions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUsdaAgriculturalAcquisitionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	usdaAgriculturalAcquisitionOne := &UsdaAgriculturalAcquisition{}
	usdaAgriculturalAcquisitionTwo := &UsdaAgriculturalAcquisition{}
	if err = randomize.Struct(seed, usdaAgriculturalAcquisitionOne, usdaAgriculturalAcquisitionDBTypes, false, usdaAgriculturalAcquisitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaAgriculturalAcquisition struct: %s", err)
	}
	if err = randomize.Struct(seed, usdaAgriculturalAcquisitionTwo, usdaAgriculturalAcquisitionDBTypes, false, usdaAgriculturalAcquisitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaAgriculturalAcquisition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = usdaAgriculturalAcquisitionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = usdaAgriculturalAcquisitionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaAgriculturalAcquisitions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func usdaAgriculturalAcquisitionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaAgriculturalAcquisition) error {
	*o = UsdaAgriculturalAcquisition{}
	return nil
}

func usdaAgriculturalAcquisitionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaAgriculturalAcquisition) error {
	*o = UsdaAgriculturalAcquisition{}
	return nil
}

func usdaAgriculturalAcquisitionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UsdaAgriculturalAcquisition) error {
	*o = UsdaAgriculturalAcquisition{}
	return nil
}

func usdaAgriculturalAcquisitionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UsdaAgriculturalAcquisition) error {
	*o = UsdaAgriculturalAcquisition{}
	return nil
}

func usdaAgriculturalAcquisitionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UsdaAgriculturalAcquisition) error {
	*o = UsdaAgriculturalAcquisition{}
	return nil
}

func usdaAgriculturalAcquisitionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UsdaAgriculturalAcquisition) error {
	*o = UsdaAgriculturalAcquisition{}
	return nil
}

func usdaAgriculturalAcquisitionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UsdaAgriculturalAcquisition) error {
	*o = UsdaAgriculturalAcquisition{}
	return nil
}

func usdaAgriculturalAcquisitionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaAgriculturalAcquisition) error {
	*o = UsdaAgriculturalAcquisition{}
	return nil
}

func usdaAgriculturalAcquisitionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaAgriculturalAcquisition) error {
	*o = UsdaAgriculturalAcquisition{}
	return nil
}

func testUsdaAgriculturalAcquisitionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UsdaAgriculturalAcquisition{}
	o := &UsdaAgriculturalAcquisition{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, usdaAgriculturalAcquisitionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UsdaAgriculturalAcquisition object: %s", err)
	}

	AddUsdaAgriculturalAcquisitionHook(boil.BeforeInsertHook, usdaAgriculturalAcquisitionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	usdaAgriculturalAcquisitionBeforeInsertHooks = []UsdaAgriculturalAcquisitionHook{}

	AddUsdaAgriculturalAcquisitionHook(boil.AfterInsertHook, usdaAgriculturalAcquisitionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	usdaAgriculturalAcquisitionAfterInsertHooks = []UsdaAgriculturalAcquisitionHook{}

	AddUsdaAgriculturalAcquisitionHook(boil.AfterSelectHook, usdaAgriculturalAcquisitionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	usdaAgriculturalAcquisitionAfterSelectHooks = []UsdaAgriculturalAcquisitionHook{}

	AddUsdaAgriculturalAcquisitionHook(boil.BeforeUpdateHook, usdaAgriculturalAcquisitionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	usdaAgriculturalAcquisitionBeforeUpdateHooks = []UsdaAgriculturalAcquisitionHook{}

	AddUsdaAgriculturalAcquisitionHook(boil.AfterUpdateHook, usdaAgriculturalAcquisitionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	usdaAgriculturalAcquisitionAfterUpdateHooks = []UsdaAgriculturalAcquisitionHook{}

	AddUsdaAgriculturalAcquisitionHook(boil.BeforeDeleteHook, usdaAgriculturalAcquisitionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	usdaAgriculturalAcquisitionBeforeDeleteHooks = []UsdaAgriculturalAcquisitionHook{}

	AddUsdaAgriculturalAcquisitionHook(boil.AfterDeleteHook, usdaAgriculturalAcquisitionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	usdaAgriculturalAcquisitionAfterDeleteHooks = []UsdaAgriculturalAcquisitionHook{}

	AddUsdaAgriculturalAcquisitionHook(boil.BeforeUpsertHook, usdaAgriculturalAcquisitionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	usdaAgriculturalAcquisitionBeforeUpsertHooks = []UsdaAgriculturalAcquisitionHook{}

	AddUsdaAgriculturalAcquisitionHook(boil.AfterUpsertHook, usdaAgriculturalAcquisitionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	usdaAgriculturalAcquisitionAfterUpsertHooks = []UsdaAgriculturalAcquisitionHook{}
}

func testUsdaAgriculturalAcquisitionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaAgriculturalAcquisition{}
	if err = randomize.Struct(seed, o, usdaAgriculturalAcquisitionDBTypes, true, usdaAgriculturalAcquisitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaAgriculturalAcquisition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaAgriculturalAcquisitions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUsdaAgriculturalAcquisitionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaAgriculturalAcquisition{}
	if err = randomize.Struct(seed, o, usdaAgriculturalAcquisitionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UsdaAgriculturalAcquisition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(usdaAgriculturalAcquisitionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UsdaAgriculturalAcquisitions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUsdaAgriculturalAcquisitionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaAgriculturalAcquisition{}
	if err = randomize.Struct(seed, o, usdaAgriculturalAcquisitionDBTypes, true, usdaAgriculturalAcquisitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaAgriculturalAcquisition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsdaAgriculturalAcquisitionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaAgriculturalAcquisition{}
	if err = randomize.Struct(seed, o, usdaAgriculturalAcquisitionDBTypes, true, usdaAgriculturalAcquisitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaAgriculturalAcquisition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UsdaAgriculturalAcquisitionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsdaAgriculturalAcquisitionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaAgriculturalAcquisition{}
	if err = randomize.Struct(seed, o, usdaAgriculturalAcquisitionDBTypes, true, usdaAgriculturalAcquisitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaAgriculturalAcquisition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UsdaAgriculturalAcquisitions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	usdaAgriculturalAcquisitionDBTypes = map[string]string{`FDCID`: `integer`, `AcquisitionDate`: `text`, `MarketClass`: `text`, `Treatment`: `text`, `State`: `text`}
	_                                  = bytes.MinRead
)

func testUsdaAgriculturalAcquisitionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(usdaAgriculturalAcquisitionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(usdaAgriculturalAcquisitionAllColumns) == len(usdaAgriculturalAcquisitionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UsdaAgriculturalAcquisition{}
	if err = randomize.Struct(seed, o, usdaAgriculturalAcquisitionDBTypes, true, usdaAgriculturalAcquisitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaAgriculturalAcquisition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaAgriculturalAcquisitions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, usdaAgriculturalAcquisitionDBTypes, true, usdaAgriculturalAcquisitionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaAgriculturalAcquisition struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUsdaAgriculturalAcquisitionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(usdaAgriculturalAcquisitionAllColumns) == len(usdaAgriculturalAcquisitionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UsdaAgriculturalAcquisition{}
	if err = randomize.Struct(seed, o, usdaAgriculturalAcquisitionDBTypes, true, usdaAgriculturalAcquisitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaAgriculturalAcquisition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaAgriculturalAcquisitions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, usdaAgriculturalAcquisitionDBTypes, true, usdaAgriculturalAcquisitionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaAgriculturalAcquisition struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(usdaAgriculturalAcquisitionAllColumns, usdaAgriculturalAcquisitionPrimaryKeyColumns) {
		fields = usdaAgriculturalAcquisitionAllColumns
	} else {
		fields = strmangle.SetComplement(
			usdaAgriculturalAcquisitionAllColumns,
			usdaAgriculturalAcquisitionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UsdaAgriculturalAcquisitionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUsdaAgriculturalAcquisitionsUpsert(t *testing.T) {
	t.Parallel()

	if len(usdaAgriculturalAcquisitionAllColumns) == len(usdaAgriculturalAcquisitionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UsdaAgriculturalAcquisition{}
	if err = randomize.Struct(seed, &o, usdaAgriculturalAcquisitionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UsdaAgriculturalAcquisition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UsdaAgriculturalAcquisition: %s", err)
	}

	count, err := UsdaAgriculturalAcquisitions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, usdaAgriculturalAcquisitionDBTypes, false, usdaAgriculturalAcquisitionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaAgriculturalAcquisition struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UsdaAgriculturalAcquisition: %s", err)
	}

	count, err = UsdaAgriculturalAcquisitions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
