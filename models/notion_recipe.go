// Code generated by SQLBoiler 4.8.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// NotionRecipe is an object representing the database table.
type NotionRecipe struct {
	PageID    string      `boil:"page_id" json:"page_id" toml:"page_id" yaml:"page_id"`
	PageTitle string      `boil:"page_title" json:"page_title" toml:"page_title" yaml:"page_title"`
	Meta      null.JSON   `boil:"meta" json:"meta,omitempty" toml:"meta" yaml:"meta,omitempty"`
	LastSeen  time.Time   `boil:"last_seen" json:"last_seen" toml:"last_seen" yaml:"last_seen"`
	Recipe    null.String `boil:"recipe" json:"recipe,omitempty" toml:"recipe" yaml:"recipe,omitempty"`
	AteAt     null.Time   `boil:"ate_at" json:"ate_at,omitempty" toml:"ate_at" yaml:"ate_at,omitempty"`

	R *notionRecipeR `boil:"rel" json:"rel" toml:"rel" yaml:"rel"`
	L notionRecipeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NotionRecipeColumns = struct {
	PageID    string
	PageTitle string
	Meta      string
	LastSeen  string
	Recipe    string
	AteAt     string
}{
	PageID:    "page_id",
	PageTitle: "page_title",
	Meta:      "meta",
	LastSeen:  "last_seen",
	Recipe:    "recipe",
	AteAt:     "ate_at",
}

var NotionRecipeTableColumns = struct {
	PageID    string
	PageTitle string
	Meta      string
	LastSeen  string
	Recipe    string
	AteAt     string
}{
	PageID:    "notion_recipe.page_id",
	PageTitle: "notion_recipe.page_title",
	Meta:      "notion_recipe.meta",
	LastSeen:  "notion_recipe.last_seen",
	Recipe:    "notion_recipe.recipe",
	AteAt:     "notion_recipe.ate_at",
}

// Generated where

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var NotionRecipeWhere = struct {
	PageID    whereHelperstring
	PageTitle whereHelperstring
	Meta      whereHelpernull_JSON
	LastSeen  whereHelpertime_Time
	Recipe    whereHelpernull_String
	AteAt     whereHelpernull_Time
}{
	PageID:    whereHelperstring{field: "\"notion_recipe\".\"page_id\""},
	PageTitle: whereHelperstring{field: "\"notion_recipe\".\"page_title\""},
	Meta:      whereHelpernull_JSON{field: "\"notion_recipe\".\"meta\""},
	LastSeen:  whereHelpertime_Time{field: "\"notion_recipe\".\"last_seen\""},
	Recipe:    whereHelpernull_String{field: "\"notion_recipe\".\"recipe\""},
	AteAt:     whereHelpernull_Time{field: "\"notion_recipe\".\"ate_at\""},
}

// NotionRecipeRels is where relationship names are stored.
var NotionRecipeRels = struct {
	NotionRecipeRecipe string
	PageNotionImages   string
	Meals              string
}{
	NotionRecipeRecipe: "NotionRecipeRecipe",
	PageNotionImages:   "PageNotionImages",
	Meals:              "Meals",
}

// notionRecipeR is where relationships are stored.
type notionRecipeR struct {
	NotionRecipeRecipe *Recipe          `boil:"NotionRecipeRecipe" json:"NotionRecipeRecipe" toml:"NotionRecipeRecipe" yaml:"NotionRecipeRecipe"`
	PageNotionImages   NotionImageSlice `boil:"PageNotionImages" json:"PageNotionImages" toml:"PageNotionImages" yaml:"PageNotionImages"`
	Meals              MealSlice        `boil:"Meals" json:"Meals" toml:"Meals" yaml:"Meals"`
}

// NewStruct creates a new relationship struct
func (*notionRecipeR) NewStruct() *notionRecipeR {
	return &notionRecipeR{}
}

// notionRecipeL is where Load methods for each relationship are stored.
type notionRecipeL struct{}

var (
	notionRecipeAllColumns            = []string{"page_id", "page_title", "meta", "last_seen", "recipe", "ate_at"}
	notionRecipeColumnsWithoutDefault = []string{"page_id", "page_title", "meta", "recipe", "ate_at"}
	notionRecipeColumnsWithDefault    = []string{"last_seen"}
	notionRecipePrimaryKeyColumns     = []string{"page_id"}
)

type (
	// NotionRecipeSlice is an alias for a slice of pointers to NotionRecipe.
	// This should almost always be used instead of []NotionRecipe.
	NotionRecipeSlice []*NotionRecipe
	// NotionRecipeHook is the signature for custom NotionRecipe hook methods
	NotionRecipeHook func(context.Context, boil.ContextExecutor, *NotionRecipe) error

	notionRecipeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	notionRecipeType                 = reflect.TypeOf(&NotionRecipe{})
	notionRecipeMapping              = queries.MakeStructMapping(notionRecipeType)
	notionRecipePrimaryKeyMapping, _ = queries.BindMapping(notionRecipeType, notionRecipeMapping, notionRecipePrimaryKeyColumns)
	notionRecipeInsertCacheMut       sync.RWMutex
	notionRecipeInsertCache          = make(map[string]insertCache)
	notionRecipeUpdateCacheMut       sync.RWMutex
	notionRecipeUpdateCache          = make(map[string]updateCache)
	notionRecipeUpsertCacheMut       sync.RWMutex
	notionRecipeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var notionRecipeBeforeInsertHooks []NotionRecipeHook
var notionRecipeBeforeUpdateHooks []NotionRecipeHook
var notionRecipeBeforeDeleteHooks []NotionRecipeHook
var notionRecipeBeforeUpsertHooks []NotionRecipeHook

var notionRecipeAfterInsertHooks []NotionRecipeHook
var notionRecipeAfterSelectHooks []NotionRecipeHook
var notionRecipeAfterUpdateHooks []NotionRecipeHook
var notionRecipeAfterDeleteHooks []NotionRecipeHook
var notionRecipeAfterUpsertHooks []NotionRecipeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *NotionRecipe) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notionRecipeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *NotionRecipe) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notionRecipeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *NotionRecipe) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notionRecipeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *NotionRecipe) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notionRecipeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *NotionRecipe) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notionRecipeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *NotionRecipe) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notionRecipeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *NotionRecipe) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notionRecipeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *NotionRecipe) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notionRecipeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *NotionRecipe) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notionRecipeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNotionRecipeHook registers your hook function for all future operations.
func AddNotionRecipeHook(hookPoint boil.HookPoint, notionRecipeHook NotionRecipeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		notionRecipeBeforeInsertHooks = append(notionRecipeBeforeInsertHooks, notionRecipeHook)
	case boil.BeforeUpdateHook:
		notionRecipeBeforeUpdateHooks = append(notionRecipeBeforeUpdateHooks, notionRecipeHook)
	case boil.BeforeDeleteHook:
		notionRecipeBeforeDeleteHooks = append(notionRecipeBeforeDeleteHooks, notionRecipeHook)
	case boil.BeforeUpsertHook:
		notionRecipeBeforeUpsertHooks = append(notionRecipeBeforeUpsertHooks, notionRecipeHook)
	case boil.AfterInsertHook:
		notionRecipeAfterInsertHooks = append(notionRecipeAfterInsertHooks, notionRecipeHook)
	case boil.AfterSelectHook:
		notionRecipeAfterSelectHooks = append(notionRecipeAfterSelectHooks, notionRecipeHook)
	case boil.AfterUpdateHook:
		notionRecipeAfterUpdateHooks = append(notionRecipeAfterUpdateHooks, notionRecipeHook)
	case boil.AfterDeleteHook:
		notionRecipeAfterDeleteHooks = append(notionRecipeAfterDeleteHooks, notionRecipeHook)
	case boil.AfterUpsertHook:
		notionRecipeAfterUpsertHooks = append(notionRecipeAfterUpsertHooks, notionRecipeHook)
	}
}

// One returns a single notionRecipe record from the query.
func (q notionRecipeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*NotionRecipe, error) {
	o := &NotionRecipe{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for notion_recipe")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all NotionRecipe records from the query.
func (q notionRecipeQuery) All(ctx context.Context, exec boil.ContextExecutor) (NotionRecipeSlice, error) {
	var o []*NotionRecipe

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to NotionRecipe slice")
	}

	if len(notionRecipeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all NotionRecipe records in the query.
func (q notionRecipeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count notion_recipe rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q notionRecipeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if notion_recipe exists")
	}

	return count > 0, nil
}

// NotionRecipeRecipe pointed to by the foreign key.
func (o *NotionRecipe) NotionRecipeRecipe(mods ...qm.QueryMod) recipeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Recipe),
	}

	queryMods = append(queryMods, mods...)

	query := Recipes(queryMods...)
	queries.SetFrom(query.Query, "\"recipes\"")

	return query
}

// PageNotionImages retrieves all the notion_image's NotionImages with an executor via page_id column.
func (o *NotionRecipe) PageNotionImages(mods ...qm.QueryMod) notionImageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"notion_image\".\"page_id\"=?", o.PageID),
	)

	query := NotionImages(queryMods...)
	queries.SetFrom(query.Query, "\"notion_image\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"notion_image\".*"})
	}

	return query
}

// Meals retrieves all the meal's Meals with an executor.
func (o *NotionRecipe) Meals(mods ...qm.QueryMod) mealQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"notion_meal\" on \"meals\".\"id\" = \"notion_meal\".\"meal\""),
		qm.Where("\"notion_meal\".\"notion_recipe\"=?", o.PageID),
	)

	query := Meals(queryMods...)
	queries.SetFrom(query.Query, "\"meals\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"meals\".*"})
	}

	return query
}

// LoadNotionRecipeRecipe allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (notionRecipeL) LoadNotionRecipeRecipe(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNotionRecipe interface{}, mods queries.Applicator) error {
	var slice []*NotionRecipe
	var object *NotionRecipe

	if singular {
		object = maybeNotionRecipe.(*NotionRecipe)
	} else {
		slice = *maybeNotionRecipe.(*[]*NotionRecipe)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &notionRecipeR{}
		}
		if !queries.IsNil(object.Recipe) {
			args = append(args, object.Recipe)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &notionRecipeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Recipe) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Recipe) {
				args = append(args, obj.Recipe)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`recipes`),
		qm.WhereIn(`recipes.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Recipe")
	}

	var resultSlice []*Recipe
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Recipe")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for recipes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for recipes")
	}

	if len(notionRecipeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.NotionRecipeRecipe = foreign
		if foreign.R == nil {
			foreign.R = &recipeR{}
		}
		foreign.R.NotionRecipes = append(foreign.R.NotionRecipes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Recipe, foreign.ID) {
				local.R.NotionRecipeRecipe = foreign
				if foreign.R == nil {
					foreign.R = &recipeR{}
				}
				foreign.R.NotionRecipes = append(foreign.R.NotionRecipes, local)
				break
			}
		}
	}

	return nil
}

// LoadPageNotionImages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (notionRecipeL) LoadPageNotionImages(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNotionRecipe interface{}, mods queries.Applicator) error {
	var slice []*NotionRecipe
	var object *NotionRecipe

	if singular {
		object = maybeNotionRecipe.(*NotionRecipe)
	} else {
		slice = *maybeNotionRecipe.(*[]*NotionRecipe)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &notionRecipeR{}
		}
		args = append(args, object.PageID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &notionRecipeR{}
			}

			for _, a := range args {
				if a == obj.PageID {
					continue Outer
				}
			}

			args = append(args, obj.PageID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`notion_image`),
		qm.WhereIn(`notion_image.page_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load notion_image")
	}

	var resultSlice []*NotionImage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice notion_image")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on notion_image")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for notion_image")
	}

	if len(notionImageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PageNotionImages = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &notionImageR{}
			}
			foreign.R.Page = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PageID == foreign.PageID {
				local.R.PageNotionImages = append(local.R.PageNotionImages, foreign)
				if foreign.R == nil {
					foreign.R = &notionImageR{}
				}
				foreign.R.Page = local
				break
			}
		}
	}

	return nil
}

// LoadMeals allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (notionRecipeL) LoadMeals(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNotionRecipe interface{}, mods queries.Applicator) error {
	var slice []*NotionRecipe
	var object *NotionRecipe

	if singular {
		object = maybeNotionRecipe.(*NotionRecipe)
	} else {
		slice = *maybeNotionRecipe.(*[]*NotionRecipe)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &notionRecipeR{}
		}
		args = append(args, object.PageID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &notionRecipeR{}
			}

			for _, a := range args {
				if a == obj.PageID {
					continue Outer
				}
			}

			args = append(args, obj.PageID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"meals\".id, \"meals\".name, \"meals\".notion_link, \"meals\".ate_at, \"a\".\"notion_recipe\""),
		qm.From("\"meals\""),
		qm.InnerJoin("\"notion_meal\" as \"a\" on \"meals\".\"id\" = \"a\".\"meal\""),
		qm.WhereIn("\"a\".\"notion_recipe\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load meals")
	}

	var resultSlice []*Meal

	var localJoinCols []string
	for results.Next() {
		one := new(Meal)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.Name, &one.NotionLink, &one.AteAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for meals")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice meals")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on meals")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for meals")
	}

	if len(mealAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Meals = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mealR{}
			}
			foreign.R.NotionRecipes = append(foreign.R.NotionRecipes, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.PageID == localJoinCol {
				local.R.Meals = append(local.R.Meals, foreign)
				if foreign.R == nil {
					foreign.R = &mealR{}
				}
				foreign.R.NotionRecipes = append(foreign.R.NotionRecipes, local)
				break
			}
		}
	}

	return nil
}

// SetNotionRecipeRecipe of the notionRecipe to the related item.
// Sets o.R.NotionRecipeRecipe to related.
// Adds o to related.R.NotionRecipes.
func (o *NotionRecipe) SetNotionRecipeRecipe(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Recipe) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"notion_recipe\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"recipe"}),
		strmangle.WhereClause("\"", "\"", 2, notionRecipePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.PageID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Recipe, related.ID)
	if o.R == nil {
		o.R = &notionRecipeR{
			NotionRecipeRecipe: related,
		}
	} else {
		o.R.NotionRecipeRecipe = related
	}

	if related.R == nil {
		related.R = &recipeR{
			NotionRecipes: NotionRecipeSlice{o},
		}
	} else {
		related.R.NotionRecipes = append(related.R.NotionRecipes, o)
	}

	return nil
}

// RemoveNotionRecipeRecipe relationship.
// Sets o.R.NotionRecipeRecipe to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *NotionRecipe) RemoveNotionRecipeRecipe(ctx context.Context, exec boil.ContextExecutor, related *Recipe) error {
	var err error

	queries.SetScanner(&o.Recipe, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("recipe")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.NotionRecipeRecipe = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.NotionRecipes {
		if queries.Equal(o.Recipe, ri.Recipe) {
			continue
		}

		ln := len(related.R.NotionRecipes)
		if ln > 1 && i < ln-1 {
			related.R.NotionRecipes[i] = related.R.NotionRecipes[ln-1]
		}
		related.R.NotionRecipes = related.R.NotionRecipes[:ln-1]
		break
	}
	return nil
}

// AddPageNotionImages adds the given related objects to the existing relationships
// of the notion_recipe, optionally inserting them as new records.
// Appends related to o.R.PageNotionImages.
// Sets related.R.Page appropriately.
func (o *NotionRecipe) AddPageNotionImages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*NotionImage) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PageID = o.PageID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"notion_image\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"page_id"}),
				strmangle.WhereClause("\"", "\"", 2, notionImagePrimaryKeyColumns),
			)
			values := []interface{}{o.PageID, rel.BlockID, rel.PageID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PageID = o.PageID
		}
	}

	if o.R == nil {
		o.R = &notionRecipeR{
			PageNotionImages: related,
		}
	} else {
		o.R.PageNotionImages = append(o.R.PageNotionImages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &notionImageR{
				Page: o,
			}
		} else {
			rel.R.Page = o
		}
	}
	return nil
}

// AddMeals adds the given related objects to the existing relationships
// of the notion_recipe, optionally inserting them as new records.
// Appends related to o.R.Meals.
// Sets related.R.NotionRecipes appropriately.
func (o *NotionRecipe) AddMeals(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Meal) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"notion_meal\" (\"notion_recipe\", \"meal\") values ($1, $2)"
		values := []interface{}{o.PageID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &notionRecipeR{
			Meals: related,
		}
	} else {
		o.R.Meals = append(o.R.Meals, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mealR{
				NotionRecipes: NotionRecipeSlice{o},
			}
		} else {
			rel.R.NotionRecipes = append(rel.R.NotionRecipes, o)
		}
	}
	return nil
}

// SetMeals removes all previously related items of the
// notion_recipe replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.NotionRecipes's Meals accordingly.
// Replaces o.R.Meals with related.
// Sets related.R.NotionRecipes's Meals accordingly.
func (o *NotionRecipe) SetMeals(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Meal) error {
	query := "delete from \"notion_meal\" where \"notion_recipe\" = $1"
	values := []interface{}{o.PageID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeMealsFromNotionRecipesSlice(o, related)
	if o.R != nil {
		o.R.Meals = nil
	}
	return o.AddMeals(ctx, exec, insert, related...)
}

// RemoveMeals relationships from objects passed in.
// Removes related items from R.Meals (uses pointer comparison, removal does not keep order)
// Sets related.R.NotionRecipes.
func (o *NotionRecipe) RemoveMeals(ctx context.Context, exec boil.ContextExecutor, related ...*Meal) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"notion_meal\" where \"notion_recipe\" = $1 and \"meal\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.PageID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeMealsFromNotionRecipesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Meals {
			if rel != ri {
				continue
			}

			ln := len(o.R.Meals)
			if ln > 1 && i < ln-1 {
				o.R.Meals[i] = o.R.Meals[ln-1]
			}
			o.R.Meals = o.R.Meals[:ln-1]
			break
		}
	}

	return nil
}

func removeMealsFromNotionRecipesSlice(o *NotionRecipe, related []*Meal) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.NotionRecipes {
			if o.PageID != ri.PageID {
				continue
			}

			ln := len(rel.R.NotionRecipes)
			if ln > 1 && i < ln-1 {
				rel.R.NotionRecipes[i] = rel.R.NotionRecipes[ln-1]
			}
			rel.R.NotionRecipes = rel.R.NotionRecipes[:ln-1]
			break
		}
	}
}

// NotionRecipes retrieves all the records using an executor.
func NotionRecipes(mods ...qm.QueryMod) notionRecipeQuery {
	mods = append(mods, qm.From("\"notion_recipe\""))
	return notionRecipeQuery{NewQuery(mods...)}
}

// FindNotionRecipe retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNotionRecipe(ctx context.Context, exec boil.ContextExecutor, pageID string, selectCols ...string) (*NotionRecipe, error) {
	notionRecipeObj := &NotionRecipe{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"notion_recipe\" where \"page_id\"=$1", sel,
	)

	q := queries.Raw(query, pageID)

	err := q.Bind(ctx, exec, notionRecipeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from notion_recipe")
	}

	if err = notionRecipeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return notionRecipeObj, err
	}

	return notionRecipeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *NotionRecipe) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no notion_recipe provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(notionRecipeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	notionRecipeInsertCacheMut.RLock()
	cache, cached := notionRecipeInsertCache[key]
	notionRecipeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			notionRecipeAllColumns,
			notionRecipeColumnsWithDefault,
			notionRecipeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(notionRecipeType, notionRecipeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(notionRecipeType, notionRecipeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"notion_recipe\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"notion_recipe\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into notion_recipe")
	}

	if !cached {
		notionRecipeInsertCacheMut.Lock()
		notionRecipeInsertCache[key] = cache
		notionRecipeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the NotionRecipe.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *NotionRecipe) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	notionRecipeUpdateCacheMut.RLock()
	cache, cached := notionRecipeUpdateCache[key]
	notionRecipeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			notionRecipeAllColumns,
			notionRecipePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update notion_recipe, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"notion_recipe\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, notionRecipePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(notionRecipeType, notionRecipeMapping, append(wl, notionRecipePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update notion_recipe row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for notion_recipe")
	}

	if !cached {
		notionRecipeUpdateCacheMut.Lock()
		notionRecipeUpdateCache[key] = cache
		notionRecipeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q notionRecipeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for notion_recipe")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for notion_recipe")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NotionRecipeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notionRecipePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"notion_recipe\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, notionRecipePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in notionRecipe slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all notionRecipe")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *NotionRecipe) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no notion_recipe provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(notionRecipeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	notionRecipeUpsertCacheMut.RLock()
	cache, cached := notionRecipeUpsertCache[key]
	notionRecipeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			notionRecipeAllColumns,
			notionRecipeColumnsWithDefault,
			notionRecipeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			notionRecipeAllColumns,
			notionRecipePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert notion_recipe, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(notionRecipePrimaryKeyColumns))
			copy(conflict, notionRecipePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"notion_recipe\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(notionRecipeType, notionRecipeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(notionRecipeType, notionRecipeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert notion_recipe")
	}

	if !cached {
		notionRecipeUpsertCacheMut.Lock()
		notionRecipeUpsertCache[key] = cache
		notionRecipeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single NotionRecipe record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NotionRecipe) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no NotionRecipe provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), notionRecipePrimaryKeyMapping)
	sql := "DELETE FROM \"notion_recipe\" WHERE \"page_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from notion_recipe")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for notion_recipe")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q notionRecipeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no notionRecipeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from notion_recipe")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for notion_recipe")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NotionRecipeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(notionRecipeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notionRecipePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"notion_recipe\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, notionRecipePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from notionRecipe slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for notion_recipe")
	}

	if len(notionRecipeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NotionRecipe) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNotionRecipe(ctx, exec, o.PageID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NotionRecipeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NotionRecipeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notionRecipePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"notion_recipe\".* FROM \"notion_recipe\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, notionRecipePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NotionRecipeSlice")
	}

	*o = slice

	return nil
}

// NotionRecipeExists checks if the NotionRecipe row exists.
func NotionRecipeExists(ctx context.Context, exec boil.ContextExecutor, pageID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"notion_recipe\" where \"page_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, pageID)
	}
	row := exec.QueryRowContext(ctx, sql, pageID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if notion_recipe exists")
	}

	return exists, nil
}
