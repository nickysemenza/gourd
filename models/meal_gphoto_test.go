// Code generated by SQLBoiler 4.8.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMealGphotos(t *testing.T) {
	t.Parallel()

	query := MealGphotos()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMealGphotosDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealGphoto{}
	if err = randomize.Struct(seed, o, mealGphotoDBTypes, true, mealGphotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealGphoto struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MealGphotos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMealGphotosQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealGphoto{}
	if err = randomize.Struct(seed, o, mealGphotoDBTypes, true, mealGphotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealGphoto struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MealGphotos().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MealGphotos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMealGphotosSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealGphoto{}
	if err = randomize.Struct(seed, o, mealGphotoDBTypes, true, mealGphotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealGphoto struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MealGphotoSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MealGphotos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMealGphotosExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealGphoto{}
	if err = randomize.Struct(seed, o, mealGphotoDBTypes, true, mealGphotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealGphoto struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MealGphotoExists(ctx, tx, o.Meal, o.GphotosID)
	if err != nil {
		t.Errorf("Unable to check if MealGphoto exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MealGphotoExists to return true, but got false.")
	}
}

func testMealGphotosFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealGphoto{}
	if err = randomize.Struct(seed, o, mealGphotoDBTypes, true, mealGphotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealGphoto struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	mealGphotoFound, err := FindMealGphoto(ctx, tx, o.Meal, o.GphotosID)
	if err != nil {
		t.Error(err)
	}

	if mealGphotoFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMealGphotosBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealGphoto{}
	if err = randomize.Struct(seed, o, mealGphotoDBTypes, true, mealGphotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealGphoto struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MealGphotos().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMealGphotosOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealGphoto{}
	if err = randomize.Struct(seed, o, mealGphotoDBTypes, true, mealGphotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealGphoto struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MealGphotos().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMealGphotosAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	mealGphotoOne := &MealGphoto{}
	mealGphotoTwo := &MealGphoto{}
	if err = randomize.Struct(seed, mealGphotoOne, mealGphotoDBTypes, false, mealGphotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealGphoto struct: %s", err)
	}
	if err = randomize.Struct(seed, mealGphotoTwo, mealGphotoDBTypes, false, mealGphotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealGphoto struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mealGphotoOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mealGphotoTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MealGphotos().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMealGphotosCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	mealGphotoOne := &MealGphoto{}
	mealGphotoTwo := &MealGphoto{}
	if err = randomize.Struct(seed, mealGphotoOne, mealGphotoDBTypes, false, mealGphotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealGphoto struct: %s", err)
	}
	if err = randomize.Struct(seed, mealGphotoTwo, mealGphotoDBTypes, false, mealGphotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealGphoto struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mealGphotoOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mealGphotoTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MealGphotos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func mealGphotoBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *MealGphoto) error {
	*o = MealGphoto{}
	return nil
}

func mealGphotoAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *MealGphoto) error {
	*o = MealGphoto{}
	return nil
}

func mealGphotoAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *MealGphoto) error {
	*o = MealGphoto{}
	return nil
}

func mealGphotoBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MealGphoto) error {
	*o = MealGphoto{}
	return nil
}

func mealGphotoAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MealGphoto) error {
	*o = MealGphoto{}
	return nil
}

func mealGphotoBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MealGphoto) error {
	*o = MealGphoto{}
	return nil
}

func mealGphotoAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MealGphoto) error {
	*o = MealGphoto{}
	return nil
}

func mealGphotoBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MealGphoto) error {
	*o = MealGphoto{}
	return nil
}

func mealGphotoAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MealGphoto) error {
	*o = MealGphoto{}
	return nil
}

func testMealGphotosHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &MealGphoto{}
	o := &MealGphoto{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, mealGphotoDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MealGphoto object: %s", err)
	}

	AddMealGphotoHook(boil.BeforeInsertHook, mealGphotoBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	mealGphotoBeforeInsertHooks = []MealGphotoHook{}

	AddMealGphotoHook(boil.AfterInsertHook, mealGphotoAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	mealGphotoAfterInsertHooks = []MealGphotoHook{}

	AddMealGphotoHook(boil.AfterSelectHook, mealGphotoAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	mealGphotoAfterSelectHooks = []MealGphotoHook{}

	AddMealGphotoHook(boil.BeforeUpdateHook, mealGphotoBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	mealGphotoBeforeUpdateHooks = []MealGphotoHook{}

	AddMealGphotoHook(boil.AfterUpdateHook, mealGphotoAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	mealGphotoAfterUpdateHooks = []MealGphotoHook{}

	AddMealGphotoHook(boil.BeforeDeleteHook, mealGphotoBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	mealGphotoBeforeDeleteHooks = []MealGphotoHook{}

	AddMealGphotoHook(boil.AfterDeleteHook, mealGphotoAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	mealGphotoAfterDeleteHooks = []MealGphotoHook{}

	AddMealGphotoHook(boil.BeforeUpsertHook, mealGphotoBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	mealGphotoBeforeUpsertHooks = []MealGphotoHook{}

	AddMealGphotoHook(boil.AfterUpsertHook, mealGphotoAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	mealGphotoAfterUpsertHooks = []MealGphotoHook{}
}

func testMealGphotosInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealGphoto{}
	if err = randomize.Struct(seed, o, mealGphotoDBTypes, true, mealGphotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealGphoto struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MealGphotos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMealGphotosInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealGphoto{}
	if err = randomize.Struct(seed, o, mealGphotoDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MealGphoto struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(mealGphotoColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MealGphotos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMealGphotoToOneGphotosPhotoUsingGphoto(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local MealGphoto
	var foreign GphotosPhoto

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, mealGphotoDBTypes, false, mealGphotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealGphoto struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, gphotosPhotoDBTypes, false, gphotosPhotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GphotosPhoto struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.GphotosID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Gphoto().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MealGphotoSlice{&local}
	if err = local.L.LoadGphoto(ctx, tx, false, (*[]*MealGphoto)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Gphoto == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Gphoto = nil
	if err = local.L.LoadGphoto(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Gphoto == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testMealGphotoToOneRecipeUsingHighlightRecipeRecipe(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local MealGphoto
	var foreign Recipe

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, mealGphotoDBTypes, true, mealGphotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealGphoto struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, recipeDBTypes, false, recipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Recipe struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.HighlightRecipe, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.HighlightRecipeRecipe().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MealGphotoSlice{&local}
	if err = local.L.LoadHighlightRecipeRecipe(ctx, tx, false, (*[]*MealGphoto)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.HighlightRecipeRecipe == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.HighlightRecipeRecipe = nil
	if err = local.L.LoadHighlightRecipeRecipe(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.HighlightRecipeRecipe == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testMealGphotoToOneMealUsingMealGphotoMeal(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local MealGphoto
	var foreign Meal

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, mealGphotoDBTypes, false, mealGphotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealGphoto struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mealDBTypes, false, mealColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Meal struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.Meal = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.MealGphotoMeal().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MealGphotoSlice{&local}
	if err = local.L.LoadMealGphotoMeal(ctx, tx, false, (*[]*MealGphoto)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.MealGphotoMeal == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.MealGphotoMeal = nil
	if err = local.L.LoadMealGphotoMeal(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.MealGphotoMeal == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testMealGphotoToOneSetOpGphotosPhotoUsingGphoto(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MealGphoto
	var b, c GphotosPhoto

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mealGphotoDBTypes, false, strmangle.SetComplement(mealGphotoPrimaryKeyColumns, mealGphotoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, gphotosPhotoDBTypes, false, strmangle.SetComplement(gphotosPhotoPrimaryKeyColumns, gphotosPhotoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gphotosPhotoDBTypes, false, strmangle.SetComplement(gphotosPhotoPrimaryKeyColumns, gphotosPhotoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*GphotosPhoto{&b, &c} {
		err = a.SetGphoto(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Gphoto != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GphotoMealGphotos[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GphotosID != x.ID {
			t.Error("foreign key was wrong value", a.GphotosID)
		}

		if exists, err := MealGphotoExists(ctx, tx, a.Meal, a.GphotosID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testMealGphotoToOneSetOpRecipeUsingHighlightRecipeRecipe(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MealGphoto
	var b, c Recipe

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mealGphotoDBTypes, false, strmangle.SetComplement(mealGphotoPrimaryKeyColumns, mealGphotoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, recipeDBTypes, false, strmangle.SetComplement(recipePrimaryKeyColumns, recipeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, recipeDBTypes, false, strmangle.SetComplement(recipePrimaryKeyColumns, recipeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Recipe{&b, &c} {
		err = a.SetHighlightRecipeRecipe(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.HighlightRecipeRecipe != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.HighlightRecipeMealGphotos[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.HighlightRecipe, x.ID) {
			t.Error("foreign key was wrong value", a.HighlightRecipe)
		}

		zero := reflect.Zero(reflect.TypeOf(a.HighlightRecipe))
		reflect.Indirect(reflect.ValueOf(&a.HighlightRecipe)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.HighlightRecipe, x.ID) {
			t.Error("foreign key was wrong value", a.HighlightRecipe, x.ID)
		}
	}
}

func testMealGphotoToOneRemoveOpRecipeUsingHighlightRecipeRecipe(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MealGphoto
	var b Recipe

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mealGphotoDBTypes, false, strmangle.SetComplement(mealGphotoPrimaryKeyColumns, mealGphotoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, recipeDBTypes, false, strmangle.SetComplement(recipePrimaryKeyColumns, recipeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetHighlightRecipeRecipe(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveHighlightRecipeRecipe(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.HighlightRecipeRecipe().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.HighlightRecipeRecipe != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.HighlightRecipe) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.HighlightRecipeMealGphotos) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testMealGphotoToOneSetOpMealUsingMealGphotoMeal(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MealGphoto
	var b, c Meal

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mealGphotoDBTypes, false, strmangle.SetComplement(mealGphotoPrimaryKeyColumns, mealGphotoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mealDBTypes, false, strmangle.SetComplement(mealPrimaryKeyColumns, mealColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mealDBTypes, false, strmangle.SetComplement(mealPrimaryKeyColumns, mealColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Meal{&b, &c} {
		err = a.SetMealGphotoMeal(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.MealGphotoMeal != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MealGphotos[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Meal != x.ID {
			t.Error("foreign key was wrong value", a.Meal)
		}

		if exists, err := MealGphotoExists(ctx, tx, a.Meal, a.GphotosID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testMealGphotosReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealGphoto{}
	if err = randomize.Struct(seed, o, mealGphotoDBTypes, true, mealGphotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealGphoto struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMealGphotosReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealGphoto{}
	if err = randomize.Struct(seed, o, mealGphotoDBTypes, true, mealGphotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealGphoto struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MealGphotoSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMealGphotosSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealGphoto{}
	if err = randomize.Struct(seed, o, mealGphotoDBTypes, true, mealGphotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealGphoto struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MealGphotos().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	mealGphotoDBTypes = map[string]string{`Meal`: `text`, `GphotosID`: `text`, `HighlightRecipe`: `text`}
	_                 = bytes.MinRead
)

func testMealGphotosUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(mealGphotoPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(mealGphotoAllColumns) == len(mealGphotoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MealGphoto{}
	if err = randomize.Struct(seed, o, mealGphotoDBTypes, true, mealGphotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealGphoto struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MealGphotos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mealGphotoDBTypes, true, mealGphotoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MealGphoto struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMealGphotosSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(mealGphotoAllColumns) == len(mealGphotoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MealGphoto{}
	if err = randomize.Struct(seed, o, mealGphotoDBTypes, true, mealGphotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealGphoto struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MealGphotos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mealGphotoDBTypes, true, mealGphotoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MealGphoto struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(mealGphotoAllColumns, mealGphotoPrimaryKeyColumns) {
		fields = mealGphotoAllColumns
	} else {
		fields = strmangle.SetComplement(
			mealGphotoAllColumns,
			mealGphotoPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MealGphotoSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMealGphotosUpsert(t *testing.T) {
	t.Parallel()

	if len(mealGphotoAllColumns) == len(mealGphotoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MealGphoto{}
	if err = randomize.Struct(seed, &o, mealGphotoDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MealGphoto struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MealGphoto: %s", err)
	}

	count, err := MealGphotos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, mealGphotoDBTypes, false, mealGphotoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MealGphoto struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MealGphoto: %s", err)
	}

	count, err = MealGphotos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
