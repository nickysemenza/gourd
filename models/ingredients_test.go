// Code generated by SQLBoiler 4.8.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testIngredients(t *testing.T) {
	t.Parallel()

	query := Ingredients()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testIngredientsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ingredient{}
	if err = randomize.Struct(seed, o, ingredientDBTypes, true, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Ingredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIngredientsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ingredient{}
	if err = randomize.Struct(seed, o, ingredientDBTypes, true, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Ingredients().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Ingredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIngredientsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ingredient{}
	if err = randomize.Struct(seed, o, ingredientDBTypes, true, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IngredientSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Ingredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIngredientsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ingredient{}
	if err = randomize.Struct(seed, o, ingredientDBTypes, true, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := IngredientExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Ingredient exists: %s", err)
	}
	if !e {
		t.Errorf("Expected IngredientExists to return true, but got false.")
	}
}

func testIngredientsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ingredient{}
	if err = randomize.Struct(seed, o, ingredientDBTypes, true, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	ingredientFound, err := FindIngredient(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if ingredientFound == nil {
		t.Error("want a record, got nil")
	}
}

func testIngredientsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ingredient{}
	if err = randomize.Struct(seed, o, ingredientDBTypes, true, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Ingredients().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testIngredientsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ingredient{}
	if err = randomize.Struct(seed, o, ingredientDBTypes, true, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Ingredients().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testIngredientsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ingredientOne := &Ingredient{}
	ingredientTwo := &Ingredient{}
	if err = randomize.Struct(seed, ingredientOne, ingredientDBTypes, false, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}
	if err = randomize.Struct(seed, ingredientTwo, ingredientDBTypes, false, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ingredientOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ingredientTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Ingredients().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testIngredientsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	ingredientOne := &Ingredient{}
	ingredientTwo := &Ingredient{}
	if err = randomize.Struct(seed, ingredientOne, ingredientDBTypes, false, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}
	if err = randomize.Struct(seed, ingredientTwo, ingredientDBTypes, false, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ingredientOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ingredientTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Ingredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func ingredientBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Ingredient) error {
	*o = Ingredient{}
	return nil
}

func ingredientAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Ingredient) error {
	*o = Ingredient{}
	return nil
}

func ingredientAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Ingredient) error {
	*o = Ingredient{}
	return nil
}

func ingredientBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Ingredient) error {
	*o = Ingredient{}
	return nil
}

func ingredientAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Ingredient) error {
	*o = Ingredient{}
	return nil
}

func ingredientBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Ingredient) error {
	*o = Ingredient{}
	return nil
}

func ingredientAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Ingredient) error {
	*o = Ingredient{}
	return nil
}

func ingredientBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Ingredient) error {
	*o = Ingredient{}
	return nil
}

func ingredientAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Ingredient) error {
	*o = Ingredient{}
	return nil
}

func testIngredientsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Ingredient{}
	o := &Ingredient{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, ingredientDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Ingredient object: %s", err)
	}

	AddIngredientHook(boil.BeforeInsertHook, ingredientBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	ingredientBeforeInsertHooks = []IngredientHook{}

	AddIngredientHook(boil.AfterInsertHook, ingredientAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	ingredientAfterInsertHooks = []IngredientHook{}

	AddIngredientHook(boil.AfterSelectHook, ingredientAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	ingredientAfterSelectHooks = []IngredientHook{}

	AddIngredientHook(boil.BeforeUpdateHook, ingredientBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	ingredientBeforeUpdateHooks = []IngredientHook{}

	AddIngredientHook(boil.AfterUpdateHook, ingredientAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	ingredientAfterUpdateHooks = []IngredientHook{}

	AddIngredientHook(boil.BeforeDeleteHook, ingredientBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	ingredientBeforeDeleteHooks = []IngredientHook{}

	AddIngredientHook(boil.AfterDeleteHook, ingredientAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	ingredientAfterDeleteHooks = []IngredientHook{}

	AddIngredientHook(boil.BeforeUpsertHook, ingredientBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	ingredientBeforeUpsertHooks = []IngredientHook{}

	AddIngredientHook(boil.AfterUpsertHook, ingredientAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	ingredientAfterUpsertHooks = []IngredientHook{}
}

func testIngredientsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ingredient{}
	if err = randomize.Struct(seed, o, ingredientDBTypes, true, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Ingredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIngredientsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ingredient{}
	if err = randomize.Struct(seed, o, ingredientDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(ingredientColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Ingredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIngredientToManyIngredientUnits(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Ingredient
	var b, c IngredientUnit

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ingredientDBTypes, true, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, ingredientUnitDBTypes, false, ingredientUnitColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, ingredientUnitDBTypes, false, ingredientUnitColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.Ingredient = a.ID
	c.Ingredient = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.IngredientUnits().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.Ingredient == b.Ingredient {
			bFound = true
		}
		if v.Ingredient == c.Ingredient {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := IngredientSlice{&a}
	if err = a.L.LoadIngredientUnits(ctx, tx, false, (*[]*Ingredient)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IngredientUnits); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.IngredientUnits = nil
	if err = a.L.LoadIngredientUnits(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IngredientUnits); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testIngredientToManyParentIngredients(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Ingredient
	var b, c Ingredient

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ingredientDBTypes, true, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, ingredientDBTypes, false, ingredientColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, ingredientDBTypes, false, ingredientColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Parent, a.ID)
	queries.Assign(&c.Parent, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ParentIngredients().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Parent, b.Parent) {
			bFound = true
		}
		if queries.Equal(v.Parent, c.Parent) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := IngredientSlice{&a}
	if err = a.L.LoadParentIngredients(ctx, tx, false, (*[]*Ingredient)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ParentIngredients); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ParentIngredients = nil
	if err = a.L.LoadParentIngredients(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ParentIngredients); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testIngredientToManyRecipeSectionIngredients(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Ingredient
	var b, c RecipeSectionIngredient

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ingredientDBTypes, true, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, recipeSectionIngredientDBTypes, false, recipeSectionIngredientColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, recipeSectionIngredientDBTypes, false, recipeSectionIngredientColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Ingredient, a.ID)
	queries.Assign(&c.Ingredient, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.RecipeSectionIngredients().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Ingredient, b.Ingredient) {
			bFound = true
		}
		if queries.Equal(v.Ingredient, c.Ingredient) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := IngredientSlice{&a}
	if err = a.L.LoadRecipeSectionIngredients(ctx, tx, false, (*[]*Ingredient)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RecipeSectionIngredients); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RecipeSectionIngredients = nil
	if err = a.L.LoadRecipeSectionIngredients(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RecipeSectionIngredients); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testIngredientToManyAddOpIngredientUnits(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Ingredient
	var b, c, d, e IngredientUnit

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ingredientDBTypes, false, strmangle.SetComplement(ingredientPrimaryKeyColumns, ingredientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*IngredientUnit{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, ingredientUnitDBTypes, false, strmangle.SetComplement(ingredientUnitPrimaryKeyColumns, ingredientUnitColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*IngredientUnit{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddIngredientUnits(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Ingredient {
			t.Error("foreign key was wrong value", a.ID, first.Ingredient)
		}
		if a.ID != second.Ingredient {
			t.Error("foreign key was wrong value", a.ID, second.Ingredient)
		}

		if first.R.IngredientUnitIngredient != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.IngredientUnitIngredient != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.IngredientUnits[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.IngredientUnits[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.IngredientUnits().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testIngredientToManyAddOpParentIngredients(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Ingredient
	var b, c, d, e Ingredient

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ingredientDBTypes, false, strmangle.SetComplement(ingredientPrimaryKeyColumns, ingredientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Ingredient{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, ingredientDBTypes, false, strmangle.SetComplement(ingredientPrimaryKeyColumns, ingredientColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Ingredient{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddParentIngredients(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Parent) {
			t.Error("foreign key was wrong value", a.ID, first.Parent)
		}
		if !queries.Equal(a.ID, second.Parent) {
			t.Error("foreign key was wrong value", a.ID, second.Parent)
		}

		if first.R.ParentIngredient != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ParentIngredient != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ParentIngredients[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ParentIngredients[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ParentIngredients().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testIngredientToManySetOpParentIngredients(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Ingredient
	var b, c, d, e Ingredient

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ingredientDBTypes, false, strmangle.SetComplement(ingredientPrimaryKeyColumns, ingredientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Ingredient{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, ingredientDBTypes, false, strmangle.SetComplement(ingredientPrimaryKeyColumns, ingredientColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetParentIngredients(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ParentIngredients().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetParentIngredients(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ParentIngredients().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Parent) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Parent) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Parent) {
		t.Error("foreign key was wrong value", a.ID, d.Parent)
	}
	if !queries.Equal(a.ID, e.Parent) {
		t.Error("foreign key was wrong value", a.ID, e.Parent)
	}

	if b.R.ParentIngredient != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ParentIngredient != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ParentIngredient != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ParentIngredient != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ParentIngredients[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ParentIngredients[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testIngredientToManyRemoveOpParentIngredients(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Ingredient
	var b, c, d, e Ingredient

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ingredientDBTypes, false, strmangle.SetComplement(ingredientPrimaryKeyColumns, ingredientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Ingredient{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, ingredientDBTypes, false, strmangle.SetComplement(ingredientPrimaryKeyColumns, ingredientColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddParentIngredients(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ParentIngredients().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveParentIngredients(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ParentIngredients().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Parent) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Parent) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ParentIngredient != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ParentIngredient != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ParentIngredient != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ParentIngredient != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ParentIngredients) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ParentIngredients[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ParentIngredients[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testIngredientToManyAddOpRecipeSectionIngredients(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Ingredient
	var b, c, d, e RecipeSectionIngredient

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ingredientDBTypes, false, strmangle.SetComplement(ingredientPrimaryKeyColumns, ingredientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RecipeSectionIngredient{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, recipeSectionIngredientDBTypes, false, strmangle.SetComplement(recipeSectionIngredientPrimaryKeyColumns, recipeSectionIngredientColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*RecipeSectionIngredient{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRecipeSectionIngredients(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Ingredient) {
			t.Error("foreign key was wrong value", a.ID, first.Ingredient)
		}
		if !queries.Equal(a.ID, second.Ingredient) {
			t.Error("foreign key was wrong value", a.ID, second.Ingredient)
		}

		if first.R.RecipeSectionIngredientIngredient != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.RecipeSectionIngredientIngredient != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RecipeSectionIngredients[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RecipeSectionIngredients[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RecipeSectionIngredients().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testIngredientToManySetOpRecipeSectionIngredients(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Ingredient
	var b, c, d, e RecipeSectionIngredient

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ingredientDBTypes, false, strmangle.SetComplement(ingredientPrimaryKeyColumns, ingredientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RecipeSectionIngredient{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, recipeSectionIngredientDBTypes, false, strmangle.SetComplement(recipeSectionIngredientPrimaryKeyColumns, recipeSectionIngredientColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetRecipeSectionIngredients(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RecipeSectionIngredients().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetRecipeSectionIngredients(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RecipeSectionIngredients().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Ingredient) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Ingredient) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Ingredient) {
		t.Error("foreign key was wrong value", a.ID, d.Ingredient)
	}
	if !queries.Equal(a.ID, e.Ingredient) {
		t.Error("foreign key was wrong value", a.ID, e.Ingredient)
	}

	if b.R.RecipeSectionIngredientIngredient != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.RecipeSectionIngredientIngredient != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.RecipeSectionIngredientIngredient != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.RecipeSectionIngredientIngredient != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.RecipeSectionIngredients[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.RecipeSectionIngredients[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testIngredientToManyRemoveOpRecipeSectionIngredients(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Ingredient
	var b, c, d, e RecipeSectionIngredient

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ingredientDBTypes, false, strmangle.SetComplement(ingredientPrimaryKeyColumns, ingredientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RecipeSectionIngredient{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, recipeSectionIngredientDBTypes, false, strmangle.SetComplement(recipeSectionIngredientPrimaryKeyColumns, recipeSectionIngredientColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddRecipeSectionIngredients(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RecipeSectionIngredients().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveRecipeSectionIngredients(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RecipeSectionIngredients().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Ingredient) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Ingredient) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.RecipeSectionIngredientIngredient != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.RecipeSectionIngredientIngredient != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.RecipeSectionIngredientIngredient != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.RecipeSectionIngredientIngredient != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.RecipeSectionIngredients) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.RecipeSectionIngredients[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.RecipeSectionIngredients[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testIngredientToOneIngredientUsingParentIngredient(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Ingredient
	var foreign Ingredient

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, ingredientDBTypes, true, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, ingredientDBTypes, false, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Parent, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ParentIngredient().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := IngredientSlice{&local}
	if err = local.L.LoadParentIngredient(ctx, tx, false, (*[]*Ingredient)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ParentIngredient == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ParentIngredient = nil
	if err = local.L.LoadParentIngredient(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ParentIngredient == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testIngredientToOneSetOpIngredientUsingParentIngredient(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Ingredient
	var b, c Ingredient

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ingredientDBTypes, false, strmangle.SetComplement(ingredientPrimaryKeyColumns, ingredientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, ingredientDBTypes, false, strmangle.SetComplement(ingredientPrimaryKeyColumns, ingredientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, ingredientDBTypes, false, strmangle.SetComplement(ingredientPrimaryKeyColumns, ingredientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Ingredient{&b, &c} {
		err = a.SetParentIngredient(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ParentIngredient != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ParentIngredients[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Parent, x.ID) {
			t.Error("foreign key was wrong value", a.Parent)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Parent))
		reflect.Indirect(reflect.ValueOf(&a.Parent)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Parent, x.ID) {
			t.Error("foreign key was wrong value", a.Parent, x.ID)
		}
	}
}

func testIngredientToOneRemoveOpIngredientUsingParentIngredient(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Ingredient
	var b Ingredient

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ingredientDBTypes, false, strmangle.SetComplement(ingredientPrimaryKeyColumns, ingredientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, ingredientDBTypes, false, strmangle.SetComplement(ingredientPrimaryKeyColumns, ingredientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetParentIngredient(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveParentIngredient(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ParentIngredient().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ParentIngredient != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Parent) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ParentIngredients) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testIngredientsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ingredient{}
	if err = randomize.Struct(seed, o, ingredientDBTypes, true, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIngredientsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ingredient{}
	if err = randomize.Struct(seed, o, ingredientDBTypes, true, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IngredientSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIngredientsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ingredient{}
	if err = randomize.Struct(seed, o, ingredientDBTypes, true, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Ingredients().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	ingredientDBTypes = map[string]string{`ID`: `text`, `Name`: `text`, `FDCID`: `integer`, `Parent`: `text`}
	_                 = bytes.MinRead
)

func testIngredientsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(ingredientPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(ingredientAllColumns) == len(ingredientPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Ingredient{}
	if err = randomize.Struct(seed, o, ingredientDBTypes, true, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Ingredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ingredientDBTypes, true, ingredientPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testIngredientsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(ingredientAllColumns) == len(ingredientPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Ingredient{}
	if err = randomize.Struct(seed, o, ingredientDBTypes, true, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Ingredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ingredientDBTypes, true, ingredientPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(ingredientAllColumns, ingredientPrimaryKeyColumns) {
		fields = ingredientAllColumns
	} else {
		fields = strmangle.SetComplement(
			ingredientAllColumns,
			ingredientPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := IngredientSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testIngredientsUpsert(t *testing.T) {
	t.Parallel()

	if len(ingredientAllColumns) == len(ingredientPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Ingredient{}
	if err = randomize.Struct(seed, &o, ingredientDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Ingredient: %s", err)
	}

	count, err := Ingredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, ingredientDBTypes, false, ingredientPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Ingredient: %s", err)
	}

	count, err = Ingredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
