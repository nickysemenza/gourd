// Code generated by SQLBoiler 4.8.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGphotosPhotos(t *testing.T) {
	t.Parallel()

	query := GphotosPhotos()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGphotosPhotosDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GphotosPhoto{}
	if err = randomize.Struct(seed, o, gphotosPhotoDBTypes, true, gphotosPhotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GphotosPhoto struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GphotosPhotos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGphotosPhotosQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GphotosPhoto{}
	if err = randomize.Struct(seed, o, gphotosPhotoDBTypes, true, gphotosPhotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GphotosPhoto struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := GphotosPhotos().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GphotosPhotos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGphotosPhotosSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GphotosPhoto{}
	if err = randomize.Struct(seed, o, gphotosPhotoDBTypes, true, gphotosPhotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GphotosPhoto struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GphotosPhotoSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GphotosPhotos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGphotosPhotosExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GphotosPhoto{}
	if err = randomize.Struct(seed, o, gphotosPhotoDBTypes, true, gphotosPhotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GphotosPhoto struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GphotosPhotoExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if GphotosPhoto exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GphotosPhotoExists to return true, but got false.")
	}
}

func testGphotosPhotosFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GphotosPhoto{}
	if err = randomize.Struct(seed, o, gphotosPhotoDBTypes, true, gphotosPhotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GphotosPhoto struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	gphotosPhotoFound, err := FindGphotosPhoto(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if gphotosPhotoFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGphotosPhotosBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GphotosPhoto{}
	if err = randomize.Struct(seed, o, gphotosPhotoDBTypes, true, gphotosPhotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GphotosPhoto struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = GphotosPhotos().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testGphotosPhotosOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GphotosPhoto{}
	if err = randomize.Struct(seed, o, gphotosPhotoDBTypes, true, gphotosPhotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GphotosPhoto struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := GphotosPhotos().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGphotosPhotosAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gphotosPhotoOne := &GphotosPhoto{}
	gphotosPhotoTwo := &GphotosPhoto{}
	if err = randomize.Struct(seed, gphotosPhotoOne, gphotosPhotoDBTypes, false, gphotosPhotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GphotosPhoto struct: %s", err)
	}
	if err = randomize.Struct(seed, gphotosPhotoTwo, gphotosPhotoDBTypes, false, gphotosPhotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GphotosPhoto struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = gphotosPhotoOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = gphotosPhotoTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GphotosPhotos().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGphotosPhotosCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	gphotosPhotoOne := &GphotosPhoto{}
	gphotosPhotoTwo := &GphotosPhoto{}
	if err = randomize.Struct(seed, gphotosPhotoOne, gphotosPhotoDBTypes, false, gphotosPhotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GphotosPhoto struct: %s", err)
	}
	if err = randomize.Struct(seed, gphotosPhotoTwo, gphotosPhotoDBTypes, false, gphotosPhotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GphotosPhoto struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = gphotosPhotoOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = gphotosPhotoTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GphotosPhotos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func gphotosPhotoBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *GphotosPhoto) error {
	*o = GphotosPhoto{}
	return nil
}

func gphotosPhotoAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *GphotosPhoto) error {
	*o = GphotosPhoto{}
	return nil
}

func gphotosPhotoAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *GphotosPhoto) error {
	*o = GphotosPhoto{}
	return nil
}

func gphotosPhotoBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GphotosPhoto) error {
	*o = GphotosPhoto{}
	return nil
}

func gphotosPhotoAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GphotosPhoto) error {
	*o = GphotosPhoto{}
	return nil
}

func gphotosPhotoBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GphotosPhoto) error {
	*o = GphotosPhoto{}
	return nil
}

func gphotosPhotoAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GphotosPhoto) error {
	*o = GphotosPhoto{}
	return nil
}

func gphotosPhotoBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GphotosPhoto) error {
	*o = GphotosPhoto{}
	return nil
}

func gphotosPhotoAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GphotosPhoto) error {
	*o = GphotosPhoto{}
	return nil
}

func testGphotosPhotosHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &GphotosPhoto{}
	o := &GphotosPhoto{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, gphotosPhotoDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GphotosPhoto object: %s", err)
	}

	AddGphotosPhotoHook(boil.BeforeInsertHook, gphotosPhotoBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	gphotosPhotoBeforeInsertHooks = []GphotosPhotoHook{}

	AddGphotosPhotoHook(boil.AfterInsertHook, gphotosPhotoAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	gphotosPhotoAfterInsertHooks = []GphotosPhotoHook{}

	AddGphotosPhotoHook(boil.AfterSelectHook, gphotosPhotoAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	gphotosPhotoAfterSelectHooks = []GphotosPhotoHook{}

	AddGphotosPhotoHook(boil.BeforeUpdateHook, gphotosPhotoBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	gphotosPhotoBeforeUpdateHooks = []GphotosPhotoHook{}

	AddGphotosPhotoHook(boil.AfterUpdateHook, gphotosPhotoAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	gphotosPhotoAfterUpdateHooks = []GphotosPhotoHook{}

	AddGphotosPhotoHook(boil.BeforeDeleteHook, gphotosPhotoBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	gphotosPhotoBeforeDeleteHooks = []GphotosPhotoHook{}

	AddGphotosPhotoHook(boil.AfterDeleteHook, gphotosPhotoAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	gphotosPhotoAfterDeleteHooks = []GphotosPhotoHook{}

	AddGphotosPhotoHook(boil.BeforeUpsertHook, gphotosPhotoBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	gphotosPhotoBeforeUpsertHooks = []GphotosPhotoHook{}

	AddGphotosPhotoHook(boil.AfterUpsertHook, gphotosPhotoAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	gphotosPhotoAfterUpsertHooks = []GphotosPhotoHook{}
}

func testGphotosPhotosInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GphotosPhoto{}
	if err = randomize.Struct(seed, o, gphotosPhotoDBTypes, true, gphotosPhotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GphotosPhoto struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GphotosPhotos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGphotosPhotosInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GphotosPhoto{}
	if err = randomize.Struct(seed, o, gphotosPhotoDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GphotosPhoto struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(gphotosPhotoColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := GphotosPhotos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGphotosPhotoToManyGphotoMealGphotos(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GphotosPhoto
	var b, c MealGphoto

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gphotosPhotoDBTypes, true, gphotosPhotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GphotosPhoto struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, mealGphotoDBTypes, false, mealGphotoColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mealGphotoDBTypes, false, mealGphotoColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.GphotosID = a.ID
	c.GphotosID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.GphotoMealGphotos().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.GphotosID == b.GphotosID {
			bFound = true
		}
		if v.GphotosID == c.GphotosID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GphotosPhotoSlice{&a}
	if err = a.L.LoadGphotoMealGphotos(ctx, tx, false, (*[]*GphotosPhoto)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GphotoMealGphotos); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.GphotoMealGphotos = nil
	if err = a.L.LoadGphotoMealGphotos(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GphotoMealGphotos); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGphotosPhotoToManyAddOpGphotoMealGphotos(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GphotosPhoto
	var b, c, d, e MealGphoto

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gphotosPhotoDBTypes, false, strmangle.SetComplement(gphotosPhotoPrimaryKeyColumns, gphotosPhotoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MealGphoto{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, mealGphotoDBTypes, false, strmangle.SetComplement(mealGphotoPrimaryKeyColumns, mealGphotoColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MealGphoto{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGphotoMealGphotos(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.GphotosID {
			t.Error("foreign key was wrong value", a.ID, first.GphotosID)
		}
		if a.ID != second.GphotosID {
			t.Error("foreign key was wrong value", a.ID, second.GphotosID)
		}

		if first.R.Gphoto != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Gphoto != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.GphotoMealGphotos[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.GphotoMealGphotos[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.GphotoMealGphotos().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testGphotosPhotoToOneGphotosAlbumUsingAlbum(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local GphotosPhoto
	var foreign GphotosAlbum

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, gphotosPhotoDBTypes, false, gphotosPhotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GphotosPhoto struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, gphotosAlbumDBTypes, false, gphotosAlbumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GphotosAlbum struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AlbumID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Album().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := GphotosPhotoSlice{&local}
	if err = local.L.LoadAlbum(ctx, tx, false, (*[]*GphotosPhoto)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Album == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Album = nil
	if err = local.L.LoadAlbum(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Album == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testGphotosPhotoToOneImageUsingGphotosPhotoImage(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local GphotosPhoto
	var foreign Image

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, gphotosPhotoDBTypes, false, gphotosPhotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GphotosPhoto struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, imageDBTypes, false, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.Image = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.GphotosPhotoImage().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := GphotosPhotoSlice{&local}
	if err = local.L.LoadGphotosPhotoImage(ctx, tx, false, (*[]*GphotosPhoto)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.GphotosPhotoImage == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.GphotosPhotoImage = nil
	if err = local.L.LoadGphotosPhotoImage(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.GphotosPhotoImage == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testGphotosPhotoToOneSetOpGphotosAlbumUsingAlbum(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GphotosPhoto
	var b, c GphotosAlbum

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gphotosPhotoDBTypes, false, strmangle.SetComplement(gphotosPhotoPrimaryKeyColumns, gphotosPhotoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, gphotosAlbumDBTypes, false, strmangle.SetComplement(gphotosAlbumPrimaryKeyColumns, gphotosAlbumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gphotosAlbumDBTypes, false, strmangle.SetComplement(gphotosAlbumPrimaryKeyColumns, gphotosAlbumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*GphotosAlbum{&b, &c} {
		err = a.SetAlbum(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Album != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AlbumGphotosPhotos[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AlbumID != x.ID {
			t.Error("foreign key was wrong value", a.AlbumID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AlbumID))
		reflect.Indirect(reflect.ValueOf(&a.AlbumID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AlbumID != x.ID {
			t.Error("foreign key was wrong value", a.AlbumID, x.ID)
		}
	}
}
func testGphotosPhotoToOneSetOpImageUsingGphotosPhotoImage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GphotosPhoto
	var b, c Image

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gphotosPhotoDBTypes, false, strmangle.SetComplement(gphotosPhotoPrimaryKeyColumns, gphotosPhotoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Image{&b, &c} {
		err = a.SetGphotosPhotoImage(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.GphotosPhotoImage != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GphotosPhotos[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Image != x.ID {
			t.Error("foreign key was wrong value", a.Image)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Image))
		reflect.Indirect(reflect.ValueOf(&a.Image)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Image != x.ID {
			t.Error("foreign key was wrong value", a.Image, x.ID)
		}
	}
}

func testGphotosPhotosReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GphotosPhoto{}
	if err = randomize.Struct(seed, o, gphotosPhotoDBTypes, true, gphotosPhotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GphotosPhoto struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGphotosPhotosReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GphotosPhoto{}
	if err = randomize.Struct(seed, o, gphotosPhotoDBTypes, true, gphotosPhotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GphotosPhoto struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GphotosPhotoSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGphotosPhotosSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GphotosPhoto{}
	if err = randomize.Struct(seed, o, gphotosPhotoDBTypes, true, gphotosPhotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GphotosPhoto struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GphotosPhotos().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	gphotosPhotoDBTypes = map[string]string{`ID`: `text`, `AlbumID`: `text`, `CreationTime`: `timestamp without time zone`, `LastSeen`: `timestamp without time zone`, `BlurHash`: `text`, `Image`: `text`}
	_                   = bytes.MinRead
)

func testGphotosPhotosUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(gphotosPhotoPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(gphotosPhotoAllColumns) == len(gphotosPhotoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GphotosPhoto{}
	if err = randomize.Struct(seed, o, gphotosPhotoDBTypes, true, gphotosPhotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GphotosPhoto struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GphotosPhotos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, gphotosPhotoDBTypes, true, gphotosPhotoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GphotosPhoto struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGphotosPhotosSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(gphotosPhotoAllColumns) == len(gphotosPhotoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GphotosPhoto{}
	if err = randomize.Struct(seed, o, gphotosPhotoDBTypes, true, gphotosPhotoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GphotosPhoto struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GphotosPhotos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, gphotosPhotoDBTypes, true, gphotosPhotoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GphotosPhoto struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(gphotosPhotoAllColumns, gphotosPhotoPrimaryKeyColumns) {
		fields = gphotosPhotoAllColumns
	} else {
		fields = strmangle.SetComplement(
			gphotosPhotoAllColumns,
			gphotosPhotoPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GphotosPhotoSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGphotosPhotosUpsert(t *testing.T) {
	t.Parallel()

	if len(gphotosPhotoAllColumns) == len(gphotosPhotoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := GphotosPhoto{}
	if err = randomize.Struct(seed, &o, gphotosPhotoDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GphotosPhoto struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GphotosPhoto: %s", err)
	}

	count, err := GphotosPhotos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, gphotosPhotoDBTypes, false, gphotosPhotoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GphotosPhoto struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GphotosPhoto: %s", err)
	}

	count, err = GphotosPhotos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
