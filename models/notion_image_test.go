// Code generated by SQLBoiler 4.8.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testNotionImages(t *testing.T) {
	t.Parallel()

	query := NotionImages()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testNotionImagesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotionImage{}
	if err = randomize.Struct(seed, o, notionImageDBTypes, true, notionImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NotionImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNotionImagesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotionImage{}
	if err = randomize.Struct(seed, o, notionImageDBTypes, true, notionImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := NotionImages().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NotionImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNotionImagesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotionImage{}
	if err = randomize.Struct(seed, o, notionImageDBTypes, true, notionImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NotionImageSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NotionImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNotionImagesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotionImage{}
	if err = randomize.Struct(seed, o, notionImageDBTypes, true, notionImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := NotionImageExists(ctx, tx, o.BlockID, o.PageID)
	if err != nil {
		t.Errorf("Unable to check if NotionImage exists: %s", err)
	}
	if !e {
		t.Errorf("Expected NotionImageExists to return true, but got false.")
	}
}

func testNotionImagesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotionImage{}
	if err = randomize.Struct(seed, o, notionImageDBTypes, true, notionImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	notionImageFound, err := FindNotionImage(ctx, tx, o.BlockID, o.PageID)
	if err != nil {
		t.Error(err)
	}

	if notionImageFound == nil {
		t.Error("want a record, got nil")
	}
}

func testNotionImagesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotionImage{}
	if err = randomize.Struct(seed, o, notionImageDBTypes, true, notionImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = NotionImages().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testNotionImagesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotionImage{}
	if err = randomize.Struct(seed, o, notionImageDBTypes, true, notionImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := NotionImages().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testNotionImagesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	notionImageOne := &NotionImage{}
	notionImageTwo := &NotionImage{}
	if err = randomize.Struct(seed, notionImageOne, notionImageDBTypes, false, notionImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionImage struct: %s", err)
	}
	if err = randomize.Struct(seed, notionImageTwo, notionImageDBTypes, false, notionImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = notionImageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = notionImageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NotionImages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testNotionImagesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	notionImageOne := &NotionImage{}
	notionImageTwo := &NotionImage{}
	if err = randomize.Struct(seed, notionImageOne, notionImageDBTypes, false, notionImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionImage struct: %s", err)
	}
	if err = randomize.Struct(seed, notionImageTwo, notionImageDBTypes, false, notionImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = notionImageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = notionImageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NotionImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func notionImageBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *NotionImage) error {
	*o = NotionImage{}
	return nil
}

func notionImageAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *NotionImage) error {
	*o = NotionImage{}
	return nil
}

func notionImageAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *NotionImage) error {
	*o = NotionImage{}
	return nil
}

func notionImageBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *NotionImage) error {
	*o = NotionImage{}
	return nil
}

func notionImageAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *NotionImage) error {
	*o = NotionImage{}
	return nil
}

func notionImageBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *NotionImage) error {
	*o = NotionImage{}
	return nil
}

func notionImageAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *NotionImage) error {
	*o = NotionImage{}
	return nil
}

func notionImageBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *NotionImage) error {
	*o = NotionImage{}
	return nil
}

func notionImageAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *NotionImage) error {
	*o = NotionImage{}
	return nil
}

func testNotionImagesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &NotionImage{}
	o := &NotionImage{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, notionImageDBTypes, false); err != nil {
		t.Errorf("Unable to randomize NotionImage object: %s", err)
	}

	AddNotionImageHook(boil.BeforeInsertHook, notionImageBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	notionImageBeforeInsertHooks = []NotionImageHook{}

	AddNotionImageHook(boil.AfterInsertHook, notionImageAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	notionImageAfterInsertHooks = []NotionImageHook{}

	AddNotionImageHook(boil.AfterSelectHook, notionImageAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	notionImageAfterSelectHooks = []NotionImageHook{}

	AddNotionImageHook(boil.BeforeUpdateHook, notionImageBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	notionImageBeforeUpdateHooks = []NotionImageHook{}

	AddNotionImageHook(boil.AfterUpdateHook, notionImageAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	notionImageAfterUpdateHooks = []NotionImageHook{}

	AddNotionImageHook(boil.BeforeDeleteHook, notionImageBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	notionImageBeforeDeleteHooks = []NotionImageHook{}

	AddNotionImageHook(boil.AfterDeleteHook, notionImageAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	notionImageAfterDeleteHooks = []NotionImageHook{}

	AddNotionImageHook(boil.BeforeUpsertHook, notionImageBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	notionImageBeforeUpsertHooks = []NotionImageHook{}

	AddNotionImageHook(boil.AfterUpsertHook, notionImageAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	notionImageAfterUpsertHooks = []NotionImageHook{}
}

func testNotionImagesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotionImage{}
	if err = randomize.Struct(seed, o, notionImageDBTypes, true, notionImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NotionImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNotionImagesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotionImage{}
	if err = randomize.Struct(seed, o, notionImageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize NotionImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(notionImageColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := NotionImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNotionImageToOneImageUsingNotionImageImage(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local NotionImage
	var foreign Image

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, notionImageDBTypes, false, notionImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionImage struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, imageDBTypes, false, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.Image = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.NotionImageImage().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := NotionImageSlice{&local}
	if err = local.L.LoadNotionImageImage(ctx, tx, false, (*[]*NotionImage)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.NotionImageImage == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.NotionImageImage = nil
	if err = local.L.LoadNotionImageImage(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.NotionImageImage == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testNotionImageToOneNotionRecipeUsingPage(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local NotionImage
	var foreign NotionRecipe

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, notionImageDBTypes, false, notionImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionImage struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, notionRecipeDBTypes, false, notionRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionRecipe struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PageID = foreign.PageID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Page().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.PageID != foreign.PageID {
		t.Errorf("want: %v, got %v", foreign.PageID, check.PageID)
	}

	slice := NotionImageSlice{&local}
	if err = local.L.LoadPage(ctx, tx, false, (*[]*NotionImage)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Page == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Page = nil
	if err = local.L.LoadPage(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Page == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testNotionImageToOneSetOpImageUsingNotionImageImage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a NotionImage
	var b, c Image

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, notionImageDBTypes, false, strmangle.SetComplement(notionImagePrimaryKeyColumns, notionImageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Image{&b, &c} {
		err = a.SetNotionImageImage(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.NotionImageImage != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.NotionImages[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Image != x.ID {
			t.Error("foreign key was wrong value", a.Image)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Image))
		reflect.Indirect(reflect.ValueOf(&a.Image)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Image != x.ID {
			t.Error("foreign key was wrong value", a.Image, x.ID)
		}
	}
}
func testNotionImageToOneSetOpNotionRecipeUsingPage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a NotionImage
	var b, c NotionRecipe

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, notionImageDBTypes, false, strmangle.SetComplement(notionImagePrimaryKeyColumns, notionImageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, notionRecipeDBTypes, false, strmangle.SetComplement(notionRecipePrimaryKeyColumns, notionRecipeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, notionRecipeDBTypes, false, strmangle.SetComplement(notionRecipePrimaryKeyColumns, notionRecipeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*NotionRecipe{&b, &c} {
		err = a.SetPage(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Page != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PageNotionImages[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PageID != x.PageID {
			t.Error("foreign key was wrong value", a.PageID)
		}

		if exists, err := NotionImageExists(ctx, tx, a.BlockID, a.PageID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testNotionImagesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotionImage{}
	if err = randomize.Struct(seed, o, notionImageDBTypes, true, notionImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNotionImagesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotionImage{}
	if err = randomize.Struct(seed, o, notionImageDBTypes, true, notionImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NotionImageSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNotionImagesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotionImage{}
	if err = randomize.Struct(seed, o, notionImageDBTypes, true, notionImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NotionImages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	notionImageDBTypes = map[string]string{`BlockID`: `text`, `PageID`: `text`, `LastSeen`: `timestamp without time zone`, `Image`: `text`}
	_                  = bytes.MinRead
)

func testNotionImagesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(notionImagePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(notionImageAllColumns) == len(notionImagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NotionImage{}
	if err = randomize.Struct(seed, o, notionImageDBTypes, true, notionImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NotionImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, notionImageDBTypes, true, notionImagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NotionImage struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testNotionImagesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(notionImageAllColumns) == len(notionImagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NotionImage{}
	if err = randomize.Struct(seed, o, notionImageDBTypes, true, notionImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NotionImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, notionImageDBTypes, true, notionImagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NotionImage struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(notionImageAllColumns, notionImagePrimaryKeyColumns) {
		fields = notionImageAllColumns
	} else {
		fields = strmangle.SetComplement(
			notionImageAllColumns,
			notionImagePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := NotionImageSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testNotionImagesUpsert(t *testing.T) {
	t.Parallel()

	if len(notionImageAllColumns) == len(notionImagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := NotionImage{}
	if err = randomize.Struct(seed, &o, notionImageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize NotionImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert NotionImage: %s", err)
	}

	count, err := NotionImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, notionImageDBTypes, false, notionImagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NotionImage struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert NotionImage: %s", err)
	}

	count, err = NotionImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
