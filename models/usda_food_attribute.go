// Code generated by SQLBoiler 4.8.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UsdaFoodAttribute is an object representing the database table.
type UsdaFoodAttribute struct {
	ID                  int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	FDCID               null.Int    `boil:"fdc_id" json:"fdc_id,omitempty" toml:"fdc_id" yaml:"fdc_id,omitempty"`
	SeqNum              null.Int    `boil:"seq_num" json:"seq_num,omitempty" toml:"seq_num" yaml:"seq_num,omitempty"`
	FoodAttributeTypeID null.Int    `boil:"food_attribute_type_id" json:"food_attribute_type_id,omitempty" toml:"food_attribute_type_id" yaml:"food_attribute_type_id,omitempty"`
	Name                null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Value               null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`

	R *usdaFoodAttributeR `boil:"rel" json:"rel" toml:"rel" yaml:"rel"`
	L usdaFoodAttributeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UsdaFoodAttributeColumns = struct {
	ID                  string
	FDCID               string
	SeqNum              string
	FoodAttributeTypeID string
	Name                string
	Value               string
}{
	ID:                  "id",
	FDCID:               "fdc_id",
	SeqNum:              "seq_num",
	FoodAttributeTypeID: "food_attribute_type_id",
	Name:                "name",
	Value:               "value",
}

var UsdaFoodAttributeTableColumns = struct {
	ID                  string
	FDCID               string
	SeqNum              string
	FoodAttributeTypeID string
	Name                string
	Value               string
}{
	ID:                  "usda_food_attribute.id",
	FDCID:               "usda_food_attribute.fdc_id",
	SeqNum:              "usda_food_attribute.seq_num",
	FoodAttributeTypeID: "usda_food_attribute.food_attribute_type_id",
	Name:                "usda_food_attribute.name",
	Value:               "usda_food_attribute.value",
}

// Generated where

var UsdaFoodAttributeWhere = struct {
	ID                  whereHelperint
	FDCID               whereHelpernull_Int
	SeqNum              whereHelpernull_Int
	FoodAttributeTypeID whereHelpernull_Int
	Name                whereHelpernull_String
	Value               whereHelpernull_String
}{
	ID:                  whereHelperint{field: "\"usda_food_attribute\".\"id\""},
	FDCID:               whereHelpernull_Int{field: "\"usda_food_attribute\".\"fdc_id\""},
	SeqNum:              whereHelpernull_Int{field: "\"usda_food_attribute\".\"seq_num\""},
	FoodAttributeTypeID: whereHelpernull_Int{field: "\"usda_food_attribute\".\"food_attribute_type_id\""},
	Name:                whereHelpernull_String{field: "\"usda_food_attribute\".\"name\""},
	Value:               whereHelpernull_String{field: "\"usda_food_attribute\".\"value\""},
}

// UsdaFoodAttributeRels is where relationship names are stored.
var UsdaFoodAttributeRels = struct {
	FDC               string
	FoodAttributeType string
}{
	FDC:               "FDC",
	FoodAttributeType: "FoodAttributeType",
}

// usdaFoodAttributeR is where relationships are stored.
type usdaFoodAttributeR struct {
	FDC               *UsdaFood              `boil:"FDC" json:"FDC" toml:"FDC" yaml:"FDC"`
	FoodAttributeType *UsdaFoodAttributeType `boil:"FoodAttributeType" json:"FoodAttributeType" toml:"FoodAttributeType" yaml:"FoodAttributeType"`
}

// NewStruct creates a new relationship struct
func (*usdaFoodAttributeR) NewStruct() *usdaFoodAttributeR {
	return &usdaFoodAttributeR{}
}

// usdaFoodAttributeL is where Load methods for each relationship are stored.
type usdaFoodAttributeL struct{}

var (
	usdaFoodAttributeAllColumns            = []string{"id", "fdc_id", "seq_num", "food_attribute_type_id", "name", "value"}
	usdaFoodAttributeColumnsWithoutDefault = []string{"id", "fdc_id", "seq_num", "food_attribute_type_id", "name", "value"}
	usdaFoodAttributeColumnsWithDefault    = []string{}
	usdaFoodAttributePrimaryKeyColumns     = []string{"id"}
)

type (
	// UsdaFoodAttributeSlice is an alias for a slice of pointers to UsdaFoodAttribute.
	// This should almost always be used instead of []UsdaFoodAttribute.
	UsdaFoodAttributeSlice []*UsdaFoodAttribute
	// UsdaFoodAttributeHook is the signature for custom UsdaFoodAttribute hook methods
	UsdaFoodAttributeHook func(context.Context, boil.ContextExecutor, *UsdaFoodAttribute) error

	usdaFoodAttributeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usdaFoodAttributeType                 = reflect.TypeOf(&UsdaFoodAttribute{})
	usdaFoodAttributeMapping              = queries.MakeStructMapping(usdaFoodAttributeType)
	usdaFoodAttributePrimaryKeyMapping, _ = queries.BindMapping(usdaFoodAttributeType, usdaFoodAttributeMapping, usdaFoodAttributePrimaryKeyColumns)
	usdaFoodAttributeInsertCacheMut       sync.RWMutex
	usdaFoodAttributeInsertCache          = make(map[string]insertCache)
	usdaFoodAttributeUpdateCacheMut       sync.RWMutex
	usdaFoodAttributeUpdateCache          = make(map[string]updateCache)
	usdaFoodAttributeUpsertCacheMut       sync.RWMutex
	usdaFoodAttributeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var usdaFoodAttributeBeforeInsertHooks []UsdaFoodAttributeHook
var usdaFoodAttributeBeforeUpdateHooks []UsdaFoodAttributeHook
var usdaFoodAttributeBeforeDeleteHooks []UsdaFoodAttributeHook
var usdaFoodAttributeBeforeUpsertHooks []UsdaFoodAttributeHook

var usdaFoodAttributeAfterInsertHooks []UsdaFoodAttributeHook
var usdaFoodAttributeAfterSelectHooks []UsdaFoodAttributeHook
var usdaFoodAttributeAfterUpdateHooks []UsdaFoodAttributeHook
var usdaFoodAttributeAfterDeleteHooks []UsdaFoodAttributeHook
var usdaFoodAttributeAfterUpsertHooks []UsdaFoodAttributeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UsdaFoodAttribute) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodAttributeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UsdaFoodAttribute) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodAttributeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UsdaFoodAttribute) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodAttributeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UsdaFoodAttribute) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodAttributeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UsdaFoodAttribute) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodAttributeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UsdaFoodAttribute) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodAttributeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UsdaFoodAttribute) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodAttributeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UsdaFoodAttribute) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodAttributeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UsdaFoodAttribute) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodAttributeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUsdaFoodAttributeHook registers your hook function for all future operations.
func AddUsdaFoodAttributeHook(hookPoint boil.HookPoint, usdaFoodAttributeHook UsdaFoodAttributeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		usdaFoodAttributeBeforeInsertHooks = append(usdaFoodAttributeBeforeInsertHooks, usdaFoodAttributeHook)
	case boil.BeforeUpdateHook:
		usdaFoodAttributeBeforeUpdateHooks = append(usdaFoodAttributeBeforeUpdateHooks, usdaFoodAttributeHook)
	case boil.BeforeDeleteHook:
		usdaFoodAttributeBeforeDeleteHooks = append(usdaFoodAttributeBeforeDeleteHooks, usdaFoodAttributeHook)
	case boil.BeforeUpsertHook:
		usdaFoodAttributeBeforeUpsertHooks = append(usdaFoodAttributeBeforeUpsertHooks, usdaFoodAttributeHook)
	case boil.AfterInsertHook:
		usdaFoodAttributeAfterInsertHooks = append(usdaFoodAttributeAfterInsertHooks, usdaFoodAttributeHook)
	case boil.AfterSelectHook:
		usdaFoodAttributeAfterSelectHooks = append(usdaFoodAttributeAfterSelectHooks, usdaFoodAttributeHook)
	case boil.AfterUpdateHook:
		usdaFoodAttributeAfterUpdateHooks = append(usdaFoodAttributeAfterUpdateHooks, usdaFoodAttributeHook)
	case boil.AfterDeleteHook:
		usdaFoodAttributeAfterDeleteHooks = append(usdaFoodAttributeAfterDeleteHooks, usdaFoodAttributeHook)
	case boil.AfterUpsertHook:
		usdaFoodAttributeAfterUpsertHooks = append(usdaFoodAttributeAfterUpsertHooks, usdaFoodAttributeHook)
	}
}

// One returns a single usdaFoodAttribute record from the query.
func (q usdaFoodAttributeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UsdaFoodAttribute, error) {
	o := &UsdaFoodAttribute{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for usda_food_attribute")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UsdaFoodAttribute records from the query.
func (q usdaFoodAttributeQuery) All(ctx context.Context, exec boil.ContextExecutor) (UsdaFoodAttributeSlice, error) {
	var o []*UsdaFoodAttribute

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UsdaFoodAttribute slice")
	}

	if len(usdaFoodAttributeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UsdaFoodAttribute records in the query.
func (q usdaFoodAttributeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count usda_food_attribute rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q usdaFoodAttributeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if usda_food_attribute exists")
	}

	return count > 0, nil
}

// FDC pointed to by the foreign key.
func (o *UsdaFoodAttribute) FDC(mods ...qm.QueryMod) usdaFoodQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"fdc_id\" = ?", o.FDCID),
	}

	queryMods = append(queryMods, mods...)

	query := UsdaFoods(queryMods...)
	queries.SetFrom(query.Query, "\"usda_food\"")

	return query
}

// FoodAttributeType pointed to by the foreign key.
func (o *UsdaFoodAttribute) FoodAttributeType(mods ...qm.QueryMod) usdaFoodAttributeTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FoodAttributeTypeID),
	}

	queryMods = append(queryMods, mods...)

	query := UsdaFoodAttributeTypes(queryMods...)
	queries.SetFrom(query.Query, "\"usda_food_attribute_type\"")

	return query
}

// LoadFDC allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (usdaFoodAttributeL) LoadFDC(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsdaFoodAttribute interface{}, mods queries.Applicator) error {
	var slice []*UsdaFoodAttribute
	var object *UsdaFoodAttribute

	if singular {
		object = maybeUsdaFoodAttribute.(*UsdaFoodAttribute)
	} else {
		slice = *maybeUsdaFoodAttribute.(*[]*UsdaFoodAttribute)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &usdaFoodAttributeR{}
		}
		if !queries.IsNil(object.FDCID) {
			args = append(args, object.FDCID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usdaFoodAttributeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.FDCID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.FDCID) {
				args = append(args, obj.FDCID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`usda_food`),
		qm.WhereIn(`usda_food.fdc_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UsdaFood")
	}

	var resultSlice []*UsdaFood
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UsdaFood")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for usda_food")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usda_food")
	}

	if len(usdaFoodAttributeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FDC = foreign
		if foreign.R == nil {
			foreign.R = &usdaFoodR{}
		}
		foreign.R.FDCUsdaFoodAttributes = append(foreign.R.FDCUsdaFoodAttributes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.FDCID, foreign.FDCID) {
				local.R.FDC = foreign
				if foreign.R == nil {
					foreign.R = &usdaFoodR{}
				}
				foreign.R.FDCUsdaFoodAttributes = append(foreign.R.FDCUsdaFoodAttributes, local)
				break
			}
		}
	}

	return nil
}

// LoadFoodAttributeType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (usdaFoodAttributeL) LoadFoodAttributeType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsdaFoodAttribute interface{}, mods queries.Applicator) error {
	var slice []*UsdaFoodAttribute
	var object *UsdaFoodAttribute

	if singular {
		object = maybeUsdaFoodAttribute.(*UsdaFoodAttribute)
	} else {
		slice = *maybeUsdaFoodAttribute.(*[]*UsdaFoodAttribute)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &usdaFoodAttributeR{}
		}
		if !queries.IsNil(object.FoodAttributeTypeID) {
			args = append(args, object.FoodAttributeTypeID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usdaFoodAttributeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.FoodAttributeTypeID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.FoodAttributeTypeID) {
				args = append(args, obj.FoodAttributeTypeID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`usda_food_attribute_type`),
		qm.WhereIn(`usda_food_attribute_type.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UsdaFoodAttributeType")
	}

	var resultSlice []*UsdaFoodAttributeType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UsdaFoodAttributeType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for usda_food_attribute_type")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usda_food_attribute_type")
	}

	if len(usdaFoodAttributeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FoodAttributeType = foreign
		if foreign.R == nil {
			foreign.R = &usdaFoodAttributeTypeR{}
		}
		foreign.R.FoodAttributeTypeUsdaFoodAttributes = append(foreign.R.FoodAttributeTypeUsdaFoodAttributes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.FoodAttributeTypeID, foreign.ID) {
				local.R.FoodAttributeType = foreign
				if foreign.R == nil {
					foreign.R = &usdaFoodAttributeTypeR{}
				}
				foreign.R.FoodAttributeTypeUsdaFoodAttributes = append(foreign.R.FoodAttributeTypeUsdaFoodAttributes, local)
				break
			}
		}
	}

	return nil
}

// SetFDC of the usdaFoodAttribute to the related item.
// Sets o.R.FDC to related.
// Adds o to related.R.FDCUsdaFoodAttributes.
func (o *UsdaFoodAttribute) SetFDC(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UsdaFood) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"usda_food_attribute\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"fdc_id"}),
		strmangle.WhereClause("\"", "\"", 2, usdaFoodAttributePrimaryKeyColumns),
	)
	values := []interface{}{related.FDCID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.FDCID, related.FDCID)
	if o.R == nil {
		o.R = &usdaFoodAttributeR{
			FDC: related,
		}
	} else {
		o.R.FDC = related
	}

	if related.R == nil {
		related.R = &usdaFoodR{
			FDCUsdaFoodAttributes: UsdaFoodAttributeSlice{o},
		}
	} else {
		related.R.FDCUsdaFoodAttributes = append(related.R.FDCUsdaFoodAttributes, o)
	}

	return nil
}

// RemoveFDC relationship.
// Sets o.R.FDC to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *UsdaFoodAttribute) RemoveFDC(ctx context.Context, exec boil.ContextExecutor, related *UsdaFood) error {
	var err error

	queries.SetScanner(&o.FDCID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("fdc_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.FDC = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.FDCUsdaFoodAttributes {
		if queries.Equal(o.FDCID, ri.FDCID) {
			continue
		}

		ln := len(related.R.FDCUsdaFoodAttributes)
		if ln > 1 && i < ln-1 {
			related.R.FDCUsdaFoodAttributes[i] = related.R.FDCUsdaFoodAttributes[ln-1]
		}
		related.R.FDCUsdaFoodAttributes = related.R.FDCUsdaFoodAttributes[:ln-1]
		break
	}
	return nil
}

// SetFoodAttributeType of the usdaFoodAttribute to the related item.
// Sets o.R.FoodAttributeType to related.
// Adds o to related.R.FoodAttributeTypeUsdaFoodAttributes.
func (o *UsdaFoodAttribute) SetFoodAttributeType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UsdaFoodAttributeType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"usda_food_attribute\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"food_attribute_type_id"}),
		strmangle.WhereClause("\"", "\"", 2, usdaFoodAttributePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.FoodAttributeTypeID, related.ID)
	if o.R == nil {
		o.R = &usdaFoodAttributeR{
			FoodAttributeType: related,
		}
	} else {
		o.R.FoodAttributeType = related
	}

	if related.R == nil {
		related.R = &usdaFoodAttributeTypeR{
			FoodAttributeTypeUsdaFoodAttributes: UsdaFoodAttributeSlice{o},
		}
	} else {
		related.R.FoodAttributeTypeUsdaFoodAttributes = append(related.R.FoodAttributeTypeUsdaFoodAttributes, o)
	}

	return nil
}

// RemoveFoodAttributeType relationship.
// Sets o.R.FoodAttributeType to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *UsdaFoodAttribute) RemoveFoodAttributeType(ctx context.Context, exec boil.ContextExecutor, related *UsdaFoodAttributeType) error {
	var err error

	queries.SetScanner(&o.FoodAttributeTypeID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("food_attribute_type_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.FoodAttributeType = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.FoodAttributeTypeUsdaFoodAttributes {
		if queries.Equal(o.FoodAttributeTypeID, ri.FoodAttributeTypeID) {
			continue
		}

		ln := len(related.R.FoodAttributeTypeUsdaFoodAttributes)
		if ln > 1 && i < ln-1 {
			related.R.FoodAttributeTypeUsdaFoodAttributes[i] = related.R.FoodAttributeTypeUsdaFoodAttributes[ln-1]
		}
		related.R.FoodAttributeTypeUsdaFoodAttributes = related.R.FoodAttributeTypeUsdaFoodAttributes[:ln-1]
		break
	}
	return nil
}

// UsdaFoodAttributes retrieves all the records using an executor.
func UsdaFoodAttributes(mods ...qm.QueryMod) usdaFoodAttributeQuery {
	mods = append(mods, qm.From("\"usda_food_attribute\""))
	return usdaFoodAttributeQuery{NewQuery(mods...)}
}

// FindUsdaFoodAttribute retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUsdaFoodAttribute(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UsdaFoodAttribute, error) {
	usdaFoodAttributeObj := &UsdaFoodAttribute{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"usda_food_attribute\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, usdaFoodAttributeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from usda_food_attribute")
	}

	if err = usdaFoodAttributeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return usdaFoodAttributeObj, err
	}

	return usdaFoodAttributeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UsdaFoodAttribute) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no usda_food_attribute provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaFoodAttributeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	usdaFoodAttributeInsertCacheMut.RLock()
	cache, cached := usdaFoodAttributeInsertCache[key]
	usdaFoodAttributeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			usdaFoodAttributeAllColumns,
			usdaFoodAttributeColumnsWithDefault,
			usdaFoodAttributeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(usdaFoodAttributeType, usdaFoodAttributeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(usdaFoodAttributeType, usdaFoodAttributeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"usda_food_attribute\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"usda_food_attribute\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into usda_food_attribute")
	}

	if !cached {
		usdaFoodAttributeInsertCacheMut.Lock()
		usdaFoodAttributeInsertCache[key] = cache
		usdaFoodAttributeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UsdaFoodAttribute.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UsdaFoodAttribute) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	usdaFoodAttributeUpdateCacheMut.RLock()
	cache, cached := usdaFoodAttributeUpdateCache[key]
	usdaFoodAttributeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			usdaFoodAttributeAllColumns,
			usdaFoodAttributePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update usda_food_attribute, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"usda_food_attribute\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, usdaFoodAttributePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(usdaFoodAttributeType, usdaFoodAttributeMapping, append(wl, usdaFoodAttributePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update usda_food_attribute row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for usda_food_attribute")
	}

	if !cached {
		usdaFoodAttributeUpdateCacheMut.Lock()
		usdaFoodAttributeUpdateCache[key] = cache
		usdaFoodAttributeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q usdaFoodAttributeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for usda_food_attribute")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for usda_food_attribute")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UsdaFoodAttributeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaFoodAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"usda_food_attribute\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, usdaFoodAttributePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in usdaFoodAttribute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all usdaFoodAttribute")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UsdaFoodAttribute) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no usda_food_attribute provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaFoodAttributeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	usdaFoodAttributeUpsertCacheMut.RLock()
	cache, cached := usdaFoodAttributeUpsertCache[key]
	usdaFoodAttributeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			usdaFoodAttributeAllColumns,
			usdaFoodAttributeColumnsWithDefault,
			usdaFoodAttributeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			usdaFoodAttributeAllColumns,
			usdaFoodAttributePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert usda_food_attribute, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(usdaFoodAttributePrimaryKeyColumns))
			copy(conflict, usdaFoodAttributePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"usda_food_attribute\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(usdaFoodAttributeType, usdaFoodAttributeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(usdaFoodAttributeType, usdaFoodAttributeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert usda_food_attribute")
	}

	if !cached {
		usdaFoodAttributeUpsertCacheMut.Lock()
		usdaFoodAttributeUpsertCache[key] = cache
		usdaFoodAttributeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UsdaFoodAttribute record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UsdaFoodAttribute) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UsdaFoodAttribute provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), usdaFoodAttributePrimaryKeyMapping)
	sql := "DELETE FROM \"usda_food_attribute\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from usda_food_attribute")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for usda_food_attribute")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q usdaFoodAttributeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no usdaFoodAttributeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from usda_food_attribute")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for usda_food_attribute")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UsdaFoodAttributeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(usdaFoodAttributeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaFoodAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"usda_food_attribute\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaFoodAttributePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from usdaFoodAttribute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for usda_food_attribute")
	}

	if len(usdaFoodAttributeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UsdaFoodAttribute) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUsdaFoodAttribute(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsdaFoodAttributeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UsdaFoodAttributeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaFoodAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"usda_food_attribute\".* FROM \"usda_food_attribute\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaFoodAttributePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UsdaFoodAttributeSlice")
	}

	*o = slice

	return nil
}

// UsdaFoodAttributeExists checks if the UsdaFoodAttribute row exists.
func UsdaFoodAttributeExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"usda_food_attribute\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if usda_food_attribute exists")
	}

	return exists, nil
}
