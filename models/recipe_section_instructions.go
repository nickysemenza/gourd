// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RecipeSectionInstruction is an object representing the database table.
type RecipeSectionInstruction struct {
	ID          string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	SectionID   string      `boil:"section_id" json:"section_id" toml:"section_id" yaml:"section_id"`
	Sort        null.Int    `boil:"sort" json:"sort,omitempty" toml:"sort" yaml:"sort,omitempty"`
	Instruction null.String `boil:"instruction" json:"instruction,omitempty" toml:"instruction" yaml:"instruction,omitempty"`

	R *recipeSectionInstructionR `boil:"rel" json:"rel" toml:"rel" yaml:"rel"`
	L recipeSectionInstructionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RecipeSectionInstructionColumns = struct {
	ID          string
	SectionID   string
	Sort        string
	Instruction string
}{
	ID:          "id",
	SectionID:   "section_id",
	Sort:        "sort",
	Instruction: "instruction",
}

var RecipeSectionInstructionTableColumns = struct {
	ID          string
	SectionID   string
	Sort        string
	Instruction string
}{
	ID:          "recipe_section_instructions.id",
	SectionID:   "recipe_section_instructions.section_id",
	Sort:        "recipe_section_instructions.sort",
	Instruction: "recipe_section_instructions.instruction",
}

// Generated where

var RecipeSectionInstructionWhere = struct {
	ID          whereHelperstring
	SectionID   whereHelperstring
	Sort        whereHelpernull_Int
	Instruction whereHelpernull_String
}{
	ID:          whereHelperstring{field: "\"recipe_section_instructions\".\"id\""},
	SectionID:   whereHelperstring{field: "\"recipe_section_instructions\".\"section_id\""},
	Sort:        whereHelpernull_Int{field: "\"recipe_section_instructions\".\"sort\""},
	Instruction: whereHelpernull_String{field: "\"recipe_section_instructions\".\"instruction\""},
}

// RecipeSectionInstructionRels is where relationship names are stored.
var RecipeSectionInstructionRels = struct {
	Section string
}{
	Section: "Section",
}

// recipeSectionInstructionR is where relationships are stored.
type recipeSectionInstructionR struct {
	Section *RecipeSection `boil:"Section" json:"Section" toml:"Section" yaml:"Section"`
}

// NewStruct creates a new relationship struct
func (*recipeSectionInstructionR) NewStruct() *recipeSectionInstructionR {
	return &recipeSectionInstructionR{}
}

// recipeSectionInstructionL is where Load methods for each relationship are stored.
type recipeSectionInstructionL struct{}

var (
	recipeSectionInstructionAllColumns            = []string{"id", "section_id", "sort", "instruction"}
	recipeSectionInstructionColumnsWithoutDefault = []string{"id", "section_id", "sort", "instruction"}
	recipeSectionInstructionColumnsWithDefault    = []string{}
	recipeSectionInstructionPrimaryKeyColumns     = []string{"id"}
	recipeSectionInstructionGeneratedColumns      = []string{}
)

type (
	// RecipeSectionInstructionSlice is an alias for a slice of pointers to RecipeSectionInstruction.
	// This should almost always be used instead of []RecipeSectionInstruction.
	RecipeSectionInstructionSlice []*RecipeSectionInstruction
	// RecipeSectionInstructionHook is the signature for custom RecipeSectionInstruction hook methods
	RecipeSectionInstructionHook func(context.Context, boil.ContextExecutor, *RecipeSectionInstruction) error

	recipeSectionInstructionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	recipeSectionInstructionType                 = reflect.TypeOf(&RecipeSectionInstruction{})
	recipeSectionInstructionMapping              = queries.MakeStructMapping(recipeSectionInstructionType)
	recipeSectionInstructionPrimaryKeyMapping, _ = queries.BindMapping(recipeSectionInstructionType, recipeSectionInstructionMapping, recipeSectionInstructionPrimaryKeyColumns)
	recipeSectionInstructionInsertCacheMut       sync.RWMutex
	recipeSectionInstructionInsertCache          = make(map[string]insertCache)
	recipeSectionInstructionUpdateCacheMut       sync.RWMutex
	recipeSectionInstructionUpdateCache          = make(map[string]updateCache)
	recipeSectionInstructionUpsertCacheMut       sync.RWMutex
	recipeSectionInstructionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var recipeSectionInstructionAfterSelectHooks []RecipeSectionInstructionHook

var recipeSectionInstructionBeforeInsertHooks []RecipeSectionInstructionHook
var recipeSectionInstructionAfterInsertHooks []RecipeSectionInstructionHook

var recipeSectionInstructionBeforeUpdateHooks []RecipeSectionInstructionHook
var recipeSectionInstructionAfterUpdateHooks []RecipeSectionInstructionHook

var recipeSectionInstructionBeforeDeleteHooks []RecipeSectionInstructionHook
var recipeSectionInstructionAfterDeleteHooks []RecipeSectionInstructionHook

var recipeSectionInstructionBeforeUpsertHooks []RecipeSectionInstructionHook
var recipeSectionInstructionAfterUpsertHooks []RecipeSectionInstructionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RecipeSectionInstruction) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeSectionInstructionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RecipeSectionInstruction) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeSectionInstructionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RecipeSectionInstruction) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeSectionInstructionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RecipeSectionInstruction) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeSectionInstructionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RecipeSectionInstruction) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeSectionInstructionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RecipeSectionInstruction) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeSectionInstructionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RecipeSectionInstruction) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeSectionInstructionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RecipeSectionInstruction) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeSectionInstructionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RecipeSectionInstruction) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeSectionInstructionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRecipeSectionInstructionHook registers your hook function for all future operations.
func AddRecipeSectionInstructionHook(hookPoint boil.HookPoint, recipeSectionInstructionHook RecipeSectionInstructionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		recipeSectionInstructionAfterSelectHooks = append(recipeSectionInstructionAfterSelectHooks, recipeSectionInstructionHook)
	case boil.BeforeInsertHook:
		recipeSectionInstructionBeforeInsertHooks = append(recipeSectionInstructionBeforeInsertHooks, recipeSectionInstructionHook)
	case boil.AfterInsertHook:
		recipeSectionInstructionAfterInsertHooks = append(recipeSectionInstructionAfterInsertHooks, recipeSectionInstructionHook)
	case boil.BeforeUpdateHook:
		recipeSectionInstructionBeforeUpdateHooks = append(recipeSectionInstructionBeforeUpdateHooks, recipeSectionInstructionHook)
	case boil.AfterUpdateHook:
		recipeSectionInstructionAfterUpdateHooks = append(recipeSectionInstructionAfterUpdateHooks, recipeSectionInstructionHook)
	case boil.BeforeDeleteHook:
		recipeSectionInstructionBeforeDeleteHooks = append(recipeSectionInstructionBeforeDeleteHooks, recipeSectionInstructionHook)
	case boil.AfterDeleteHook:
		recipeSectionInstructionAfterDeleteHooks = append(recipeSectionInstructionAfterDeleteHooks, recipeSectionInstructionHook)
	case boil.BeforeUpsertHook:
		recipeSectionInstructionBeforeUpsertHooks = append(recipeSectionInstructionBeforeUpsertHooks, recipeSectionInstructionHook)
	case boil.AfterUpsertHook:
		recipeSectionInstructionAfterUpsertHooks = append(recipeSectionInstructionAfterUpsertHooks, recipeSectionInstructionHook)
	}
}

// One returns a single recipeSectionInstruction record from the query.
func (q recipeSectionInstructionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RecipeSectionInstruction, error) {
	o := &RecipeSectionInstruction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for recipe_section_instructions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RecipeSectionInstruction records from the query.
func (q recipeSectionInstructionQuery) All(ctx context.Context, exec boil.ContextExecutor) (RecipeSectionInstructionSlice, error) {
	var o []*RecipeSectionInstruction

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RecipeSectionInstruction slice")
	}

	if len(recipeSectionInstructionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RecipeSectionInstruction records in the query.
func (q recipeSectionInstructionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count recipe_section_instructions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q recipeSectionInstructionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if recipe_section_instructions exists")
	}

	return count > 0, nil
}

// Section pointed to by the foreign key.
func (o *RecipeSectionInstruction) Section(mods ...qm.QueryMod) recipeSectionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SectionID),
	}

	queryMods = append(queryMods, mods...)

	query := RecipeSections(queryMods...)
	queries.SetFrom(query.Query, "\"recipe_sections\"")

	return query
}

// LoadSection allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (recipeSectionInstructionL) LoadSection(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipeSectionInstruction interface{}, mods queries.Applicator) error {
	var slice []*RecipeSectionInstruction
	var object *RecipeSectionInstruction

	if singular {
		object = maybeRecipeSectionInstruction.(*RecipeSectionInstruction)
	} else {
		slice = *maybeRecipeSectionInstruction.(*[]*RecipeSectionInstruction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeSectionInstructionR{}
		}
		args = append(args, object.SectionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeSectionInstructionR{}
			}

			for _, a := range args {
				if a == obj.SectionID {
					continue Outer
				}
			}

			args = append(args, obj.SectionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`recipe_sections`),
		qm.WhereIn(`recipe_sections.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RecipeSection")
	}

	var resultSlice []*RecipeSection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RecipeSection")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for recipe_sections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for recipe_sections")
	}

	if len(recipeSectionInstructionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Section = foreign
		if foreign.R == nil {
			foreign.R = &recipeSectionR{}
		}
		foreign.R.SectionRecipeSectionInstructions = append(foreign.R.SectionRecipeSectionInstructions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SectionID == foreign.ID {
				local.R.Section = foreign
				if foreign.R == nil {
					foreign.R = &recipeSectionR{}
				}
				foreign.R.SectionRecipeSectionInstructions = append(foreign.R.SectionRecipeSectionInstructions, local)
				break
			}
		}
	}

	return nil
}

// SetSection of the recipeSectionInstruction to the related item.
// Sets o.R.Section to related.
// Adds o to related.R.SectionRecipeSectionInstructions.
func (o *RecipeSectionInstruction) SetSection(ctx context.Context, exec boil.ContextExecutor, insert bool, related *RecipeSection) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"recipe_section_instructions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"section_id"}),
		strmangle.WhereClause("\"", "\"", 2, recipeSectionInstructionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SectionID = related.ID
	if o.R == nil {
		o.R = &recipeSectionInstructionR{
			Section: related,
		}
	} else {
		o.R.Section = related
	}

	if related.R == nil {
		related.R = &recipeSectionR{
			SectionRecipeSectionInstructions: RecipeSectionInstructionSlice{o},
		}
	} else {
		related.R.SectionRecipeSectionInstructions = append(related.R.SectionRecipeSectionInstructions, o)
	}

	return nil
}

// RecipeSectionInstructions retrieves all the records using an executor.
func RecipeSectionInstructions(mods ...qm.QueryMod) recipeSectionInstructionQuery {
	mods = append(mods, qm.From("\"recipe_section_instructions\""))
	return recipeSectionInstructionQuery{NewQuery(mods...)}
}

// FindRecipeSectionInstruction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRecipeSectionInstruction(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*RecipeSectionInstruction, error) {
	recipeSectionInstructionObj := &RecipeSectionInstruction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"recipe_section_instructions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, recipeSectionInstructionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from recipe_section_instructions")
	}

	if err = recipeSectionInstructionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return recipeSectionInstructionObj, err
	}

	return recipeSectionInstructionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RecipeSectionInstruction) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no recipe_section_instructions provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recipeSectionInstructionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	recipeSectionInstructionInsertCacheMut.RLock()
	cache, cached := recipeSectionInstructionInsertCache[key]
	recipeSectionInstructionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			recipeSectionInstructionAllColumns,
			recipeSectionInstructionColumnsWithDefault,
			recipeSectionInstructionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(recipeSectionInstructionType, recipeSectionInstructionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(recipeSectionInstructionType, recipeSectionInstructionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"recipe_section_instructions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"recipe_section_instructions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into recipe_section_instructions")
	}

	if !cached {
		recipeSectionInstructionInsertCacheMut.Lock()
		recipeSectionInstructionInsertCache[key] = cache
		recipeSectionInstructionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RecipeSectionInstruction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RecipeSectionInstruction) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	recipeSectionInstructionUpdateCacheMut.RLock()
	cache, cached := recipeSectionInstructionUpdateCache[key]
	recipeSectionInstructionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			recipeSectionInstructionAllColumns,
			recipeSectionInstructionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update recipe_section_instructions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"recipe_section_instructions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, recipeSectionInstructionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(recipeSectionInstructionType, recipeSectionInstructionMapping, append(wl, recipeSectionInstructionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update recipe_section_instructions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for recipe_section_instructions")
	}

	if !cached {
		recipeSectionInstructionUpdateCacheMut.Lock()
		recipeSectionInstructionUpdateCache[key] = cache
		recipeSectionInstructionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q recipeSectionInstructionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for recipe_section_instructions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for recipe_section_instructions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RecipeSectionInstructionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipeSectionInstructionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"recipe_section_instructions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, recipeSectionInstructionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in recipeSectionInstruction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all recipeSectionInstruction")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RecipeSectionInstruction) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no recipe_section_instructions provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recipeSectionInstructionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	recipeSectionInstructionUpsertCacheMut.RLock()
	cache, cached := recipeSectionInstructionUpsertCache[key]
	recipeSectionInstructionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			recipeSectionInstructionAllColumns,
			recipeSectionInstructionColumnsWithDefault,
			recipeSectionInstructionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			recipeSectionInstructionAllColumns,
			recipeSectionInstructionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert recipe_section_instructions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(recipeSectionInstructionPrimaryKeyColumns))
			copy(conflict, recipeSectionInstructionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"recipe_section_instructions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(recipeSectionInstructionType, recipeSectionInstructionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(recipeSectionInstructionType, recipeSectionInstructionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert recipe_section_instructions")
	}

	if !cached {
		recipeSectionInstructionUpsertCacheMut.Lock()
		recipeSectionInstructionUpsertCache[key] = cache
		recipeSectionInstructionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RecipeSectionInstruction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RecipeSectionInstruction) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RecipeSectionInstruction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), recipeSectionInstructionPrimaryKeyMapping)
	sql := "DELETE FROM \"recipe_section_instructions\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from recipe_section_instructions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for recipe_section_instructions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q recipeSectionInstructionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no recipeSectionInstructionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from recipe_section_instructions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for recipe_section_instructions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RecipeSectionInstructionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(recipeSectionInstructionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipeSectionInstructionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"recipe_section_instructions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, recipeSectionInstructionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from recipeSectionInstruction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for recipe_section_instructions")
	}

	if len(recipeSectionInstructionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RecipeSectionInstruction) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRecipeSectionInstruction(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RecipeSectionInstructionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RecipeSectionInstructionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipeSectionInstructionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"recipe_section_instructions\".* FROM \"recipe_section_instructions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, recipeSectionInstructionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RecipeSectionInstructionSlice")
	}

	*o = slice

	return nil
}

// RecipeSectionInstructionExists checks if the RecipeSectionInstruction row exists.
func RecipeSectionInstructionExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"recipe_section_instructions\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if recipe_section_instructions exists")
	}

	return exists, nil
}
