// Code generated by SQLBoiler 4.8.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUsdaSampleFoods(t *testing.T) {
	t.Parallel()

	query := UsdaSampleFoods()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUsdaSampleFoodsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSampleFood{}
	if err = randomize.Struct(seed, o, usdaSampleFoodDBTypes, true, usdaSampleFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSampleFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaSampleFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaSampleFoodsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSampleFood{}
	if err = randomize.Struct(seed, o, usdaSampleFoodDBTypes, true, usdaSampleFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSampleFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UsdaSampleFoods().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaSampleFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaSampleFoodsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSampleFood{}
	if err = randomize.Struct(seed, o, usdaSampleFoodDBTypes, true, usdaSampleFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSampleFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UsdaSampleFoodSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaSampleFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaSampleFoodsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSampleFood{}
	if err = randomize.Struct(seed, o, usdaSampleFoodDBTypes, true, usdaSampleFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSampleFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UsdaSampleFoodExists(ctx, tx, o.FDCID)
	if err != nil {
		t.Errorf("Unable to check if UsdaSampleFood exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UsdaSampleFoodExists to return true, but got false.")
	}
}

func testUsdaSampleFoodsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSampleFood{}
	if err = randomize.Struct(seed, o, usdaSampleFoodDBTypes, true, usdaSampleFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSampleFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	usdaSampleFoodFound, err := FindUsdaSampleFood(ctx, tx, o.FDCID)
	if err != nil {
		t.Error(err)
	}

	if usdaSampleFoodFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUsdaSampleFoodsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSampleFood{}
	if err = randomize.Struct(seed, o, usdaSampleFoodDBTypes, true, usdaSampleFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSampleFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UsdaSampleFoods().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUsdaSampleFoodsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSampleFood{}
	if err = randomize.Struct(seed, o, usdaSampleFoodDBTypes, true, usdaSampleFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSampleFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UsdaSampleFoods().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUsdaSampleFoodsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	usdaSampleFoodOne := &UsdaSampleFood{}
	usdaSampleFoodTwo := &UsdaSampleFood{}
	if err = randomize.Struct(seed, usdaSampleFoodOne, usdaSampleFoodDBTypes, false, usdaSampleFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSampleFood struct: %s", err)
	}
	if err = randomize.Struct(seed, usdaSampleFoodTwo, usdaSampleFoodDBTypes, false, usdaSampleFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSampleFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = usdaSampleFoodOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = usdaSampleFoodTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UsdaSampleFoods().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUsdaSampleFoodsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	usdaSampleFoodOne := &UsdaSampleFood{}
	usdaSampleFoodTwo := &UsdaSampleFood{}
	if err = randomize.Struct(seed, usdaSampleFoodOne, usdaSampleFoodDBTypes, false, usdaSampleFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSampleFood struct: %s", err)
	}
	if err = randomize.Struct(seed, usdaSampleFoodTwo, usdaSampleFoodDBTypes, false, usdaSampleFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSampleFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = usdaSampleFoodOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = usdaSampleFoodTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaSampleFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func usdaSampleFoodBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaSampleFood) error {
	*o = UsdaSampleFood{}
	return nil
}

func usdaSampleFoodAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaSampleFood) error {
	*o = UsdaSampleFood{}
	return nil
}

func usdaSampleFoodAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UsdaSampleFood) error {
	*o = UsdaSampleFood{}
	return nil
}

func usdaSampleFoodBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UsdaSampleFood) error {
	*o = UsdaSampleFood{}
	return nil
}

func usdaSampleFoodAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UsdaSampleFood) error {
	*o = UsdaSampleFood{}
	return nil
}

func usdaSampleFoodBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UsdaSampleFood) error {
	*o = UsdaSampleFood{}
	return nil
}

func usdaSampleFoodAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UsdaSampleFood) error {
	*o = UsdaSampleFood{}
	return nil
}

func usdaSampleFoodBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaSampleFood) error {
	*o = UsdaSampleFood{}
	return nil
}

func usdaSampleFoodAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaSampleFood) error {
	*o = UsdaSampleFood{}
	return nil
}

func testUsdaSampleFoodsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UsdaSampleFood{}
	o := &UsdaSampleFood{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, usdaSampleFoodDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UsdaSampleFood object: %s", err)
	}

	AddUsdaSampleFoodHook(boil.BeforeInsertHook, usdaSampleFoodBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	usdaSampleFoodBeforeInsertHooks = []UsdaSampleFoodHook{}

	AddUsdaSampleFoodHook(boil.AfterInsertHook, usdaSampleFoodAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	usdaSampleFoodAfterInsertHooks = []UsdaSampleFoodHook{}

	AddUsdaSampleFoodHook(boil.AfterSelectHook, usdaSampleFoodAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	usdaSampleFoodAfterSelectHooks = []UsdaSampleFoodHook{}

	AddUsdaSampleFoodHook(boil.BeforeUpdateHook, usdaSampleFoodBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	usdaSampleFoodBeforeUpdateHooks = []UsdaSampleFoodHook{}

	AddUsdaSampleFoodHook(boil.AfterUpdateHook, usdaSampleFoodAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	usdaSampleFoodAfterUpdateHooks = []UsdaSampleFoodHook{}

	AddUsdaSampleFoodHook(boil.BeforeDeleteHook, usdaSampleFoodBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	usdaSampleFoodBeforeDeleteHooks = []UsdaSampleFoodHook{}

	AddUsdaSampleFoodHook(boil.AfterDeleteHook, usdaSampleFoodAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	usdaSampleFoodAfterDeleteHooks = []UsdaSampleFoodHook{}

	AddUsdaSampleFoodHook(boil.BeforeUpsertHook, usdaSampleFoodBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	usdaSampleFoodBeforeUpsertHooks = []UsdaSampleFoodHook{}

	AddUsdaSampleFoodHook(boil.AfterUpsertHook, usdaSampleFoodAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	usdaSampleFoodAfterUpsertHooks = []UsdaSampleFoodHook{}
}

func testUsdaSampleFoodsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSampleFood{}
	if err = randomize.Struct(seed, o, usdaSampleFoodDBTypes, true, usdaSampleFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSampleFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaSampleFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUsdaSampleFoodsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSampleFood{}
	if err = randomize.Struct(seed, o, usdaSampleFoodDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UsdaSampleFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(usdaSampleFoodColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UsdaSampleFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUsdaSampleFoodToOneUsdaFoodUsingFDC(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UsdaSampleFood
	var foreign UsdaFood

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, usdaSampleFoodDBTypes, false, usdaSampleFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSampleFood struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, usdaFoodDBTypes, false, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.FDCID = foreign.FDCID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.FDC().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.FDCID != foreign.FDCID {
		t.Errorf("want: %v, got %v", foreign.FDCID, check.FDCID)
	}

	slice := UsdaSampleFoodSlice{&local}
	if err = local.L.LoadFDC(ctx, tx, false, (*[]*UsdaSampleFood)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FDC == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.FDC = nil
	if err = local.L.LoadFDC(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FDC == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUsdaSampleFoodToOneSetOpUsdaFoodUsingFDC(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaSampleFood
	var b, c UsdaFood

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaSampleFoodDBTypes, false, strmangle.SetComplement(usdaSampleFoodPrimaryKeyColumns, usdaSampleFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UsdaFood{&b, &c} {
		err = a.SetFDC(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.FDC != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FDCUsdaSampleFood != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.FDCID != x.FDCID {
			t.Error("foreign key was wrong value", a.FDCID)
		}

		if exists, err := UsdaSampleFoodExists(ctx, tx, a.FDCID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testUsdaSampleFoodsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSampleFood{}
	if err = randomize.Struct(seed, o, usdaSampleFoodDBTypes, true, usdaSampleFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSampleFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsdaSampleFoodsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSampleFood{}
	if err = randomize.Struct(seed, o, usdaSampleFoodDBTypes, true, usdaSampleFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSampleFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UsdaSampleFoodSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsdaSampleFoodsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSampleFood{}
	if err = randomize.Struct(seed, o, usdaSampleFoodDBTypes, true, usdaSampleFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSampleFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UsdaSampleFoods().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	usdaSampleFoodDBTypes = map[string]string{`FDCID`: `integer`}
	_                     = bytes.MinRead
)

func testUsdaSampleFoodsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(usdaSampleFoodPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(usdaSampleFoodAllColumns) == len(usdaSampleFoodPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSampleFood{}
	if err = randomize.Struct(seed, o, usdaSampleFoodDBTypes, true, usdaSampleFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSampleFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaSampleFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, usdaSampleFoodDBTypes, true, usdaSampleFoodPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaSampleFood struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUsdaSampleFoodsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(usdaSampleFoodAllColumns) == len(usdaSampleFoodPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSampleFood{}
	if err = randomize.Struct(seed, o, usdaSampleFoodDBTypes, true, usdaSampleFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSampleFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaSampleFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, usdaSampleFoodDBTypes, true, usdaSampleFoodPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaSampleFood struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(usdaSampleFoodAllColumns, usdaSampleFoodPrimaryKeyColumns) {
		fields = usdaSampleFoodAllColumns
	} else {
		fields = strmangle.SetComplement(
			usdaSampleFoodAllColumns,
			usdaSampleFoodPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UsdaSampleFoodSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUsdaSampleFoodsUpsert(t *testing.T) {
	t.Parallel()

	if len(usdaSampleFoodAllColumns) == len(usdaSampleFoodPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UsdaSampleFood{}
	if err = randomize.Struct(seed, &o, usdaSampleFoodDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UsdaSampleFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UsdaSampleFood: %s", err)
	}

	count, err := UsdaSampleFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, usdaSampleFoodDBTypes, false, usdaSampleFoodPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaSampleFood struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UsdaSampleFood: %s", err)
	}

	count, err = UsdaSampleFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
