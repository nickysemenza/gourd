// Code generated by SQLBoiler 4.8.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Recipe is an object representing the database table.
type Recipe struct {
	ID string `boil:"id" json:"id" toml:"id" yaml:"id"`

	R *recipeR `boil:"rel" json:"rel" toml:"rel" yaml:"rel"`
	L recipeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RecipeColumns = struct {
	ID string
}{
	ID: "id",
}

var RecipeTableColumns = struct {
	ID string
}{
	ID: "recipes.id",
}

// Generated where

var RecipeWhere = struct {
	ID whereHelperstring
}{
	ID: whereHelperstring{field: "\"recipes\".\"id\""},
}

// RecipeRels is where relationship names are stored.
var RecipeRels = struct {
	RecipeDetail               string
	HighlightRecipeMealGphotos string
	MealRecipes                string
	NotionRecipes              string
	RecipeSectionIngredients   string
}{
	RecipeDetail:               "RecipeDetail",
	HighlightRecipeMealGphotos: "HighlightRecipeMealGphotos",
	MealRecipes:                "MealRecipes",
	NotionRecipes:              "NotionRecipes",
	RecipeSectionIngredients:   "RecipeSectionIngredients",
}

// recipeR is where relationships are stored.
type recipeR struct {
	RecipeDetail               *RecipeDetail                `boil:"RecipeDetail" json:"RecipeDetail" toml:"RecipeDetail" yaml:"RecipeDetail"`
	HighlightRecipeMealGphotos MealGphotoSlice              `boil:"HighlightRecipeMealGphotos" json:"HighlightRecipeMealGphotos" toml:"HighlightRecipeMealGphotos" yaml:"HighlightRecipeMealGphotos"`
	MealRecipes                MealRecipeSlice              `boil:"MealRecipes" json:"MealRecipes" toml:"MealRecipes" yaml:"MealRecipes"`
	NotionRecipes              NotionRecipeSlice            `boil:"NotionRecipes" json:"NotionRecipes" toml:"NotionRecipes" yaml:"NotionRecipes"`
	RecipeSectionIngredients   RecipeSectionIngredientSlice `boil:"RecipeSectionIngredients" json:"RecipeSectionIngredients" toml:"RecipeSectionIngredients" yaml:"RecipeSectionIngredients"`
}

// NewStruct creates a new relationship struct
func (*recipeR) NewStruct() *recipeR {
	return &recipeR{}
}

// recipeL is where Load methods for each relationship are stored.
type recipeL struct{}

var (
	recipeAllColumns            = []string{"id"}
	recipeColumnsWithoutDefault = []string{"id"}
	recipeColumnsWithDefault    = []string{}
	recipePrimaryKeyColumns     = []string{"id"}
)

type (
	// RecipeSlice is an alias for a slice of pointers to Recipe.
	// This should almost always be used instead of []Recipe.
	RecipeSlice []*Recipe
	// RecipeHook is the signature for custom Recipe hook methods
	RecipeHook func(context.Context, boil.ContextExecutor, *Recipe) error

	recipeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	recipeType                 = reflect.TypeOf(&Recipe{})
	recipeMapping              = queries.MakeStructMapping(recipeType)
	recipePrimaryKeyMapping, _ = queries.BindMapping(recipeType, recipeMapping, recipePrimaryKeyColumns)
	recipeInsertCacheMut       sync.RWMutex
	recipeInsertCache          = make(map[string]insertCache)
	recipeUpdateCacheMut       sync.RWMutex
	recipeUpdateCache          = make(map[string]updateCache)
	recipeUpsertCacheMut       sync.RWMutex
	recipeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var recipeBeforeInsertHooks []RecipeHook
var recipeBeforeUpdateHooks []RecipeHook
var recipeBeforeDeleteHooks []RecipeHook
var recipeBeforeUpsertHooks []RecipeHook

var recipeAfterInsertHooks []RecipeHook
var recipeAfterSelectHooks []RecipeHook
var recipeAfterUpdateHooks []RecipeHook
var recipeAfterDeleteHooks []RecipeHook
var recipeAfterUpsertHooks []RecipeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Recipe) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Recipe) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Recipe) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Recipe) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Recipe) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Recipe) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Recipe) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Recipe) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Recipe) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRecipeHook registers your hook function for all future operations.
func AddRecipeHook(hookPoint boil.HookPoint, recipeHook RecipeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		recipeBeforeInsertHooks = append(recipeBeforeInsertHooks, recipeHook)
	case boil.BeforeUpdateHook:
		recipeBeforeUpdateHooks = append(recipeBeforeUpdateHooks, recipeHook)
	case boil.BeforeDeleteHook:
		recipeBeforeDeleteHooks = append(recipeBeforeDeleteHooks, recipeHook)
	case boil.BeforeUpsertHook:
		recipeBeforeUpsertHooks = append(recipeBeforeUpsertHooks, recipeHook)
	case boil.AfterInsertHook:
		recipeAfterInsertHooks = append(recipeAfterInsertHooks, recipeHook)
	case boil.AfterSelectHook:
		recipeAfterSelectHooks = append(recipeAfterSelectHooks, recipeHook)
	case boil.AfterUpdateHook:
		recipeAfterUpdateHooks = append(recipeAfterUpdateHooks, recipeHook)
	case boil.AfterDeleteHook:
		recipeAfterDeleteHooks = append(recipeAfterDeleteHooks, recipeHook)
	case boil.AfterUpsertHook:
		recipeAfterUpsertHooks = append(recipeAfterUpsertHooks, recipeHook)
	}
}

// One returns a single recipe record from the query.
func (q recipeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Recipe, error) {
	o := &Recipe{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for recipes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Recipe records from the query.
func (q recipeQuery) All(ctx context.Context, exec boil.ContextExecutor) (RecipeSlice, error) {
	var o []*Recipe

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Recipe slice")
	}

	if len(recipeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Recipe records in the query.
func (q recipeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count recipes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q recipeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if recipes exists")
	}

	return count > 0, nil
}

// RecipeDetail pointed to by the foreign key.
func (o *Recipe) RecipeDetail(mods ...qm.QueryMod) recipeDetailQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"recipe_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := RecipeDetails(queryMods...)
	queries.SetFrom(query.Query, "\"recipe_details\"")

	return query
}

// HighlightRecipeMealGphotos retrieves all the meal_gphoto's MealGphotos with an executor via highlight_recipe column.
func (o *Recipe) HighlightRecipeMealGphotos(mods ...qm.QueryMod) mealGphotoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"meal_gphoto\".\"highlight_recipe\"=?", o.ID),
	)

	query := MealGphotos(queryMods...)
	queries.SetFrom(query.Query, "\"meal_gphoto\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"meal_gphoto\".*"})
	}

	return query
}

// MealRecipes retrieves all the meal_recipe's MealRecipes with an executor.
func (o *Recipe) MealRecipes(mods ...qm.QueryMod) mealRecipeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"meal_recipe\".\"recipe_id\"=?", o.ID),
	)

	query := MealRecipes(queryMods...)
	queries.SetFrom(query.Query, "\"meal_recipe\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"meal_recipe\".*"})
	}

	return query
}

// NotionRecipes retrieves all the notion_recipe's NotionRecipes with an executor.
func (o *Recipe) NotionRecipes(mods ...qm.QueryMod) notionRecipeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"notion_recipe\".\"recipe\"=?", o.ID),
	)

	query := NotionRecipes(queryMods...)
	queries.SetFrom(query.Query, "\"notion_recipe\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"notion_recipe\".*"})
	}

	return query
}

// RecipeSectionIngredients retrieves all the recipe_section_ingredient's RecipeSectionIngredients with an executor.
func (o *Recipe) RecipeSectionIngredients(mods ...qm.QueryMod) recipeSectionIngredientQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"recipe_section_ingredients\".\"recipe\"=?", o.ID),
	)

	query := RecipeSectionIngredients(queryMods...)
	queries.SetFrom(query.Query, "\"recipe_section_ingredients\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"recipe_section_ingredients\".*"})
	}

	return query
}

// LoadRecipeDetail allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (recipeL) LoadRecipeDetail(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipe interface{}, mods queries.Applicator) error {
	var slice []*Recipe
	var object *Recipe

	if singular {
		object = maybeRecipe.(*Recipe)
	} else {
		slice = *maybeRecipe.(*[]*Recipe)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`recipe_details`),
		qm.WhereIn(`recipe_details.recipe_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RecipeDetail")
	}

	var resultSlice []*RecipeDetail
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RecipeDetail")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for recipe_details")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for recipe_details")
	}

	if len(recipeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RecipeDetail = foreign
		if foreign.R == nil {
			foreign.R = &recipeDetailR{}
		}
		foreign.R.Recipe = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.RecipeID {
				local.R.RecipeDetail = foreign
				if foreign.R == nil {
					foreign.R = &recipeDetailR{}
				}
				foreign.R.Recipe = local
				break
			}
		}
	}

	return nil
}

// LoadHighlightRecipeMealGphotos allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (recipeL) LoadHighlightRecipeMealGphotos(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipe interface{}, mods queries.Applicator) error {
	var slice []*Recipe
	var object *Recipe

	if singular {
		object = maybeRecipe.(*Recipe)
	} else {
		slice = *maybeRecipe.(*[]*Recipe)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`meal_gphoto`),
		qm.WhereIn(`meal_gphoto.highlight_recipe in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load meal_gphoto")
	}

	var resultSlice []*MealGphoto
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice meal_gphoto")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on meal_gphoto")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for meal_gphoto")
	}

	if len(mealGphotoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.HighlightRecipeMealGphotos = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mealGphotoR{}
			}
			foreign.R.HighlightRecipeRecipe = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.HighlightRecipe) {
				local.R.HighlightRecipeMealGphotos = append(local.R.HighlightRecipeMealGphotos, foreign)
				if foreign.R == nil {
					foreign.R = &mealGphotoR{}
				}
				foreign.R.HighlightRecipeRecipe = local
				break
			}
		}
	}

	return nil
}

// LoadMealRecipes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (recipeL) LoadMealRecipes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipe interface{}, mods queries.Applicator) error {
	var slice []*Recipe
	var object *Recipe

	if singular {
		object = maybeRecipe.(*Recipe)
	} else {
		slice = *maybeRecipe.(*[]*Recipe)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`meal_recipe`),
		qm.WhereIn(`meal_recipe.recipe_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load meal_recipe")
	}

	var resultSlice []*MealRecipe
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice meal_recipe")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on meal_recipe")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for meal_recipe")
	}

	if len(mealRecipeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MealRecipes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mealRecipeR{}
			}
			foreign.R.Recipe = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RecipeID {
				local.R.MealRecipes = append(local.R.MealRecipes, foreign)
				if foreign.R == nil {
					foreign.R = &mealRecipeR{}
				}
				foreign.R.Recipe = local
				break
			}
		}
	}

	return nil
}

// LoadNotionRecipes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (recipeL) LoadNotionRecipes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipe interface{}, mods queries.Applicator) error {
	var slice []*Recipe
	var object *Recipe

	if singular {
		object = maybeRecipe.(*Recipe)
	} else {
		slice = *maybeRecipe.(*[]*Recipe)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`notion_recipe`),
		qm.WhereIn(`notion_recipe.recipe in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load notion_recipe")
	}

	var resultSlice []*NotionRecipe
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice notion_recipe")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on notion_recipe")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for notion_recipe")
	}

	if len(notionRecipeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.NotionRecipes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &notionRecipeR{}
			}
			foreign.R.NotionRecipeRecipe = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Recipe) {
				local.R.NotionRecipes = append(local.R.NotionRecipes, foreign)
				if foreign.R == nil {
					foreign.R = &notionRecipeR{}
				}
				foreign.R.NotionRecipeRecipe = local
				break
			}
		}
	}

	return nil
}

// LoadRecipeSectionIngredients allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (recipeL) LoadRecipeSectionIngredients(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipe interface{}, mods queries.Applicator) error {
	var slice []*Recipe
	var object *Recipe

	if singular {
		object = maybeRecipe.(*Recipe)
	} else {
		slice = *maybeRecipe.(*[]*Recipe)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`recipe_section_ingredients`),
		qm.WhereIn(`recipe_section_ingredients.recipe in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load recipe_section_ingredients")
	}

	var resultSlice []*RecipeSectionIngredient
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice recipe_section_ingredients")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on recipe_section_ingredients")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for recipe_section_ingredients")
	}

	if len(recipeSectionIngredientAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RecipeSectionIngredients = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &recipeSectionIngredientR{}
			}
			foreign.R.RecipeSectionIngredientRecipe = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Recipe) {
				local.R.RecipeSectionIngredients = append(local.R.RecipeSectionIngredients, foreign)
				if foreign.R == nil {
					foreign.R = &recipeSectionIngredientR{}
				}
				foreign.R.RecipeSectionIngredientRecipe = local
				break
			}
		}
	}

	return nil
}

// SetRecipeDetail of the recipe to the related item.
// Sets o.R.RecipeDetail to related.
// Adds o to related.R.Recipe.
func (o *Recipe) SetRecipeDetail(ctx context.Context, exec boil.ContextExecutor, insert bool, related *RecipeDetail) error {
	var err error

	if insert {
		related.RecipeID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"recipe_details\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"recipe_id"}),
			strmangle.WhereClause("\"", "\"", 2, recipeDetailPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.RecipeID = o.ID

	}

	if o.R == nil {
		o.R = &recipeR{
			RecipeDetail: related,
		}
	} else {
		o.R.RecipeDetail = related
	}

	if related.R == nil {
		related.R = &recipeDetailR{
			Recipe: o,
		}
	} else {
		related.R.Recipe = o
	}
	return nil
}

// AddHighlightRecipeMealGphotos adds the given related objects to the existing relationships
// of the recipe, optionally inserting them as new records.
// Appends related to o.R.HighlightRecipeMealGphotos.
// Sets related.R.HighlightRecipeRecipe appropriately.
func (o *Recipe) AddHighlightRecipeMealGphotos(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MealGphoto) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.HighlightRecipe, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"meal_gphoto\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"highlight_recipe"}),
				strmangle.WhereClause("\"", "\"", 2, mealGphotoPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Meal, rel.GphotosID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.HighlightRecipe, o.ID)
		}
	}

	if o.R == nil {
		o.R = &recipeR{
			HighlightRecipeMealGphotos: related,
		}
	} else {
		o.R.HighlightRecipeMealGphotos = append(o.R.HighlightRecipeMealGphotos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mealGphotoR{
				HighlightRecipeRecipe: o,
			}
		} else {
			rel.R.HighlightRecipeRecipe = o
		}
	}
	return nil
}

// SetHighlightRecipeMealGphotos removes all previously related items of the
// recipe replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.HighlightRecipeRecipe's HighlightRecipeMealGphotos accordingly.
// Replaces o.R.HighlightRecipeMealGphotos with related.
// Sets related.R.HighlightRecipeRecipe's HighlightRecipeMealGphotos accordingly.
func (o *Recipe) SetHighlightRecipeMealGphotos(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MealGphoto) error {
	query := "update \"meal_gphoto\" set \"highlight_recipe\" = null where \"highlight_recipe\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.HighlightRecipeMealGphotos {
			queries.SetScanner(&rel.HighlightRecipe, nil)
			if rel.R == nil {
				continue
			}

			rel.R.HighlightRecipeRecipe = nil
		}

		o.R.HighlightRecipeMealGphotos = nil
	}
	return o.AddHighlightRecipeMealGphotos(ctx, exec, insert, related...)
}

// RemoveHighlightRecipeMealGphotos relationships from objects passed in.
// Removes related items from R.HighlightRecipeMealGphotos (uses pointer comparison, removal does not keep order)
// Sets related.R.HighlightRecipeRecipe.
func (o *Recipe) RemoveHighlightRecipeMealGphotos(ctx context.Context, exec boil.ContextExecutor, related ...*MealGphoto) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.HighlightRecipe, nil)
		if rel.R != nil {
			rel.R.HighlightRecipeRecipe = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("highlight_recipe")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.HighlightRecipeMealGphotos {
			if rel != ri {
				continue
			}

			ln := len(o.R.HighlightRecipeMealGphotos)
			if ln > 1 && i < ln-1 {
				o.R.HighlightRecipeMealGphotos[i] = o.R.HighlightRecipeMealGphotos[ln-1]
			}
			o.R.HighlightRecipeMealGphotos = o.R.HighlightRecipeMealGphotos[:ln-1]
			break
		}
	}

	return nil
}

// AddMealRecipes adds the given related objects to the existing relationships
// of the recipe, optionally inserting them as new records.
// Appends related to o.R.MealRecipes.
// Sets related.R.Recipe appropriately.
func (o *Recipe) AddMealRecipes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MealRecipe) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RecipeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"meal_recipe\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"recipe_id"}),
				strmangle.WhereClause("\"", "\"", 2, mealRecipePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.MealID, rel.RecipeID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RecipeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &recipeR{
			MealRecipes: related,
		}
	} else {
		o.R.MealRecipes = append(o.R.MealRecipes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mealRecipeR{
				Recipe: o,
			}
		} else {
			rel.R.Recipe = o
		}
	}
	return nil
}

// AddNotionRecipes adds the given related objects to the existing relationships
// of the recipe, optionally inserting them as new records.
// Appends related to o.R.NotionRecipes.
// Sets related.R.NotionRecipeRecipe appropriately.
func (o *Recipe) AddNotionRecipes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*NotionRecipe) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Recipe, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"notion_recipe\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"recipe"}),
				strmangle.WhereClause("\"", "\"", 2, notionRecipePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.PageID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Recipe, o.ID)
		}
	}

	if o.R == nil {
		o.R = &recipeR{
			NotionRecipes: related,
		}
	} else {
		o.R.NotionRecipes = append(o.R.NotionRecipes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &notionRecipeR{
				NotionRecipeRecipe: o,
			}
		} else {
			rel.R.NotionRecipeRecipe = o
		}
	}
	return nil
}

// SetNotionRecipes removes all previously related items of the
// recipe replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.NotionRecipeRecipe's NotionRecipes accordingly.
// Replaces o.R.NotionRecipes with related.
// Sets related.R.NotionRecipeRecipe's NotionRecipes accordingly.
func (o *Recipe) SetNotionRecipes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*NotionRecipe) error {
	query := "update \"notion_recipe\" set \"recipe\" = null where \"recipe\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.NotionRecipes {
			queries.SetScanner(&rel.Recipe, nil)
			if rel.R == nil {
				continue
			}

			rel.R.NotionRecipeRecipe = nil
		}

		o.R.NotionRecipes = nil
	}
	return o.AddNotionRecipes(ctx, exec, insert, related...)
}

// RemoveNotionRecipes relationships from objects passed in.
// Removes related items from R.NotionRecipes (uses pointer comparison, removal does not keep order)
// Sets related.R.NotionRecipeRecipe.
func (o *Recipe) RemoveNotionRecipes(ctx context.Context, exec boil.ContextExecutor, related ...*NotionRecipe) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Recipe, nil)
		if rel.R != nil {
			rel.R.NotionRecipeRecipe = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("recipe")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.NotionRecipes {
			if rel != ri {
				continue
			}

			ln := len(o.R.NotionRecipes)
			if ln > 1 && i < ln-1 {
				o.R.NotionRecipes[i] = o.R.NotionRecipes[ln-1]
			}
			o.R.NotionRecipes = o.R.NotionRecipes[:ln-1]
			break
		}
	}

	return nil
}

// AddRecipeSectionIngredients adds the given related objects to the existing relationships
// of the recipe, optionally inserting them as new records.
// Appends related to o.R.RecipeSectionIngredients.
// Sets related.R.RecipeSectionIngredientRecipe appropriately.
func (o *Recipe) AddRecipeSectionIngredients(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RecipeSectionIngredient) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Recipe, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"recipe_section_ingredients\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"recipe"}),
				strmangle.WhereClause("\"", "\"", 2, recipeSectionIngredientPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Recipe, o.ID)
		}
	}

	if o.R == nil {
		o.R = &recipeR{
			RecipeSectionIngredients: related,
		}
	} else {
		o.R.RecipeSectionIngredients = append(o.R.RecipeSectionIngredients, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &recipeSectionIngredientR{
				RecipeSectionIngredientRecipe: o,
			}
		} else {
			rel.R.RecipeSectionIngredientRecipe = o
		}
	}
	return nil
}

// SetRecipeSectionIngredients removes all previously related items of the
// recipe replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RecipeSectionIngredientRecipe's RecipeSectionIngredients accordingly.
// Replaces o.R.RecipeSectionIngredients with related.
// Sets related.R.RecipeSectionIngredientRecipe's RecipeSectionIngredients accordingly.
func (o *Recipe) SetRecipeSectionIngredients(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RecipeSectionIngredient) error {
	query := "update \"recipe_section_ingredients\" set \"recipe\" = null where \"recipe\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RecipeSectionIngredients {
			queries.SetScanner(&rel.Recipe, nil)
			if rel.R == nil {
				continue
			}

			rel.R.RecipeSectionIngredientRecipe = nil
		}

		o.R.RecipeSectionIngredients = nil
	}
	return o.AddRecipeSectionIngredients(ctx, exec, insert, related...)
}

// RemoveRecipeSectionIngredients relationships from objects passed in.
// Removes related items from R.RecipeSectionIngredients (uses pointer comparison, removal does not keep order)
// Sets related.R.RecipeSectionIngredientRecipe.
func (o *Recipe) RemoveRecipeSectionIngredients(ctx context.Context, exec boil.ContextExecutor, related ...*RecipeSectionIngredient) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Recipe, nil)
		if rel.R != nil {
			rel.R.RecipeSectionIngredientRecipe = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("recipe")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RecipeSectionIngredients {
			if rel != ri {
				continue
			}

			ln := len(o.R.RecipeSectionIngredients)
			if ln > 1 && i < ln-1 {
				o.R.RecipeSectionIngredients[i] = o.R.RecipeSectionIngredients[ln-1]
			}
			o.R.RecipeSectionIngredients = o.R.RecipeSectionIngredients[:ln-1]
			break
		}
	}

	return nil
}

// Recipes retrieves all the records using an executor.
func Recipes(mods ...qm.QueryMod) recipeQuery {
	mods = append(mods, qm.From("\"recipes\""))
	return recipeQuery{NewQuery(mods...)}
}

// FindRecipe retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRecipe(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Recipe, error) {
	recipeObj := &Recipe{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"recipes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, recipeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from recipes")
	}

	if err = recipeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return recipeObj, err
	}

	return recipeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Recipe) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no recipes provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recipeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	recipeInsertCacheMut.RLock()
	cache, cached := recipeInsertCache[key]
	recipeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			recipeAllColumns,
			recipeColumnsWithDefault,
			recipeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(recipeType, recipeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(recipeType, recipeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"recipes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"recipes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into recipes")
	}

	if !cached {
		recipeInsertCacheMut.Lock()
		recipeInsertCache[key] = cache
		recipeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Recipe.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Recipe) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	recipeUpdateCacheMut.RLock()
	cache, cached := recipeUpdateCache[key]
	recipeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			recipeAllColumns,
			recipePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update recipes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"recipes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, recipePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(recipeType, recipeMapping, append(wl, recipePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update recipes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for recipes")
	}

	if !cached {
		recipeUpdateCacheMut.Lock()
		recipeUpdateCache[key] = cache
		recipeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q recipeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for recipes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for recipes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RecipeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"recipes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, recipePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in recipe slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all recipe")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Recipe) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no recipes provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recipeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	recipeUpsertCacheMut.RLock()
	cache, cached := recipeUpsertCache[key]
	recipeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			recipeAllColumns,
			recipeColumnsWithDefault,
			recipeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			recipeAllColumns,
			recipePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert recipes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(recipePrimaryKeyColumns))
			copy(conflict, recipePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"recipes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(recipeType, recipeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(recipeType, recipeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert recipes")
	}

	if !cached {
		recipeUpsertCacheMut.Lock()
		recipeUpsertCache[key] = cache
		recipeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Recipe record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Recipe) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Recipe provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), recipePrimaryKeyMapping)
	sql := "DELETE FROM \"recipes\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from recipes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for recipes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q recipeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no recipeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from recipes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for recipes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RecipeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(recipeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"recipes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, recipePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from recipe slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for recipes")
	}

	if len(recipeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Recipe) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRecipe(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RecipeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RecipeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"recipes\".* FROM \"recipes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, recipePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RecipeSlice")
	}

	*o = slice

	return nil
}

// RecipeExists checks if the Recipe row exists.
func RecipeExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"recipes\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if recipes exists")
	}

	return exists, nil
}
