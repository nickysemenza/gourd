// Code generated by SQLBoiler 4.8.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testIngredientUnits(t *testing.T) {
	t.Parallel()

	query := IngredientUnits()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testIngredientUnitsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IngredientUnit{}
	if err = randomize.Struct(seed, o, ingredientUnitDBTypes, true, ingredientUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IngredientUnit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IngredientUnits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIngredientUnitsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IngredientUnit{}
	if err = randomize.Struct(seed, o, ingredientUnitDBTypes, true, ingredientUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IngredientUnit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := IngredientUnits().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IngredientUnits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIngredientUnitsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IngredientUnit{}
	if err = randomize.Struct(seed, o, ingredientUnitDBTypes, true, ingredientUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IngredientUnit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IngredientUnitSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IngredientUnits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIngredientUnitsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IngredientUnit{}
	if err = randomize.Struct(seed, o, ingredientUnitDBTypes, true, ingredientUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IngredientUnit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := IngredientUnitExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if IngredientUnit exists: %s", err)
	}
	if !e {
		t.Errorf("Expected IngredientUnitExists to return true, but got false.")
	}
}

func testIngredientUnitsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IngredientUnit{}
	if err = randomize.Struct(seed, o, ingredientUnitDBTypes, true, ingredientUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IngredientUnit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	ingredientUnitFound, err := FindIngredientUnit(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if ingredientUnitFound == nil {
		t.Error("want a record, got nil")
	}
}

func testIngredientUnitsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IngredientUnit{}
	if err = randomize.Struct(seed, o, ingredientUnitDBTypes, true, ingredientUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IngredientUnit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = IngredientUnits().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testIngredientUnitsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IngredientUnit{}
	if err = randomize.Struct(seed, o, ingredientUnitDBTypes, true, ingredientUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IngredientUnit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := IngredientUnits().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testIngredientUnitsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ingredientUnitOne := &IngredientUnit{}
	ingredientUnitTwo := &IngredientUnit{}
	if err = randomize.Struct(seed, ingredientUnitOne, ingredientUnitDBTypes, false, ingredientUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IngredientUnit struct: %s", err)
	}
	if err = randomize.Struct(seed, ingredientUnitTwo, ingredientUnitDBTypes, false, ingredientUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IngredientUnit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ingredientUnitOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ingredientUnitTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := IngredientUnits().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testIngredientUnitsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	ingredientUnitOne := &IngredientUnit{}
	ingredientUnitTwo := &IngredientUnit{}
	if err = randomize.Struct(seed, ingredientUnitOne, ingredientUnitDBTypes, false, ingredientUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IngredientUnit struct: %s", err)
	}
	if err = randomize.Struct(seed, ingredientUnitTwo, ingredientUnitDBTypes, false, ingredientUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IngredientUnit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ingredientUnitOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ingredientUnitTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IngredientUnits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func ingredientUnitBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *IngredientUnit) error {
	*o = IngredientUnit{}
	return nil
}

func ingredientUnitAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *IngredientUnit) error {
	*o = IngredientUnit{}
	return nil
}

func ingredientUnitAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *IngredientUnit) error {
	*o = IngredientUnit{}
	return nil
}

func ingredientUnitBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *IngredientUnit) error {
	*o = IngredientUnit{}
	return nil
}

func ingredientUnitAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *IngredientUnit) error {
	*o = IngredientUnit{}
	return nil
}

func ingredientUnitBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *IngredientUnit) error {
	*o = IngredientUnit{}
	return nil
}

func ingredientUnitAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *IngredientUnit) error {
	*o = IngredientUnit{}
	return nil
}

func ingredientUnitBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *IngredientUnit) error {
	*o = IngredientUnit{}
	return nil
}

func ingredientUnitAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *IngredientUnit) error {
	*o = IngredientUnit{}
	return nil
}

func testIngredientUnitsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &IngredientUnit{}
	o := &IngredientUnit{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, ingredientUnitDBTypes, false); err != nil {
		t.Errorf("Unable to randomize IngredientUnit object: %s", err)
	}

	AddIngredientUnitHook(boil.BeforeInsertHook, ingredientUnitBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	ingredientUnitBeforeInsertHooks = []IngredientUnitHook{}

	AddIngredientUnitHook(boil.AfterInsertHook, ingredientUnitAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	ingredientUnitAfterInsertHooks = []IngredientUnitHook{}

	AddIngredientUnitHook(boil.AfterSelectHook, ingredientUnitAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	ingredientUnitAfterSelectHooks = []IngredientUnitHook{}

	AddIngredientUnitHook(boil.BeforeUpdateHook, ingredientUnitBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	ingredientUnitBeforeUpdateHooks = []IngredientUnitHook{}

	AddIngredientUnitHook(boil.AfterUpdateHook, ingredientUnitAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	ingredientUnitAfterUpdateHooks = []IngredientUnitHook{}

	AddIngredientUnitHook(boil.BeforeDeleteHook, ingredientUnitBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	ingredientUnitBeforeDeleteHooks = []IngredientUnitHook{}

	AddIngredientUnitHook(boil.AfterDeleteHook, ingredientUnitAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	ingredientUnitAfterDeleteHooks = []IngredientUnitHook{}

	AddIngredientUnitHook(boil.BeforeUpsertHook, ingredientUnitBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	ingredientUnitBeforeUpsertHooks = []IngredientUnitHook{}

	AddIngredientUnitHook(boil.AfterUpsertHook, ingredientUnitAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	ingredientUnitAfterUpsertHooks = []IngredientUnitHook{}
}

func testIngredientUnitsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IngredientUnit{}
	if err = randomize.Struct(seed, o, ingredientUnitDBTypes, true, ingredientUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IngredientUnit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IngredientUnits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIngredientUnitsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IngredientUnit{}
	if err = randomize.Struct(seed, o, ingredientUnitDBTypes, true); err != nil {
		t.Errorf("Unable to randomize IngredientUnit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(ingredientUnitColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := IngredientUnits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIngredientUnitToOneIngredientUsingIngredientUnitIngredient(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local IngredientUnit
	var foreign Ingredient

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, ingredientUnitDBTypes, false, ingredientUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IngredientUnit struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, ingredientDBTypes, false, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.Ingredient = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IngredientUnitIngredient().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := IngredientUnitSlice{&local}
	if err = local.L.LoadIngredientUnitIngredient(ctx, tx, false, (*[]*IngredientUnit)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IngredientUnitIngredient == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IngredientUnitIngredient = nil
	if err = local.L.LoadIngredientUnitIngredient(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IngredientUnitIngredient == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testIngredientUnitToOneSetOpIngredientUsingIngredientUnitIngredient(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IngredientUnit
	var b, c Ingredient

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ingredientUnitDBTypes, false, strmangle.SetComplement(ingredientUnitPrimaryKeyColumns, ingredientUnitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, ingredientDBTypes, false, strmangle.SetComplement(ingredientPrimaryKeyColumns, ingredientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, ingredientDBTypes, false, strmangle.SetComplement(ingredientPrimaryKeyColumns, ingredientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Ingredient{&b, &c} {
		err = a.SetIngredientUnitIngredient(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IngredientUnitIngredient != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IngredientUnits[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Ingredient != x.ID {
			t.Error("foreign key was wrong value", a.Ingredient)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Ingredient))
		reflect.Indirect(reflect.ValueOf(&a.Ingredient)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Ingredient != x.ID {
			t.Error("foreign key was wrong value", a.Ingredient, x.ID)
		}
	}
}

func testIngredientUnitsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IngredientUnit{}
	if err = randomize.Struct(seed, o, ingredientUnitDBTypes, true, ingredientUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IngredientUnit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIngredientUnitsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IngredientUnit{}
	if err = randomize.Struct(seed, o, ingredientUnitDBTypes, true, ingredientUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IngredientUnit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IngredientUnitSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIngredientUnitsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IngredientUnit{}
	if err = randomize.Struct(seed, o, ingredientUnitDBTypes, true, ingredientUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IngredientUnit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := IngredientUnits().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	ingredientUnitDBTypes = map[string]string{`ID`: `integer`, `Ingredient`: `text`, `UnitA`: `text`, `AmountA`: `numeric`, `UnitB`: `text`, `AmountB`: `numeric`, `Source`: `text`}
	_                     = bytes.MinRead
)

func testIngredientUnitsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(ingredientUnitPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(ingredientUnitAllColumns) == len(ingredientUnitPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &IngredientUnit{}
	if err = randomize.Struct(seed, o, ingredientUnitDBTypes, true, ingredientUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IngredientUnit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IngredientUnits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ingredientUnitDBTypes, true, ingredientUnitPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IngredientUnit struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testIngredientUnitsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(ingredientUnitAllColumns) == len(ingredientUnitPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &IngredientUnit{}
	if err = randomize.Struct(seed, o, ingredientUnitDBTypes, true, ingredientUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IngredientUnit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IngredientUnits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ingredientUnitDBTypes, true, ingredientUnitPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IngredientUnit struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(ingredientUnitAllColumns, ingredientUnitPrimaryKeyColumns) {
		fields = ingredientUnitAllColumns
	} else {
		fields = strmangle.SetComplement(
			ingredientUnitAllColumns,
			ingredientUnitPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := IngredientUnitSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testIngredientUnitsUpsert(t *testing.T) {
	t.Parallel()

	if len(ingredientUnitAllColumns) == len(ingredientUnitPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := IngredientUnit{}
	if err = randomize.Struct(seed, &o, ingredientUnitDBTypes, true); err != nil {
		t.Errorf("Unable to randomize IngredientUnit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert IngredientUnit: %s", err)
	}

	count, err := IngredientUnits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, ingredientUnitDBTypes, false, ingredientUnitPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IngredientUnit struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert IngredientUnit: %s", err)
	}

	count, err = IngredientUnits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
