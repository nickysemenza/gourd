// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UsdaLabMethodCode is an object representing the database table.
type UsdaLabMethodCode struct {
	ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	LabMethodID null.Int    `boil:"lab_method_id" json:"lab_method_id,omitempty" toml:"lab_method_id" yaml:"lab_method_id,omitempty"`
	Code        null.String `boil:"code" json:"code,omitempty" toml:"code" yaml:"code,omitempty"`

	R *usdaLabMethodCodeR `boil:"rel" json:"rel" toml:"rel" yaml:"rel"`
	L usdaLabMethodCodeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UsdaLabMethodCodeColumns = struct {
	ID          string
	LabMethodID string
	Code        string
}{
	ID:          "id",
	LabMethodID: "lab_method_id",
	Code:        "code",
}

var UsdaLabMethodCodeTableColumns = struct {
	ID          string
	LabMethodID string
	Code        string
}{
	ID:          "usda_lab_method_code.id",
	LabMethodID: "usda_lab_method_code.lab_method_id",
	Code:        "usda_lab_method_code.code",
}

// Generated where

var UsdaLabMethodCodeWhere = struct {
	ID          whereHelperint
	LabMethodID whereHelpernull_Int
	Code        whereHelpernull_String
}{
	ID:          whereHelperint{field: "\"usda_lab_method_code\".\"id\""},
	LabMethodID: whereHelpernull_Int{field: "\"usda_lab_method_code\".\"lab_method_id\""},
	Code:        whereHelpernull_String{field: "\"usda_lab_method_code\".\"code\""},
}

// UsdaLabMethodCodeRels is where relationship names are stored.
var UsdaLabMethodCodeRels = struct {
	LabMethod string
}{
	LabMethod: "LabMethod",
}

// usdaLabMethodCodeR is where relationships are stored.
type usdaLabMethodCodeR struct {
	LabMethod *UsdaLabMethod `boil:"LabMethod" json:"LabMethod" toml:"LabMethod" yaml:"LabMethod"`
}

// NewStruct creates a new relationship struct
func (*usdaLabMethodCodeR) NewStruct() *usdaLabMethodCodeR {
	return &usdaLabMethodCodeR{}
}

// usdaLabMethodCodeL is where Load methods for each relationship are stored.
type usdaLabMethodCodeL struct{}

var (
	usdaLabMethodCodeAllColumns            = []string{"id", "lab_method_id", "code"}
	usdaLabMethodCodeColumnsWithoutDefault = []string{"id", "lab_method_id", "code"}
	usdaLabMethodCodeColumnsWithDefault    = []string{}
	usdaLabMethodCodePrimaryKeyColumns     = []string{"id"}
	usdaLabMethodCodeGeneratedColumns      = []string{}
)

type (
	// UsdaLabMethodCodeSlice is an alias for a slice of pointers to UsdaLabMethodCode.
	// This should almost always be used instead of []UsdaLabMethodCode.
	UsdaLabMethodCodeSlice []*UsdaLabMethodCode
	// UsdaLabMethodCodeHook is the signature for custom UsdaLabMethodCode hook methods
	UsdaLabMethodCodeHook func(context.Context, boil.ContextExecutor, *UsdaLabMethodCode) error

	usdaLabMethodCodeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usdaLabMethodCodeType                 = reflect.TypeOf(&UsdaLabMethodCode{})
	usdaLabMethodCodeMapping              = queries.MakeStructMapping(usdaLabMethodCodeType)
	usdaLabMethodCodePrimaryKeyMapping, _ = queries.BindMapping(usdaLabMethodCodeType, usdaLabMethodCodeMapping, usdaLabMethodCodePrimaryKeyColumns)
	usdaLabMethodCodeInsertCacheMut       sync.RWMutex
	usdaLabMethodCodeInsertCache          = make(map[string]insertCache)
	usdaLabMethodCodeUpdateCacheMut       sync.RWMutex
	usdaLabMethodCodeUpdateCache          = make(map[string]updateCache)
	usdaLabMethodCodeUpsertCacheMut       sync.RWMutex
	usdaLabMethodCodeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var usdaLabMethodCodeAfterSelectHooks []UsdaLabMethodCodeHook

var usdaLabMethodCodeBeforeInsertHooks []UsdaLabMethodCodeHook
var usdaLabMethodCodeAfterInsertHooks []UsdaLabMethodCodeHook

var usdaLabMethodCodeBeforeUpdateHooks []UsdaLabMethodCodeHook
var usdaLabMethodCodeAfterUpdateHooks []UsdaLabMethodCodeHook

var usdaLabMethodCodeBeforeDeleteHooks []UsdaLabMethodCodeHook
var usdaLabMethodCodeAfterDeleteHooks []UsdaLabMethodCodeHook

var usdaLabMethodCodeBeforeUpsertHooks []UsdaLabMethodCodeHook
var usdaLabMethodCodeAfterUpsertHooks []UsdaLabMethodCodeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UsdaLabMethodCode) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaLabMethodCodeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UsdaLabMethodCode) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaLabMethodCodeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UsdaLabMethodCode) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaLabMethodCodeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UsdaLabMethodCode) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaLabMethodCodeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UsdaLabMethodCode) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaLabMethodCodeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UsdaLabMethodCode) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaLabMethodCodeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UsdaLabMethodCode) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaLabMethodCodeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UsdaLabMethodCode) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaLabMethodCodeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UsdaLabMethodCode) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaLabMethodCodeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUsdaLabMethodCodeHook registers your hook function for all future operations.
func AddUsdaLabMethodCodeHook(hookPoint boil.HookPoint, usdaLabMethodCodeHook UsdaLabMethodCodeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		usdaLabMethodCodeAfterSelectHooks = append(usdaLabMethodCodeAfterSelectHooks, usdaLabMethodCodeHook)
	case boil.BeforeInsertHook:
		usdaLabMethodCodeBeforeInsertHooks = append(usdaLabMethodCodeBeforeInsertHooks, usdaLabMethodCodeHook)
	case boil.AfterInsertHook:
		usdaLabMethodCodeAfterInsertHooks = append(usdaLabMethodCodeAfterInsertHooks, usdaLabMethodCodeHook)
	case boil.BeforeUpdateHook:
		usdaLabMethodCodeBeforeUpdateHooks = append(usdaLabMethodCodeBeforeUpdateHooks, usdaLabMethodCodeHook)
	case boil.AfterUpdateHook:
		usdaLabMethodCodeAfterUpdateHooks = append(usdaLabMethodCodeAfterUpdateHooks, usdaLabMethodCodeHook)
	case boil.BeforeDeleteHook:
		usdaLabMethodCodeBeforeDeleteHooks = append(usdaLabMethodCodeBeforeDeleteHooks, usdaLabMethodCodeHook)
	case boil.AfterDeleteHook:
		usdaLabMethodCodeAfterDeleteHooks = append(usdaLabMethodCodeAfterDeleteHooks, usdaLabMethodCodeHook)
	case boil.BeforeUpsertHook:
		usdaLabMethodCodeBeforeUpsertHooks = append(usdaLabMethodCodeBeforeUpsertHooks, usdaLabMethodCodeHook)
	case boil.AfterUpsertHook:
		usdaLabMethodCodeAfterUpsertHooks = append(usdaLabMethodCodeAfterUpsertHooks, usdaLabMethodCodeHook)
	}
}

// One returns a single usdaLabMethodCode record from the query.
func (q usdaLabMethodCodeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UsdaLabMethodCode, error) {
	o := &UsdaLabMethodCode{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for usda_lab_method_code")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UsdaLabMethodCode records from the query.
func (q usdaLabMethodCodeQuery) All(ctx context.Context, exec boil.ContextExecutor) (UsdaLabMethodCodeSlice, error) {
	var o []*UsdaLabMethodCode

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UsdaLabMethodCode slice")
	}

	if len(usdaLabMethodCodeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UsdaLabMethodCode records in the query.
func (q usdaLabMethodCodeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count usda_lab_method_code rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q usdaLabMethodCodeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if usda_lab_method_code exists")
	}

	return count > 0, nil
}

// LabMethod pointed to by the foreign key.
func (o *UsdaLabMethodCode) LabMethod(mods ...qm.QueryMod) usdaLabMethodQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LabMethodID),
	}

	queryMods = append(queryMods, mods...)

	query := UsdaLabMethods(queryMods...)
	queries.SetFrom(query.Query, "\"usda_lab_method\"")

	return query
}

// LoadLabMethod allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (usdaLabMethodCodeL) LoadLabMethod(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsdaLabMethodCode interface{}, mods queries.Applicator) error {
	var slice []*UsdaLabMethodCode
	var object *UsdaLabMethodCode

	if singular {
		object = maybeUsdaLabMethodCode.(*UsdaLabMethodCode)
	} else {
		slice = *maybeUsdaLabMethodCode.(*[]*UsdaLabMethodCode)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &usdaLabMethodCodeR{}
		}
		if !queries.IsNil(object.LabMethodID) {
			args = append(args, object.LabMethodID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usdaLabMethodCodeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.LabMethodID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.LabMethodID) {
				args = append(args, obj.LabMethodID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`usda_lab_method`),
		qm.WhereIn(`usda_lab_method.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UsdaLabMethod")
	}

	var resultSlice []*UsdaLabMethod
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UsdaLabMethod")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for usda_lab_method")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usda_lab_method")
	}

	if len(usdaLabMethodCodeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.LabMethod = foreign
		if foreign.R == nil {
			foreign.R = &usdaLabMethodR{}
		}
		foreign.R.LabMethodUsdaLabMethodCodes = append(foreign.R.LabMethodUsdaLabMethodCodes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.LabMethodID, foreign.ID) {
				local.R.LabMethod = foreign
				if foreign.R == nil {
					foreign.R = &usdaLabMethodR{}
				}
				foreign.R.LabMethodUsdaLabMethodCodes = append(foreign.R.LabMethodUsdaLabMethodCodes, local)
				break
			}
		}
	}

	return nil
}

// SetLabMethod of the usdaLabMethodCode to the related item.
// Sets o.R.LabMethod to related.
// Adds o to related.R.LabMethodUsdaLabMethodCodes.
func (o *UsdaLabMethodCode) SetLabMethod(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UsdaLabMethod) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"usda_lab_method_code\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"lab_method_id"}),
		strmangle.WhereClause("\"", "\"", 2, usdaLabMethodCodePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.LabMethodID, related.ID)
	if o.R == nil {
		o.R = &usdaLabMethodCodeR{
			LabMethod: related,
		}
	} else {
		o.R.LabMethod = related
	}

	if related.R == nil {
		related.R = &usdaLabMethodR{
			LabMethodUsdaLabMethodCodes: UsdaLabMethodCodeSlice{o},
		}
	} else {
		related.R.LabMethodUsdaLabMethodCodes = append(related.R.LabMethodUsdaLabMethodCodes, o)
	}

	return nil
}

// RemoveLabMethod relationship.
// Sets o.R.LabMethod to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *UsdaLabMethodCode) RemoveLabMethod(ctx context.Context, exec boil.ContextExecutor, related *UsdaLabMethod) error {
	var err error

	queries.SetScanner(&o.LabMethodID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("lab_method_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.LabMethod = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.LabMethodUsdaLabMethodCodes {
		if queries.Equal(o.LabMethodID, ri.LabMethodID) {
			continue
		}

		ln := len(related.R.LabMethodUsdaLabMethodCodes)
		if ln > 1 && i < ln-1 {
			related.R.LabMethodUsdaLabMethodCodes[i] = related.R.LabMethodUsdaLabMethodCodes[ln-1]
		}
		related.R.LabMethodUsdaLabMethodCodes = related.R.LabMethodUsdaLabMethodCodes[:ln-1]
		break
	}
	return nil
}

// UsdaLabMethodCodes retrieves all the records using an executor.
func UsdaLabMethodCodes(mods ...qm.QueryMod) usdaLabMethodCodeQuery {
	mods = append(mods, qm.From("\"usda_lab_method_code\""))
	return usdaLabMethodCodeQuery{NewQuery(mods...)}
}

// FindUsdaLabMethodCode retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUsdaLabMethodCode(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UsdaLabMethodCode, error) {
	usdaLabMethodCodeObj := &UsdaLabMethodCode{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"usda_lab_method_code\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, usdaLabMethodCodeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from usda_lab_method_code")
	}

	if err = usdaLabMethodCodeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return usdaLabMethodCodeObj, err
	}

	return usdaLabMethodCodeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UsdaLabMethodCode) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no usda_lab_method_code provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaLabMethodCodeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	usdaLabMethodCodeInsertCacheMut.RLock()
	cache, cached := usdaLabMethodCodeInsertCache[key]
	usdaLabMethodCodeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			usdaLabMethodCodeAllColumns,
			usdaLabMethodCodeColumnsWithDefault,
			usdaLabMethodCodeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(usdaLabMethodCodeType, usdaLabMethodCodeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(usdaLabMethodCodeType, usdaLabMethodCodeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"usda_lab_method_code\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"usda_lab_method_code\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into usda_lab_method_code")
	}

	if !cached {
		usdaLabMethodCodeInsertCacheMut.Lock()
		usdaLabMethodCodeInsertCache[key] = cache
		usdaLabMethodCodeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UsdaLabMethodCode.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UsdaLabMethodCode) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	usdaLabMethodCodeUpdateCacheMut.RLock()
	cache, cached := usdaLabMethodCodeUpdateCache[key]
	usdaLabMethodCodeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			usdaLabMethodCodeAllColumns,
			usdaLabMethodCodePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update usda_lab_method_code, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"usda_lab_method_code\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, usdaLabMethodCodePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(usdaLabMethodCodeType, usdaLabMethodCodeMapping, append(wl, usdaLabMethodCodePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update usda_lab_method_code row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for usda_lab_method_code")
	}

	if !cached {
		usdaLabMethodCodeUpdateCacheMut.Lock()
		usdaLabMethodCodeUpdateCache[key] = cache
		usdaLabMethodCodeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q usdaLabMethodCodeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for usda_lab_method_code")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for usda_lab_method_code")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UsdaLabMethodCodeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaLabMethodCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"usda_lab_method_code\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, usdaLabMethodCodePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in usdaLabMethodCode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all usdaLabMethodCode")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UsdaLabMethodCode) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no usda_lab_method_code provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaLabMethodCodeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	usdaLabMethodCodeUpsertCacheMut.RLock()
	cache, cached := usdaLabMethodCodeUpsertCache[key]
	usdaLabMethodCodeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			usdaLabMethodCodeAllColumns,
			usdaLabMethodCodeColumnsWithDefault,
			usdaLabMethodCodeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			usdaLabMethodCodeAllColumns,
			usdaLabMethodCodePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert usda_lab_method_code, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(usdaLabMethodCodePrimaryKeyColumns))
			copy(conflict, usdaLabMethodCodePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"usda_lab_method_code\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(usdaLabMethodCodeType, usdaLabMethodCodeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(usdaLabMethodCodeType, usdaLabMethodCodeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert usda_lab_method_code")
	}

	if !cached {
		usdaLabMethodCodeUpsertCacheMut.Lock()
		usdaLabMethodCodeUpsertCache[key] = cache
		usdaLabMethodCodeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UsdaLabMethodCode record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UsdaLabMethodCode) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UsdaLabMethodCode provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), usdaLabMethodCodePrimaryKeyMapping)
	sql := "DELETE FROM \"usda_lab_method_code\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from usda_lab_method_code")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for usda_lab_method_code")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q usdaLabMethodCodeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no usdaLabMethodCodeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from usda_lab_method_code")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for usda_lab_method_code")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UsdaLabMethodCodeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(usdaLabMethodCodeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaLabMethodCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"usda_lab_method_code\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaLabMethodCodePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from usdaLabMethodCode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for usda_lab_method_code")
	}

	if len(usdaLabMethodCodeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UsdaLabMethodCode) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUsdaLabMethodCode(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsdaLabMethodCodeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UsdaLabMethodCodeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaLabMethodCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"usda_lab_method_code\".* FROM \"usda_lab_method_code\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaLabMethodCodePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UsdaLabMethodCodeSlice")
	}

	*o = slice

	return nil
}

// UsdaLabMethodCodeExists checks if the UsdaLabMethodCode row exists.
func UsdaLabMethodCodeExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"usda_lab_method_code\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if usda_lab_method_code exists")
	}

	return exists, nil
}
