// Code generated by SQLBoiler 4.10.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UsdaAgriculturalAcquisition is an object representing the database table.
type UsdaAgriculturalAcquisition struct {
	FDCID           int         `boil:"fdc_id" json:"fdc_id" toml:"fdc_id" yaml:"fdc_id"`
	AcquisitionDate null.String `boil:"acquisition_date" json:"acquisition_date,omitempty" toml:"acquisition_date" yaml:"acquisition_date,omitempty"`
	MarketClass     null.String `boil:"market_class" json:"market_class,omitempty" toml:"market_class" yaml:"market_class,omitempty"`
	Treatment       null.String `boil:"treatment" json:"treatment,omitempty" toml:"treatment" yaml:"treatment,omitempty"`
	State           null.String `boil:"state" json:"state,omitempty" toml:"state" yaml:"state,omitempty"`

	R *usdaAgriculturalAcquisitionR `boil:"rel" json:"rel" toml:"rel" yaml:"rel"`
	L usdaAgriculturalAcquisitionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UsdaAgriculturalAcquisitionColumns = struct {
	FDCID           string
	AcquisitionDate string
	MarketClass     string
	Treatment       string
	State           string
}{
	FDCID:           "fdc_id",
	AcquisitionDate: "acquisition_date",
	MarketClass:     "market_class",
	Treatment:       "treatment",
	State:           "state",
}

var UsdaAgriculturalAcquisitionTableColumns = struct {
	FDCID           string
	AcquisitionDate string
	MarketClass     string
	Treatment       string
	State           string
}{
	FDCID:           "usda_agricultural_acquisition.fdc_id",
	AcquisitionDate: "usda_agricultural_acquisition.acquisition_date",
	MarketClass:     "usda_agricultural_acquisition.market_class",
	Treatment:       "usda_agricultural_acquisition.treatment",
	State:           "usda_agricultural_acquisition.state",
}

// Generated where

var UsdaAgriculturalAcquisitionWhere = struct {
	FDCID           whereHelperint
	AcquisitionDate whereHelpernull_String
	MarketClass     whereHelpernull_String
	Treatment       whereHelpernull_String
	State           whereHelpernull_String
}{
	FDCID:           whereHelperint{field: "\"usda_agricultural_acquisition\".\"fdc_id\""},
	AcquisitionDate: whereHelpernull_String{field: "\"usda_agricultural_acquisition\".\"acquisition_date\""},
	MarketClass:     whereHelpernull_String{field: "\"usda_agricultural_acquisition\".\"market_class\""},
	Treatment:       whereHelpernull_String{field: "\"usda_agricultural_acquisition\".\"treatment\""},
	State:           whereHelpernull_String{field: "\"usda_agricultural_acquisition\".\"state\""},
}

// UsdaAgriculturalAcquisitionRels is where relationship names are stored.
var UsdaAgriculturalAcquisitionRels = struct {
}{}

// usdaAgriculturalAcquisitionR is where relationships are stored.
type usdaAgriculturalAcquisitionR struct {
}

// NewStruct creates a new relationship struct
func (*usdaAgriculturalAcquisitionR) NewStruct() *usdaAgriculturalAcquisitionR {
	return &usdaAgriculturalAcquisitionR{}
}

// usdaAgriculturalAcquisitionL is where Load methods for each relationship are stored.
type usdaAgriculturalAcquisitionL struct{}

var (
	usdaAgriculturalAcquisitionAllColumns            = []string{"fdc_id", "acquisition_date", "market_class", "treatment", "state"}
	usdaAgriculturalAcquisitionColumnsWithoutDefault = []string{"fdc_id"}
	usdaAgriculturalAcquisitionColumnsWithDefault    = []string{"acquisition_date", "market_class", "treatment", "state"}
	usdaAgriculturalAcquisitionPrimaryKeyColumns     = []string{"fdc_id"}
	usdaAgriculturalAcquisitionGeneratedColumns      = []string{}
)

type (
	// UsdaAgriculturalAcquisitionSlice is an alias for a slice of pointers to UsdaAgriculturalAcquisition.
	// This should almost always be used instead of []UsdaAgriculturalAcquisition.
	UsdaAgriculturalAcquisitionSlice []*UsdaAgriculturalAcquisition
	// UsdaAgriculturalAcquisitionHook is the signature for custom UsdaAgriculturalAcquisition hook methods
	UsdaAgriculturalAcquisitionHook func(context.Context, boil.ContextExecutor, *UsdaAgriculturalAcquisition) error

	usdaAgriculturalAcquisitionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usdaAgriculturalAcquisitionType                 = reflect.TypeOf(&UsdaAgriculturalAcquisition{})
	usdaAgriculturalAcquisitionMapping              = queries.MakeStructMapping(usdaAgriculturalAcquisitionType)
	usdaAgriculturalAcquisitionPrimaryKeyMapping, _ = queries.BindMapping(usdaAgriculturalAcquisitionType, usdaAgriculturalAcquisitionMapping, usdaAgriculturalAcquisitionPrimaryKeyColumns)
	usdaAgriculturalAcquisitionInsertCacheMut       sync.RWMutex
	usdaAgriculturalAcquisitionInsertCache          = make(map[string]insertCache)
	usdaAgriculturalAcquisitionUpdateCacheMut       sync.RWMutex
	usdaAgriculturalAcquisitionUpdateCache          = make(map[string]updateCache)
	usdaAgriculturalAcquisitionUpsertCacheMut       sync.RWMutex
	usdaAgriculturalAcquisitionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var usdaAgriculturalAcquisitionAfterSelectHooks []UsdaAgriculturalAcquisitionHook

var usdaAgriculturalAcquisitionBeforeInsertHooks []UsdaAgriculturalAcquisitionHook
var usdaAgriculturalAcquisitionAfterInsertHooks []UsdaAgriculturalAcquisitionHook

var usdaAgriculturalAcquisitionBeforeUpdateHooks []UsdaAgriculturalAcquisitionHook
var usdaAgriculturalAcquisitionAfterUpdateHooks []UsdaAgriculturalAcquisitionHook

var usdaAgriculturalAcquisitionBeforeDeleteHooks []UsdaAgriculturalAcquisitionHook
var usdaAgriculturalAcquisitionAfterDeleteHooks []UsdaAgriculturalAcquisitionHook

var usdaAgriculturalAcquisitionBeforeUpsertHooks []UsdaAgriculturalAcquisitionHook
var usdaAgriculturalAcquisitionAfterUpsertHooks []UsdaAgriculturalAcquisitionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UsdaAgriculturalAcquisition) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaAgriculturalAcquisitionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UsdaAgriculturalAcquisition) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaAgriculturalAcquisitionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UsdaAgriculturalAcquisition) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaAgriculturalAcquisitionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UsdaAgriculturalAcquisition) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaAgriculturalAcquisitionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UsdaAgriculturalAcquisition) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaAgriculturalAcquisitionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UsdaAgriculturalAcquisition) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaAgriculturalAcquisitionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UsdaAgriculturalAcquisition) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaAgriculturalAcquisitionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UsdaAgriculturalAcquisition) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaAgriculturalAcquisitionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UsdaAgriculturalAcquisition) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaAgriculturalAcquisitionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUsdaAgriculturalAcquisitionHook registers your hook function for all future operations.
func AddUsdaAgriculturalAcquisitionHook(hookPoint boil.HookPoint, usdaAgriculturalAcquisitionHook UsdaAgriculturalAcquisitionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		usdaAgriculturalAcquisitionAfterSelectHooks = append(usdaAgriculturalAcquisitionAfterSelectHooks, usdaAgriculturalAcquisitionHook)
	case boil.BeforeInsertHook:
		usdaAgriculturalAcquisitionBeforeInsertHooks = append(usdaAgriculturalAcquisitionBeforeInsertHooks, usdaAgriculturalAcquisitionHook)
	case boil.AfterInsertHook:
		usdaAgriculturalAcquisitionAfterInsertHooks = append(usdaAgriculturalAcquisitionAfterInsertHooks, usdaAgriculturalAcquisitionHook)
	case boil.BeforeUpdateHook:
		usdaAgriculturalAcquisitionBeforeUpdateHooks = append(usdaAgriculturalAcquisitionBeforeUpdateHooks, usdaAgriculturalAcquisitionHook)
	case boil.AfterUpdateHook:
		usdaAgriculturalAcquisitionAfterUpdateHooks = append(usdaAgriculturalAcquisitionAfterUpdateHooks, usdaAgriculturalAcquisitionHook)
	case boil.BeforeDeleteHook:
		usdaAgriculturalAcquisitionBeforeDeleteHooks = append(usdaAgriculturalAcquisitionBeforeDeleteHooks, usdaAgriculturalAcquisitionHook)
	case boil.AfterDeleteHook:
		usdaAgriculturalAcquisitionAfterDeleteHooks = append(usdaAgriculturalAcquisitionAfterDeleteHooks, usdaAgriculturalAcquisitionHook)
	case boil.BeforeUpsertHook:
		usdaAgriculturalAcquisitionBeforeUpsertHooks = append(usdaAgriculturalAcquisitionBeforeUpsertHooks, usdaAgriculturalAcquisitionHook)
	case boil.AfterUpsertHook:
		usdaAgriculturalAcquisitionAfterUpsertHooks = append(usdaAgriculturalAcquisitionAfterUpsertHooks, usdaAgriculturalAcquisitionHook)
	}
}

// One returns a single usdaAgriculturalAcquisition record from the query.
func (q usdaAgriculturalAcquisitionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UsdaAgriculturalAcquisition, error) {
	o := &UsdaAgriculturalAcquisition{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for usda_agricultural_acquisition")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UsdaAgriculturalAcquisition records from the query.
func (q usdaAgriculturalAcquisitionQuery) All(ctx context.Context, exec boil.ContextExecutor) (UsdaAgriculturalAcquisitionSlice, error) {
	var o []*UsdaAgriculturalAcquisition

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UsdaAgriculturalAcquisition slice")
	}

	if len(usdaAgriculturalAcquisitionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UsdaAgriculturalAcquisition records in the query.
func (q usdaAgriculturalAcquisitionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count usda_agricultural_acquisition rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q usdaAgriculturalAcquisitionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if usda_agricultural_acquisition exists")
	}

	return count > 0, nil
}

// UsdaAgriculturalAcquisitions retrieves all the records using an executor.
func UsdaAgriculturalAcquisitions(mods ...qm.QueryMod) usdaAgriculturalAcquisitionQuery {
	mods = append(mods, qm.From("\"usda_agricultural_acquisition\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"usda_agricultural_acquisition\".*"})
	}

	return usdaAgriculturalAcquisitionQuery{q}
}

// FindUsdaAgriculturalAcquisition retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUsdaAgriculturalAcquisition(ctx context.Context, exec boil.ContextExecutor, fDCID int, selectCols ...string) (*UsdaAgriculturalAcquisition, error) {
	usdaAgriculturalAcquisitionObj := &UsdaAgriculturalAcquisition{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"usda_agricultural_acquisition\" where \"fdc_id\"=$1", sel,
	)

	q := queries.Raw(query, fDCID)

	err := q.Bind(ctx, exec, usdaAgriculturalAcquisitionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from usda_agricultural_acquisition")
	}

	if err = usdaAgriculturalAcquisitionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return usdaAgriculturalAcquisitionObj, err
	}

	return usdaAgriculturalAcquisitionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UsdaAgriculturalAcquisition) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no usda_agricultural_acquisition provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaAgriculturalAcquisitionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	usdaAgriculturalAcquisitionInsertCacheMut.RLock()
	cache, cached := usdaAgriculturalAcquisitionInsertCache[key]
	usdaAgriculturalAcquisitionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			usdaAgriculturalAcquisitionAllColumns,
			usdaAgriculturalAcquisitionColumnsWithDefault,
			usdaAgriculturalAcquisitionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(usdaAgriculturalAcquisitionType, usdaAgriculturalAcquisitionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(usdaAgriculturalAcquisitionType, usdaAgriculturalAcquisitionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"usda_agricultural_acquisition\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"usda_agricultural_acquisition\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into usda_agricultural_acquisition")
	}

	if !cached {
		usdaAgriculturalAcquisitionInsertCacheMut.Lock()
		usdaAgriculturalAcquisitionInsertCache[key] = cache
		usdaAgriculturalAcquisitionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UsdaAgriculturalAcquisition.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UsdaAgriculturalAcquisition) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	usdaAgriculturalAcquisitionUpdateCacheMut.RLock()
	cache, cached := usdaAgriculturalAcquisitionUpdateCache[key]
	usdaAgriculturalAcquisitionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			usdaAgriculturalAcquisitionAllColumns,
			usdaAgriculturalAcquisitionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update usda_agricultural_acquisition, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"usda_agricultural_acquisition\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, usdaAgriculturalAcquisitionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(usdaAgriculturalAcquisitionType, usdaAgriculturalAcquisitionMapping, append(wl, usdaAgriculturalAcquisitionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update usda_agricultural_acquisition row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for usda_agricultural_acquisition")
	}

	if !cached {
		usdaAgriculturalAcquisitionUpdateCacheMut.Lock()
		usdaAgriculturalAcquisitionUpdateCache[key] = cache
		usdaAgriculturalAcquisitionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q usdaAgriculturalAcquisitionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for usda_agricultural_acquisition")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for usda_agricultural_acquisition")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UsdaAgriculturalAcquisitionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaAgriculturalAcquisitionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"usda_agricultural_acquisition\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, usdaAgriculturalAcquisitionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in usdaAgriculturalAcquisition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all usdaAgriculturalAcquisition")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UsdaAgriculturalAcquisition) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no usda_agricultural_acquisition provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaAgriculturalAcquisitionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	usdaAgriculturalAcquisitionUpsertCacheMut.RLock()
	cache, cached := usdaAgriculturalAcquisitionUpsertCache[key]
	usdaAgriculturalAcquisitionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			usdaAgriculturalAcquisitionAllColumns,
			usdaAgriculturalAcquisitionColumnsWithDefault,
			usdaAgriculturalAcquisitionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			usdaAgriculturalAcquisitionAllColumns,
			usdaAgriculturalAcquisitionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert usda_agricultural_acquisition, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(usdaAgriculturalAcquisitionPrimaryKeyColumns))
			copy(conflict, usdaAgriculturalAcquisitionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"usda_agricultural_acquisition\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(usdaAgriculturalAcquisitionType, usdaAgriculturalAcquisitionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(usdaAgriculturalAcquisitionType, usdaAgriculturalAcquisitionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert usda_agricultural_acquisition")
	}

	if !cached {
		usdaAgriculturalAcquisitionUpsertCacheMut.Lock()
		usdaAgriculturalAcquisitionUpsertCache[key] = cache
		usdaAgriculturalAcquisitionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UsdaAgriculturalAcquisition record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UsdaAgriculturalAcquisition) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UsdaAgriculturalAcquisition provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), usdaAgriculturalAcquisitionPrimaryKeyMapping)
	sql := "DELETE FROM \"usda_agricultural_acquisition\" WHERE \"fdc_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from usda_agricultural_acquisition")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for usda_agricultural_acquisition")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q usdaAgriculturalAcquisitionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no usdaAgriculturalAcquisitionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from usda_agricultural_acquisition")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for usda_agricultural_acquisition")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UsdaAgriculturalAcquisitionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(usdaAgriculturalAcquisitionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaAgriculturalAcquisitionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"usda_agricultural_acquisition\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaAgriculturalAcquisitionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from usdaAgriculturalAcquisition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for usda_agricultural_acquisition")
	}

	if len(usdaAgriculturalAcquisitionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UsdaAgriculturalAcquisition) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUsdaAgriculturalAcquisition(ctx, exec, o.FDCID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsdaAgriculturalAcquisitionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UsdaAgriculturalAcquisitionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaAgriculturalAcquisitionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"usda_agricultural_acquisition\".* FROM \"usda_agricultural_acquisition\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaAgriculturalAcquisitionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UsdaAgriculturalAcquisitionSlice")
	}

	*o = slice

	return nil
}

// UsdaAgriculturalAcquisitionExists checks if the UsdaAgriculturalAcquisition row exists.
func UsdaAgriculturalAcquisitionExists(ctx context.Context, exec boil.ContextExecutor, fDCID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"usda_agricultural_acquisition\" where \"fdc_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, fDCID)
	}
	row := exec.QueryRowContext(ctx, sql, fDCID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if usda_agricultural_acquisition exists")
	}

	return exists, nil
}
