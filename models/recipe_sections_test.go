// Code generated by SQLBoiler 4.8.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRecipeSections(t *testing.T) {
	t.Parallel()

	query := RecipeSections()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRecipeSectionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSection{}
	if err = randomize.Struct(seed, o, recipeSectionDBTypes, true, recipeSectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecipeSections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecipeSectionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSection{}
	if err = randomize.Struct(seed, o, recipeSectionDBTypes, true, recipeSectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RecipeSections().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecipeSections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecipeSectionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSection{}
	if err = randomize.Struct(seed, o, recipeSectionDBTypes, true, recipeSectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RecipeSectionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecipeSections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecipeSectionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSection{}
	if err = randomize.Struct(seed, o, recipeSectionDBTypes, true, recipeSectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RecipeSectionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if RecipeSection exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RecipeSectionExists to return true, but got false.")
	}
}

func testRecipeSectionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSection{}
	if err = randomize.Struct(seed, o, recipeSectionDBTypes, true, recipeSectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	recipeSectionFound, err := FindRecipeSection(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if recipeSectionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRecipeSectionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSection{}
	if err = randomize.Struct(seed, o, recipeSectionDBTypes, true, recipeSectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RecipeSections().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRecipeSectionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSection{}
	if err = randomize.Struct(seed, o, recipeSectionDBTypes, true, recipeSectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RecipeSections().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRecipeSectionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	recipeSectionOne := &RecipeSection{}
	recipeSectionTwo := &RecipeSection{}
	if err = randomize.Struct(seed, recipeSectionOne, recipeSectionDBTypes, false, recipeSectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSection struct: %s", err)
	}
	if err = randomize.Struct(seed, recipeSectionTwo, recipeSectionDBTypes, false, recipeSectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = recipeSectionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = recipeSectionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RecipeSections().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRecipeSectionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	recipeSectionOne := &RecipeSection{}
	recipeSectionTwo := &RecipeSection{}
	if err = randomize.Struct(seed, recipeSectionOne, recipeSectionDBTypes, false, recipeSectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSection struct: %s", err)
	}
	if err = randomize.Struct(seed, recipeSectionTwo, recipeSectionDBTypes, false, recipeSectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = recipeSectionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = recipeSectionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecipeSections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func recipeSectionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RecipeSection) error {
	*o = RecipeSection{}
	return nil
}

func recipeSectionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RecipeSection) error {
	*o = RecipeSection{}
	return nil
}

func recipeSectionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RecipeSection) error {
	*o = RecipeSection{}
	return nil
}

func recipeSectionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RecipeSection) error {
	*o = RecipeSection{}
	return nil
}

func recipeSectionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RecipeSection) error {
	*o = RecipeSection{}
	return nil
}

func recipeSectionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RecipeSection) error {
	*o = RecipeSection{}
	return nil
}

func recipeSectionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RecipeSection) error {
	*o = RecipeSection{}
	return nil
}

func recipeSectionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RecipeSection) error {
	*o = RecipeSection{}
	return nil
}

func recipeSectionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RecipeSection) error {
	*o = RecipeSection{}
	return nil
}

func testRecipeSectionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RecipeSection{}
	o := &RecipeSection{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, recipeSectionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RecipeSection object: %s", err)
	}

	AddRecipeSectionHook(boil.BeforeInsertHook, recipeSectionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	recipeSectionBeforeInsertHooks = []RecipeSectionHook{}

	AddRecipeSectionHook(boil.AfterInsertHook, recipeSectionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	recipeSectionAfterInsertHooks = []RecipeSectionHook{}

	AddRecipeSectionHook(boil.AfterSelectHook, recipeSectionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	recipeSectionAfterSelectHooks = []RecipeSectionHook{}

	AddRecipeSectionHook(boil.BeforeUpdateHook, recipeSectionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	recipeSectionBeforeUpdateHooks = []RecipeSectionHook{}

	AddRecipeSectionHook(boil.AfterUpdateHook, recipeSectionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	recipeSectionAfterUpdateHooks = []RecipeSectionHook{}

	AddRecipeSectionHook(boil.BeforeDeleteHook, recipeSectionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	recipeSectionBeforeDeleteHooks = []RecipeSectionHook{}

	AddRecipeSectionHook(boil.AfterDeleteHook, recipeSectionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	recipeSectionAfterDeleteHooks = []RecipeSectionHook{}

	AddRecipeSectionHook(boil.BeforeUpsertHook, recipeSectionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	recipeSectionBeforeUpsertHooks = []RecipeSectionHook{}

	AddRecipeSectionHook(boil.AfterUpsertHook, recipeSectionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	recipeSectionAfterUpsertHooks = []RecipeSectionHook{}
}

func testRecipeSectionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSection{}
	if err = randomize.Struct(seed, o, recipeSectionDBTypes, true, recipeSectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecipeSections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRecipeSectionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSection{}
	if err = randomize.Struct(seed, o, recipeSectionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RecipeSection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(recipeSectionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RecipeSections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRecipeSectionToManySectionRecipeSectionIngredients(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RecipeSection
	var b, c RecipeSectionIngredient

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recipeSectionDBTypes, true, recipeSectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSection struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, recipeSectionIngredientDBTypes, false, recipeSectionIngredientColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, recipeSectionIngredientDBTypes, false, recipeSectionIngredientColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.Section = a.ID
	c.Section = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SectionRecipeSectionIngredients().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.Section == b.Section {
			bFound = true
		}
		if v.Section == c.Section {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RecipeSectionSlice{&a}
	if err = a.L.LoadSectionRecipeSectionIngredients(ctx, tx, false, (*[]*RecipeSection)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SectionRecipeSectionIngredients); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SectionRecipeSectionIngredients = nil
	if err = a.L.LoadSectionRecipeSectionIngredients(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SectionRecipeSectionIngredients); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRecipeSectionToManySectionRecipeSectionInstructions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RecipeSection
	var b, c RecipeSectionInstruction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recipeSectionDBTypes, true, recipeSectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSection struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, recipeSectionInstructionDBTypes, false, recipeSectionInstructionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, recipeSectionInstructionDBTypes, false, recipeSectionInstructionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.Section = a.ID
	c.Section = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SectionRecipeSectionInstructions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.Section == b.Section {
			bFound = true
		}
		if v.Section == c.Section {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RecipeSectionSlice{&a}
	if err = a.L.LoadSectionRecipeSectionInstructions(ctx, tx, false, (*[]*RecipeSection)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SectionRecipeSectionInstructions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SectionRecipeSectionInstructions = nil
	if err = a.L.LoadSectionRecipeSectionInstructions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SectionRecipeSectionInstructions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRecipeSectionToManyAddOpSectionRecipeSectionIngredients(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RecipeSection
	var b, c, d, e RecipeSectionIngredient

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recipeSectionDBTypes, false, strmangle.SetComplement(recipeSectionPrimaryKeyColumns, recipeSectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RecipeSectionIngredient{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, recipeSectionIngredientDBTypes, false, strmangle.SetComplement(recipeSectionIngredientPrimaryKeyColumns, recipeSectionIngredientColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*RecipeSectionIngredient{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSectionRecipeSectionIngredients(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Section {
			t.Error("foreign key was wrong value", a.ID, first.Section)
		}
		if a.ID != second.Section {
			t.Error("foreign key was wrong value", a.ID, second.Section)
		}

		if first.R.SectionRecipeSection != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SectionRecipeSection != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SectionRecipeSectionIngredients[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SectionRecipeSectionIngredients[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SectionRecipeSectionIngredients().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testRecipeSectionToManyAddOpSectionRecipeSectionInstructions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RecipeSection
	var b, c, d, e RecipeSectionInstruction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recipeSectionDBTypes, false, strmangle.SetComplement(recipeSectionPrimaryKeyColumns, recipeSectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RecipeSectionInstruction{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, recipeSectionInstructionDBTypes, false, strmangle.SetComplement(recipeSectionInstructionPrimaryKeyColumns, recipeSectionInstructionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*RecipeSectionInstruction{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSectionRecipeSectionInstructions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Section {
			t.Error("foreign key was wrong value", a.ID, first.Section)
		}
		if a.ID != second.Section {
			t.Error("foreign key was wrong value", a.ID, second.Section)
		}

		if first.R.SectionRecipeSection != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SectionRecipeSection != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SectionRecipeSectionInstructions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SectionRecipeSectionInstructions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SectionRecipeSectionInstructions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testRecipeSectionToOneRecipeDetailUsingRecipeSectionRecipeDetail(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RecipeSection
	var foreign RecipeDetail

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, recipeSectionDBTypes, false, recipeSectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSection struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, recipeDetailDBTypes, false, recipeDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeDetail struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.RecipeDetail = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.RecipeSectionRecipeDetail().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RecipeSectionSlice{&local}
	if err = local.L.LoadRecipeSectionRecipeDetail(ctx, tx, false, (*[]*RecipeSection)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RecipeSectionRecipeDetail == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.RecipeSectionRecipeDetail = nil
	if err = local.L.LoadRecipeSectionRecipeDetail(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RecipeSectionRecipeDetail == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRecipeSectionToOneSetOpRecipeDetailUsingRecipeSectionRecipeDetail(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RecipeSection
	var b, c RecipeDetail

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recipeSectionDBTypes, false, strmangle.SetComplement(recipeSectionPrimaryKeyColumns, recipeSectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, recipeDetailDBTypes, false, strmangle.SetComplement(recipeDetailPrimaryKeyColumns, recipeDetailColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, recipeDetailDBTypes, false, strmangle.SetComplement(recipeDetailPrimaryKeyColumns, recipeDetailColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*RecipeDetail{&b, &c} {
		err = a.SetRecipeSectionRecipeDetail(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.RecipeSectionRecipeDetail != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RecipeSections[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RecipeDetail != x.ID {
			t.Error("foreign key was wrong value", a.RecipeDetail)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RecipeDetail))
		reflect.Indirect(reflect.ValueOf(&a.RecipeDetail)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RecipeDetail != x.ID {
			t.Error("foreign key was wrong value", a.RecipeDetail, x.ID)
		}
	}
}

func testRecipeSectionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSection{}
	if err = randomize.Struct(seed, o, recipeSectionDBTypes, true, recipeSectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRecipeSectionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSection{}
	if err = randomize.Struct(seed, o, recipeSectionDBTypes, true, recipeSectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RecipeSectionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRecipeSectionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSection{}
	if err = randomize.Struct(seed, o, recipeSectionDBTypes, true, recipeSectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RecipeSections().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	recipeSectionDBTypes = map[string]string{`ID`: `text`, `RecipeDetail`: `text`, `Sort`: `integer`, `DurationTimerange`: `jsonb`}
	_                    = bytes.MinRead
)

func testRecipeSectionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(recipeSectionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(recipeSectionAllColumns) == len(recipeSectionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSection{}
	if err = randomize.Struct(seed, o, recipeSectionDBTypes, true, recipeSectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecipeSections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, recipeSectionDBTypes, true, recipeSectionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecipeSection struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRecipeSectionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(recipeSectionAllColumns) == len(recipeSectionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RecipeSection{}
	if err = randomize.Struct(seed, o, recipeSectionDBTypes, true, recipeSectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeSection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecipeSections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, recipeSectionDBTypes, true, recipeSectionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecipeSection struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(recipeSectionAllColumns, recipeSectionPrimaryKeyColumns) {
		fields = recipeSectionAllColumns
	} else {
		fields = strmangle.SetComplement(
			recipeSectionAllColumns,
			recipeSectionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RecipeSectionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRecipeSectionsUpsert(t *testing.T) {
	t.Parallel()

	if len(recipeSectionAllColumns) == len(recipeSectionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RecipeSection{}
	if err = randomize.Struct(seed, &o, recipeSectionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RecipeSection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RecipeSection: %s", err)
	}

	count, err := RecipeSections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, recipeSectionDBTypes, false, recipeSectionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecipeSection struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RecipeSection: %s", err)
	}

	count, err = RecipeSections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
