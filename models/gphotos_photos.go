// Code generated by SQLBoiler 4.10.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GphotosPhoto is an object representing the database table.
type GphotosPhoto struct {
	ID           string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	AlbumID      string      `boil:"album_id" json:"album_id" toml:"album_id" yaml:"album_id"`
	CreationTime time.Time   `boil:"creation_time" json:"creation_time" toml:"creation_time" yaml:"creation_time"`
	LastSeen     time.Time   `boil:"last_seen" json:"last_seen" toml:"last_seen" yaml:"last_seen"`
	BlurHash     null.String `boil:"blur_hash" json:"blur_hash,omitempty" toml:"blur_hash" yaml:"blur_hash,omitempty"`
	ImageID      string      `boil:"image_id" json:"image_id" toml:"image_id" yaml:"image_id"`

	R *gphotosPhotoR `boil:"rel" json:"rel" toml:"rel" yaml:"rel"`
	L gphotosPhotoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GphotosPhotoColumns = struct {
	ID           string
	AlbumID      string
	CreationTime string
	LastSeen     string
	BlurHash     string
	ImageID      string
}{
	ID:           "id",
	AlbumID:      "album_id",
	CreationTime: "creation_time",
	LastSeen:     "last_seen",
	BlurHash:     "blur_hash",
	ImageID:      "image_id",
}

var GphotosPhotoTableColumns = struct {
	ID           string
	AlbumID      string
	CreationTime string
	LastSeen     string
	BlurHash     string
	ImageID      string
}{
	ID:           "gphotos_photos.id",
	AlbumID:      "gphotos_photos.album_id",
	CreationTime: "gphotos_photos.creation_time",
	LastSeen:     "gphotos_photos.last_seen",
	BlurHash:     "gphotos_photos.blur_hash",
	ImageID:      "gphotos_photos.image_id",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var GphotosPhotoWhere = struct {
	ID           whereHelperstring
	AlbumID      whereHelperstring
	CreationTime whereHelpertime_Time
	LastSeen     whereHelpertime_Time
	BlurHash     whereHelpernull_String
	ImageID      whereHelperstring
}{
	ID:           whereHelperstring{field: "\"gphotos_photos\".\"id\""},
	AlbumID:      whereHelperstring{field: "\"gphotos_photos\".\"album_id\""},
	CreationTime: whereHelpertime_Time{field: "\"gphotos_photos\".\"creation_time\""},
	LastSeen:     whereHelpertime_Time{field: "\"gphotos_photos\".\"last_seen\""},
	BlurHash:     whereHelpernull_String{field: "\"gphotos_photos\".\"blur_hash\""},
	ImageID:      whereHelperstring{field: "\"gphotos_photos\".\"image_id\""},
}

// GphotosPhotoRels is where relationship names are stored.
var GphotosPhotoRels = struct {
	Album             string
	Image             string
	GphotoMealGphotos string
}{
	Album:             "Album",
	Image:             "Image",
	GphotoMealGphotos: "GphotoMealGphotos",
}

// gphotosPhotoR is where relationships are stored.
type gphotosPhotoR struct {
	Album             *GphotosAlbum   `boil:"Album" json:"Album" toml:"Album" yaml:"Album"`
	Image             *Image          `boil:"Image" json:"Image" toml:"Image" yaml:"Image"`
	GphotoMealGphotos MealGphotoSlice `boil:"GphotoMealGphotos" json:"GphotoMealGphotos" toml:"GphotoMealGphotos" yaml:"GphotoMealGphotos"`
}

// NewStruct creates a new relationship struct
func (*gphotosPhotoR) NewStruct() *gphotosPhotoR {
	return &gphotosPhotoR{}
}

// gphotosPhotoL is where Load methods for each relationship are stored.
type gphotosPhotoL struct{}

var (
	gphotosPhotoAllColumns            = []string{"id", "album_id", "creation_time", "last_seen", "blur_hash", "image_id"}
	gphotosPhotoColumnsWithoutDefault = []string{"id", "album_id", "creation_time", "image_id"}
	gphotosPhotoColumnsWithDefault    = []string{"last_seen", "blur_hash"}
	gphotosPhotoPrimaryKeyColumns     = []string{"id"}
	gphotosPhotoGeneratedColumns      = []string{}
)

type (
	// GphotosPhotoSlice is an alias for a slice of pointers to GphotosPhoto.
	// This should almost always be used instead of []GphotosPhoto.
	GphotosPhotoSlice []*GphotosPhoto
	// GphotosPhotoHook is the signature for custom GphotosPhoto hook methods
	GphotosPhotoHook func(context.Context, boil.ContextExecutor, *GphotosPhoto) error

	gphotosPhotoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	gphotosPhotoType                 = reflect.TypeOf(&GphotosPhoto{})
	gphotosPhotoMapping              = queries.MakeStructMapping(gphotosPhotoType)
	gphotosPhotoPrimaryKeyMapping, _ = queries.BindMapping(gphotosPhotoType, gphotosPhotoMapping, gphotosPhotoPrimaryKeyColumns)
	gphotosPhotoInsertCacheMut       sync.RWMutex
	gphotosPhotoInsertCache          = make(map[string]insertCache)
	gphotosPhotoUpdateCacheMut       sync.RWMutex
	gphotosPhotoUpdateCache          = make(map[string]updateCache)
	gphotosPhotoUpsertCacheMut       sync.RWMutex
	gphotosPhotoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var gphotosPhotoAfterSelectHooks []GphotosPhotoHook

var gphotosPhotoBeforeInsertHooks []GphotosPhotoHook
var gphotosPhotoAfterInsertHooks []GphotosPhotoHook

var gphotosPhotoBeforeUpdateHooks []GphotosPhotoHook
var gphotosPhotoAfterUpdateHooks []GphotosPhotoHook

var gphotosPhotoBeforeDeleteHooks []GphotosPhotoHook
var gphotosPhotoAfterDeleteHooks []GphotosPhotoHook

var gphotosPhotoBeforeUpsertHooks []GphotosPhotoHook
var gphotosPhotoAfterUpsertHooks []GphotosPhotoHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GphotosPhoto) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gphotosPhotoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GphotosPhoto) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gphotosPhotoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GphotosPhoto) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gphotosPhotoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GphotosPhoto) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gphotosPhotoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GphotosPhoto) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gphotosPhotoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GphotosPhoto) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gphotosPhotoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GphotosPhoto) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gphotosPhotoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GphotosPhoto) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gphotosPhotoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GphotosPhoto) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gphotosPhotoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGphotosPhotoHook registers your hook function for all future operations.
func AddGphotosPhotoHook(hookPoint boil.HookPoint, gphotosPhotoHook GphotosPhotoHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		gphotosPhotoAfterSelectHooks = append(gphotosPhotoAfterSelectHooks, gphotosPhotoHook)
	case boil.BeforeInsertHook:
		gphotosPhotoBeforeInsertHooks = append(gphotosPhotoBeforeInsertHooks, gphotosPhotoHook)
	case boil.AfterInsertHook:
		gphotosPhotoAfterInsertHooks = append(gphotosPhotoAfterInsertHooks, gphotosPhotoHook)
	case boil.BeforeUpdateHook:
		gphotosPhotoBeforeUpdateHooks = append(gphotosPhotoBeforeUpdateHooks, gphotosPhotoHook)
	case boil.AfterUpdateHook:
		gphotosPhotoAfterUpdateHooks = append(gphotosPhotoAfterUpdateHooks, gphotosPhotoHook)
	case boil.BeforeDeleteHook:
		gphotosPhotoBeforeDeleteHooks = append(gphotosPhotoBeforeDeleteHooks, gphotosPhotoHook)
	case boil.AfterDeleteHook:
		gphotosPhotoAfterDeleteHooks = append(gphotosPhotoAfterDeleteHooks, gphotosPhotoHook)
	case boil.BeforeUpsertHook:
		gphotosPhotoBeforeUpsertHooks = append(gphotosPhotoBeforeUpsertHooks, gphotosPhotoHook)
	case boil.AfterUpsertHook:
		gphotosPhotoAfterUpsertHooks = append(gphotosPhotoAfterUpsertHooks, gphotosPhotoHook)
	}
}

// One returns a single gphotosPhoto record from the query.
func (q gphotosPhotoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GphotosPhoto, error) {
	o := &GphotosPhoto{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for gphotos_photos")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GphotosPhoto records from the query.
func (q gphotosPhotoQuery) All(ctx context.Context, exec boil.ContextExecutor) (GphotosPhotoSlice, error) {
	var o []*GphotosPhoto

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GphotosPhoto slice")
	}

	if len(gphotosPhotoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GphotosPhoto records in the query.
func (q gphotosPhotoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count gphotos_photos rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q gphotosPhotoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if gphotos_photos exists")
	}

	return count > 0, nil
}

// Album pointed to by the foreign key.
func (o *GphotosPhoto) Album(mods ...qm.QueryMod) gphotosAlbumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AlbumID),
	}

	queryMods = append(queryMods, mods...)

	return GphotosAlbums(queryMods...)
}

// Image pointed to by the foreign key.
func (o *GphotosPhoto) Image(mods ...qm.QueryMod) imageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ImageID),
	}

	queryMods = append(queryMods, mods...)

	return Images(queryMods...)
}

// GphotoMealGphotos retrieves all the meal_gphoto's MealGphotos with an executor via gphotos_id column.
func (o *GphotosPhoto) GphotoMealGphotos(mods ...qm.QueryMod) mealGphotoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"meal_gphoto\".\"gphotos_id\"=?", o.ID),
	)

	return MealGphotos(queryMods...)
}

// LoadAlbum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (gphotosPhotoL) LoadAlbum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGphotosPhoto interface{}, mods queries.Applicator) error {
	var slice []*GphotosPhoto
	var object *GphotosPhoto

	if singular {
		object = maybeGphotosPhoto.(*GphotosPhoto)
	} else {
		slice = *maybeGphotosPhoto.(*[]*GphotosPhoto)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &gphotosPhotoR{}
		}
		args = append(args, object.AlbumID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gphotosPhotoR{}
			}

			for _, a := range args {
				if a == obj.AlbumID {
					continue Outer
				}
			}

			args = append(args, obj.AlbumID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`gphotos_albums`),
		qm.WhereIn(`gphotos_albums.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GphotosAlbum")
	}

	var resultSlice []*GphotosAlbum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GphotosAlbum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for gphotos_albums")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for gphotos_albums")
	}

	if len(gphotosPhotoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Album = foreign
		if foreign.R == nil {
			foreign.R = &gphotosAlbumR{}
		}
		foreign.R.AlbumGphotosPhotos = append(foreign.R.AlbumGphotosPhotos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AlbumID == foreign.ID {
				local.R.Album = foreign
				if foreign.R == nil {
					foreign.R = &gphotosAlbumR{}
				}
				foreign.R.AlbumGphotosPhotos = append(foreign.R.AlbumGphotosPhotos, local)
				break
			}
		}
	}

	return nil
}

// LoadImage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (gphotosPhotoL) LoadImage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGphotosPhoto interface{}, mods queries.Applicator) error {
	var slice []*GphotosPhoto
	var object *GphotosPhoto

	if singular {
		object = maybeGphotosPhoto.(*GphotosPhoto)
	} else {
		slice = *maybeGphotosPhoto.(*[]*GphotosPhoto)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &gphotosPhotoR{}
		}
		args = append(args, object.ImageID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gphotosPhotoR{}
			}

			for _, a := range args {
				if a == obj.ImageID {
					continue Outer
				}
			}

			args = append(args, obj.ImageID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`images`),
		qm.WhereIn(`images.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Image")
	}

	var resultSlice []*Image
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Image")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for images")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for images")
	}

	if len(gphotosPhotoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Image = foreign
		if foreign.R == nil {
			foreign.R = &imageR{}
		}
		foreign.R.GphotosPhotos = append(foreign.R.GphotosPhotos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ImageID == foreign.ID {
				local.R.Image = foreign
				if foreign.R == nil {
					foreign.R = &imageR{}
				}
				foreign.R.GphotosPhotos = append(foreign.R.GphotosPhotos, local)
				break
			}
		}
	}

	return nil
}

// LoadGphotoMealGphotos allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (gphotosPhotoL) LoadGphotoMealGphotos(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGphotosPhoto interface{}, mods queries.Applicator) error {
	var slice []*GphotosPhoto
	var object *GphotosPhoto

	if singular {
		object = maybeGphotosPhoto.(*GphotosPhoto)
	} else {
		slice = *maybeGphotosPhoto.(*[]*GphotosPhoto)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &gphotosPhotoR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gphotosPhotoR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`meal_gphoto`),
		qm.WhereIn(`meal_gphoto.gphotos_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load meal_gphoto")
	}

	var resultSlice []*MealGphoto
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice meal_gphoto")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on meal_gphoto")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for meal_gphoto")
	}

	if len(mealGphotoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GphotoMealGphotos = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mealGphotoR{}
			}
			foreign.R.Gphoto = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.GphotosID {
				local.R.GphotoMealGphotos = append(local.R.GphotoMealGphotos, foreign)
				if foreign.R == nil {
					foreign.R = &mealGphotoR{}
				}
				foreign.R.Gphoto = local
				break
			}
		}
	}

	return nil
}

// SetAlbum of the gphotosPhoto to the related item.
// Sets o.R.Album to related.
// Adds o to related.R.AlbumGphotosPhotos.
func (o *GphotosPhoto) SetAlbum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *GphotosAlbum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"gphotos_photos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"album_id"}),
		strmangle.WhereClause("\"", "\"", 2, gphotosPhotoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AlbumID = related.ID
	if o.R == nil {
		o.R = &gphotosPhotoR{
			Album: related,
		}
	} else {
		o.R.Album = related
	}

	if related.R == nil {
		related.R = &gphotosAlbumR{
			AlbumGphotosPhotos: GphotosPhotoSlice{o},
		}
	} else {
		related.R.AlbumGphotosPhotos = append(related.R.AlbumGphotosPhotos, o)
	}

	return nil
}

// SetImage of the gphotosPhoto to the related item.
// Sets o.R.Image to related.
// Adds o to related.R.GphotosPhotos.
func (o *GphotosPhoto) SetImage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Image) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"gphotos_photos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"image_id"}),
		strmangle.WhereClause("\"", "\"", 2, gphotosPhotoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ImageID = related.ID
	if o.R == nil {
		o.R = &gphotosPhotoR{
			Image: related,
		}
	} else {
		o.R.Image = related
	}

	if related.R == nil {
		related.R = &imageR{
			GphotosPhotos: GphotosPhotoSlice{o},
		}
	} else {
		related.R.GphotosPhotos = append(related.R.GphotosPhotos, o)
	}

	return nil
}

// AddGphotoMealGphotos adds the given related objects to the existing relationships
// of the gphotos_photo, optionally inserting them as new records.
// Appends related to o.R.GphotoMealGphotos.
// Sets related.R.Gphoto appropriately.
func (o *GphotosPhoto) AddGphotoMealGphotos(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MealGphoto) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GphotosID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"meal_gphoto\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"gphotos_id"}),
				strmangle.WhereClause("\"", "\"", 2, mealGphotoPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.MealID, rel.GphotosID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GphotosID = o.ID
		}
	}

	if o.R == nil {
		o.R = &gphotosPhotoR{
			GphotoMealGphotos: related,
		}
	} else {
		o.R.GphotoMealGphotos = append(o.R.GphotoMealGphotos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mealGphotoR{
				Gphoto: o,
			}
		} else {
			rel.R.Gphoto = o
		}
	}
	return nil
}

// GphotosPhotos retrieves all the records using an executor.
func GphotosPhotos(mods ...qm.QueryMod) gphotosPhotoQuery {
	mods = append(mods, qm.From("\"gphotos_photos\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"gphotos_photos\".*"})
	}

	return gphotosPhotoQuery{q}
}

// FindGphotosPhoto retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGphotosPhoto(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*GphotosPhoto, error) {
	gphotosPhotoObj := &GphotosPhoto{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"gphotos_photos\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, gphotosPhotoObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from gphotos_photos")
	}

	if err = gphotosPhotoObj.doAfterSelectHooks(ctx, exec); err != nil {
		return gphotosPhotoObj, err
	}

	return gphotosPhotoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GphotosPhoto) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no gphotos_photos provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gphotosPhotoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	gphotosPhotoInsertCacheMut.RLock()
	cache, cached := gphotosPhotoInsertCache[key]
	gphotosPhotoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			gphotosPhotoAllColumns,
			gphotosPhotoColumnsWithDefault,
			gphotosPhotoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(gphotosPhotoType, gphotosPhotoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(gphotosPhotoType, gphotosPhotoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"gphotos_photos\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"gphotos_photos\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into gphotos_photos")
	}

	if !cached {
		gphotosPhotoInsertCacheMut.Lock()
		gphotosPhotoInsertCache[key] = cache
		gphotosPhotoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GphotosPhoto.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GphotosPhoto) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	gphotosPhotoUpdateCacheMut.RLock()
	cache, cached := gphotosPhotoUpdateCache[key]
	gphotosPhotoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			gphotosPhotoAllColumns,
			gphotosPhotoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update gphotos_photos, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"gphotos_photos\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, gphotosPhotoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(gphotosPhotoType, gphotosPhotoMapping, append(wl, gphotosPhotoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update gphotos_photos row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for gphotos_photos")
	}

	if !cached {
		gphotosPhotoUpdateCacheMut.Lock()
		gphotosPhotoUpdateCache[key] = cache
		gphotosPhotoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q gphotosPhotoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for gphotos_photos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for gphotos_photos")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GphotosPhotoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gphotosPhotoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"gphotos_photos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, gphotosPhotoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in gphotosPhoto slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all gphotosPhoto")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GphotosPhoto) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no gphotos_photos provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gphotosPhotoColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	gphotosPhotoUpsertCacheMut.RLock()
	cache, cached := gphotosPhotoUpsertCache[key]
	gphotosPhotoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			gphotosPhotoAllColumns,
			gphotosPhotoColumnsWithDefault,
			gphotosPhotoColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			gphotosPhotoAllColumns,
			gphotosPhotoPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert gphotos_photos, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(gphotosPhotoPrimaryKeyColumns))
			copy(conflict, gphotosPhotoPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"gphotos_photos\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(gphotosPhotoType, gphotosPhotoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(gphotosPhotoType, gphotosPhotoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert gphotos_photos")
	}

	if !cached {
		gphotosPhotoUpsertCacheMut.Lock()
		gphotosPhotoUpsertCache[key] = cache
		gphotosPhotoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GphotosPhoto record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GphotosPhoto) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GphotosPhoto provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), gphotosPhotoPrimaryKeyMapping)
	sql := "DELETE FROM \"gphotos_photos\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from gphotos_photos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for gphotos_photos")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q gphotosPhotoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no gphotosPhotoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from gphotos_photos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for gphotos_photos")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GphotosPhotoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(gphotosPhotoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gphotosPhotoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"gphotos_photos\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gphotosPhotoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from gphotosPhoto slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for gphotos_photos")
	}

	if len(gphotosPhotoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GphotosPhoto) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGphotosPhoto(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GphotosPhotoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GphotosPhotoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gphotosPhotoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"gphotos_photos\".* FROM \"gphotos_photos\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gphotosPhotoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GphotosPhotoSlice")
	}

	*o = slice

	return nil
}

// GphotosPhotoExists checks if the GphotosPhoto row exists.
func GphotosPhotoExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"gphotos_photos\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if gphotos_photos exists")
	}

	return exists, nil
}
