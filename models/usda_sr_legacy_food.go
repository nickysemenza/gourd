// Code generated by SQLBoiler 4.10.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UsdaSRLegacyFood is an object representing the database table.
type UsdaSRLegacyFood struct {
	FDCID     int      `boil:"fdc_id" json:"fdc_id" toml:"fdc_id" yaml:"fdc_id"`
	NDBNumber null.Int `boil:"ndb_number" json:"ndb_number,omitempty" toml:"ndb_number" yaml:"ndb_number,omitempty"`

	R *usdaSRLegacyFoodR `boil:"rel" json:"rel" toml:"rel" yaml:"rel"`
	L usdaSRLegacyFoodL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UsdaSRLegacyFoodColumns = struct {
	FDCID     string
	NDBNumber string
}{
	FDCID:     "fdc_id",
	NDBNumber: "ndb_number",
}

var UsdaSRLegacyFoodTableColumns = struct {
	FDCID     string
	NDBNumber string
}{
	FDCID:     "usda_sr_legacy_food.fdc_id",
	NDBNumber: "usda_sr_legacy_food.ndb_number",
}

// Generated where

var UsdaSRLegacyFoodWhere = struct {
	FDCID     whereHelperint
	NDBNumber whereHelpernull_Int
}{
	FDCID:     whereHelperint{field: "\"usda_sr_legacy_food\".\"fdc_id\""},
	NDBNumber: whereHelpernull_Int{field: "\"usda_sr_legacy_food\".\"ndb_number\""},
}

// UsdaSRLegacyFoodRels is where relationship names are stored.
var UsdaSRLegacyFoodRels = struct {
	FDC string
}{
	FDC: "FDC",
}

// usdaSRLegacyFoodR is where relationships are stored.
type usdaSRLegacyFoodR struct {
	FDC *UsdaFood `boil:"FDC" json:"FDC" toml:"FDC" yaml:"FDC"`
}

// NewStruct creates a new relationship struct
func (*usdaSRLegacyFoodR) NewStruct() *usdaSRLegacyFoodR {
	return &usdaSRLegacyFoodR{}
}

// usdaSRLegacyFoodL is where Load methods for each relationship are stored.
type usdaSRLegacyFoodL struct{}

var (
	usdaSRLegacyFoodAllColumns            = []string{"fdc_id", "ndb_number"}
	usdaSRLegacyFoodColumnsWithoutDefault = []string{"fdc_id"}
	usdaSRLegacyFoodColumnsWithDefault    = []string{"ndb_number"}
	usdaSRLegacyFoodPrimaryKeyColumns     = []string{"fdc_id"}
	usdaSRLegacyFoodGeneratedColumns      = []string{}
)

type (
	// UsdaSRLegacyFoodSlice is an alias for a slice of pointers to UsdaSRLegacyFood.
	// This should almost always be used instead of []UsdaSRLegacyFood.
	UsdaSRLegacyFoodSlice []*UsdaSRLegacyFood
	// UsdaSRLegacyFoodHook is the signature for custom UsdaSRLegacyFood hook methods
	UsdaSRLegacyFoodHook func(context.Context, boil.ContextExecutor, *UsdaSRLegacyFood) error

	usdaSRLegacyFoodQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usdaSRLegacyFoodType                 = reflect.TypeOf(&UsdaSRLegacyFood{})
	usdaSRLegacyFoodMapping              = queries.MakeStructMapping(usdaSRLegacyFoodType)
	usdaSRLegacyFoodPrimaryKeyMapping, _ = queries.BindMapping(usdaSRLegacyFoodType, usdaSRLegacyFoodMapping, usdaSRLegacyFoodPrimaryKeyColumns)
	usdaSRLegacyFoodInsertCacheMut       sync.RWMutex
	usdaSRLegacyFoodInsertCache          = make(map[string]insertCache)
	usdaSRLegacyFoodUpdateCacheMut       sync.RWMutex
	usdaSRLegacyFoodUpdateCache          = make(map[string]updateCache)
	usdaSRLegacyFoodUpsertCacheMut       sync.RWMutex
	usdaSRLegacyFoodUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var usdaSRLegacyFoodAfterSelectHooks []UsdaSRLegacyFoodHook

var usdaSRLegacyFoodBeforeInsertHooks []UsdaSRLegacyFoodHook
var usdaSRLegacyFoodAfterInsertHooks []UsdaSRLegacyFoodHook

var usdaSRLegacyFoodBeforeUpdateHooks []UsdaSRLegacyFoodHook
var usdaSRLegacyFoodAfterUpdateHooks []UsdaSRLegacyFoodHook

var usdaSRLegacyFoodBeforeDeleteHooks []UsdaSRLegacyFoodHook
var usdaSRLegacyFoodAfterDeleteHooks []UsdaSRLegacyFoodHook

var usdaSRLegacyFoodBeforeUpsertHooks []UsdaSRLegacyFoodHook
var usdaSRLegacyFoodAfterUpsertHooks []UsdaSRLegacyFoodHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UsdaSRLegacyFood) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaSRLegacyFoodAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UsdaSRLegacyFood) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaSRLegacyFoodBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UsdaSRLegacyFood) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaSRLegacyFoodAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UsdaSRLegacyFood) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaSRLegacyFoodBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UsdaSRLegacyFood) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaSRLegacyFoodAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UsdaSRLegacyFood) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaSRLegacyFoodBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UsdaSRLegacyFood) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaSRLegacyFoodAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UsdaSRLegacyFood) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaSRLegacyFoodBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UsdaSRLegacyFood) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaSRLegacyFoodAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUsdaSRLegacyFoodHook registers your hook function for all future operations.
func AddUsdaSRLegacyFoodHook(hookPoint boil.HookPoint, usdaSRLegacyFoodHook UsdaSRLegacyFoodHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		usdaSRLegacyFoodAfterSelectHooks = append(usdaSRLegacyFoodAfterSelectHooks, usdaSRLegacyFoodHook)
	case boil.BeforeInsertHook:
		usdaSRLegacyFoodBeforeInsertHooks = append(usdaSRLegacyFoodBeforeInsertHooks, usdaSRLegacyFoodHook)
	case boil.AfterInsertHook:
		usdaSRLegacyFoodAfterInsertHooks = append(usdaSRLegacyFoodAfterInsertHooks, usdaSRLegacyFoodHook)
	case boil.BeforeUpdateHook:
		usdaSRLegacyFoodBeforeUpdateHooks = append(usdaSRLegacyFoodBeforeUpdateHooks, usdaSRLegacyFoodHook)
	case boil.AfterUpdateHook:
		usdaSRLegacyFoodAfterUpdateHooks = append(usdaSRLegacyFoodAfterUpdateHooks, usdaSRLegacyFoodHook)
	case boil.BeforeDeleteHook:
		usdaSRLegacyFoodBeforeDeleteHooks = append(usdaSRLegacyFoodBeforeDeleteHooks, usdaSRLegacyFoodHook)
	case boil.AfterDeleteHook:
		usdaSRLegacyFoodAfterDeleteHooks = append(usdaSRLegacyFoodAfterDeleteHooks, usdaSRLegacyFoodHook)
	case boil.BeforeUpsertHook:
		usdaSRLegacyFoodBeforeUpsertHooks = append(usdaSRLegacyFoodBeforeUpsertHooks, usdaSRLegacyFoodHook)
	case boil.AfterUpsertHook:
		usdaSRLegacyFoodAfterUpsertHooks = append(usdaSRLegacyFoodAfterUpsertHooks, usdaSRLegacyFoodHook)
	}
}

// One returns a single usdaSRLegacyFood record from the query.
func (q usdaSRLegacyFoodQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UsdaSRLegacyFood, error) {
	o := &UsdaSRLegacyFood{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for usda_sr_legacy_food")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UsdaSRLegacyFood records from the query.
func (q usdaSRLegacyFoodQuery) All(ctx context.Context, exec boil.ContextExecutor) (UsdaSRLegacyFoodSlice, error) {
	var o []*UsdaSRLegacyFood

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UsdaSRLegacyFood slice")
	}

	if len(usdaSRLegacyFoodAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UsdaSRLegacyFood records in the query.
func (q usdaSRLegacyFoodQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count usda_sr_legacy_food rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q usdaSRLegacyFoodQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if usda_sr_legacy_food exists")
	}

	return count > 0, nil
}

// FDC pointed to by the foreign key.
func (o *UsdaSRLegacyFood) FDC(mods ...qm.QueryMod) usdaFoodQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"fdc_id\" = ?", o.FDCID),
	}

	queryMods = append(queryMods, mods...)

	return UsdaFoods(queryMods...)
}

// LoadFDC allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (usdaSRLegacyFoodL) LoadFDC(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsdaSRLegacyFood interface{}, mods queries.Applicator) error {
	var slice []*UsdaSRLegacyFood
	var object *UsdaSRLegacyFood

	if singular {
		object = maybeUsdaSRLegacyFood.(*UsdaSRLegacyFood)
	} else {
		slice = *maybeUsdaSRLegacyFood.(*[]*UsdaSRLegacyFood)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &usdaSRLegacyFoodR{}
		}
		args = append(args, object.FDCID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usdaSRLegacyFoodR{}
			}

			for _, a := range args {
				if a == obj.FDCID {
					continue Outer
				}
			}

			args = append(args, obj.FDCID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`usda_food`),
		qm.WhereIn(`usda_food.fdc_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UsdaFood")
	}

	var resultSlice []*UsdaFood
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UsdaFood")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for usda_food")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usda_food")
	}

	if len(usdaSRLegacyFoodAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FDC = foreign
		if foreign.R == nil {
			foreign.R = &usdaFoodR{}
		}
		foreign.R.FDCUsdaSRLegacyFood = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FDCID == foreign.FDCID {
				local.R.FDC = foreign
				if foreign.R == nil {
					foreign.R = &usdaFoodR{}
				}
				foreign.R.FDCUsdaSRLegacyFood = local
				break
			}
		}
	}

	return nil
}

// SetFDC of the usdaSRLegacyFood to the related item.
// Sets o.R.FDC to related.
// Adds o to related.R.FDCUsdaSRLegacyFood.
func (o *UsdaSRLegacyFood) SetFDC(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UsdaFood) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"usda_sr_legacy_food\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"fdc_id"}),
		strmangle.WhereClause("\"", "\"", 2, usdaSRLegacyFoodPrimaryKeyColumns),
	)
	values := []interface{}{related.FDCID, o.FDCID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FDCID = related.FDCID
	if o.R == nil {
		o.R = &usdaSRLegacyFoodR{
			FDC: related,
		}
	} else {
		o.R.FDC = related
	}

	if related.R == nil {
		related.R = &usdaFoodR{
			FDCUsdaSRLegacyFood: o,
		}
	} else {
		related.R.FDCUsdaSRLegacyFood = o
	}

	return nil
}

// UsdaSRLegacyFoods retrieves all the records using an executor.
func UsdaSRLegacyFoods(mods ...qm.QueryMod) usdaSRLegacyFoodQuery {
	mods = append(mods, qm.From("\"usda_sr_legacy_food\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"usda_sr_legacy_food\".*"})
	}

	return usdaSRLegacyFoodQuery{q}
}

// FindUsdaSRLegacyFood retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUsdaSRLegacyFood(ctx context.Context, exec boil.ContextExecutor, fDCID int, selectCols ...string) (*UsdaSRLegacyFood, error) {
	usdaSRLegacyFoodObj := &UsdaSRLegacyFood{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"usda_sr_legacy_food\" where \"fdc_id\"=$1", sel,
	)

	q := queries.Raw(query, fDCID)

	err := q.Bind(ctx, exec, usdaSRLegacyFoodObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from usda_sr_legacy_food")
	}

	if err = usdaSRLegacyFoodObj.doAfterSelectHooks(ctx, exec); err != nil {
		return usdaSRLegacyFoodObj, err
	}

	return usdaSRLegacyFoodObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UsdaSRLegacyFood) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no usda_sr_legacy_food provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaSRLegacyFoodColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	usdaSRLegacyFoodInsertCacheMut.RLock()
	cache, cached := usdaSRLegacyFoodInsertCache[key]
	usdaSRLegacyFoodInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			usdaSRLegacyFoodAllColumns,
			usdaSRLegacyFoodColumnsWithDefault,
			usdaSRLegacyFoodColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(usdaSRLegacyFoodType, usdaSRLegacyFoodMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(usdaSRLegacyFoodType, usdaSRLegacyFoodMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"usda_sr_legacy_food\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"usda_sr_legacy_food\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into usda_sr_legacy_food")
	}

	if !cached {
		usdaSRLegacyFoodInsertCacheMut.Lock()
		usdaSRLegacyFoodInsertCache[key] = cache
		usdaSRLegacyFoodInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UsdaSRLegacyFood.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UsdaSRLegacyFood) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	usdaSRLegacyFoodUpdateCacheMut.RLock()
	cache, cached := usdaSRLegacyFoodUpdateCache[key]
	usdaSRLegacyFoodUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			usdaSRLegacyFoodAllColumns,
			usdaSRLegacyFoodPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update usda_sr_legacy_food, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"usda_sr_legacy_food\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, usdaSRLegacyFoodPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(usdaSRLegacyFoodType, usdaSRLegacyFoodMapping, append(wl, usdaSRLegacyFoodPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update usda_sr_legacy_food row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for usda_sr_legacy_food")
	}

	if !cached {
		usdaSRLegacyFoodUpdateCacheMut.Lock()
		usdaSRLegacyFoodUpdateCache[key] = cache
		usdaSRLegacyFoodUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q usdaSRLegacyFoodQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for usda_sr_legacy_food")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for usda_sr_legacy_food")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UsdaSRLegacyFoodSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaSRLegacyFoodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"usda_sr_legacy_food\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, usdaSRLegacyFoodPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in usdaSRLegacyFood slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all usdaSRLegacyFood")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UsdaSRLegacyFood) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no usda_sr_legacy_food provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaSRLegacyFoodColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	usdaSRLegacyFoodUpsertCacheMut.RLock()
	cache, cached := usdaSRLegacyFoodUpsertCache[key]
	usdaSRLegacyFoodUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			usdaSRLegacyFoodAllColumns,
			usdaSRLegacyFoodColumnsWithDefault,
			usdaSRLegacyFoodColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			usdaSRLegacyFoodAllColumns,
			usdaSRLegacyFoodPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert usda_sr_legacy_food, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(usdaSRLegacyFoodPrimaryKeyColumns))
			copy(conflict, usdaSRLegacyFoodPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"usda_sr_legacy_food\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(usdaSRLegacyFoodType, usdaSRLegacyFoodMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(usdaSRLegacyFoodType, usdaSRLegacyFoodMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert usda_sr_legacy_food")
	}

	if !cached {
		usdaSRLegacyFoodUpsertCacheMut.Lock()
		usdaSRLegacyFoodUpsertCache[key] = cache
		usdaSRLegacyFoodUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UsdaSRLegacyFood record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UsdaSRLegacyFood) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UsdaSRLegacyFood provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), usdaSRLegacyFoodPrimaryKeyMapping)
	sql := "DELETE FROM \"usda_sr_legacy_food\" WHERE \"fdc_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from usda_sr_legacy_food")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for usda_sr_legacy_food")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q usdaSRLegacyFoodQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no usdaSRLegacyFoodQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from usda_sr_legacy_food")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for usda_sr_legacy_food")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UsdaSRLegacyFoodSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(usdaSRLegacyFoodBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaSRLegacyFoodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"usda_sr_legacy_food\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaSRLegacyFoodPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from usdaSRLegacyFood slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for usda_sr_legacy_food")
	}

	if len(usdaSRLegacyFoodAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UsdaSRLegacyFood) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUsdaSRLegacyFood(ctx, exec, o.FDCID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsdaSRLegacyFoodSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UsdaSRLegacyFoodSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaSRLegacyFoodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"usda_sr_legacy_food\".* FROM \"usda_sr_legacy_food\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaSRLegacyFoodPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UsdaSRLegacyFoodSlice")
	}

	*o = slice

	return nil
}

// UsdaSRLegacyFoodExists checks if the UsdaSRLegacyFood row exists.
func UsdaSRLegacyFoodExists(ctx context.Context, exec boil.ContextExecutor, fDCID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"usda_sr_legacy_food\" where \"fdc_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, fDCID)
	}
	row := exec.QueryRowContext(ctx, sql, fDCID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if usda_sr_legacy_food exists")
	}

	return exists, nil
}
