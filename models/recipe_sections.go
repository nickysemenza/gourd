// Code generated by SQLBoiler 4.10.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RecipeSection is an object representing the database table.
type RecipeSection struct {
	ID                string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	RecipeDetailID    string    `boil:"recipe_detail_id" json:"recipe_detail_id" toml:"recipe_detail_id" yaml:"recipe_detail_id"`
	Sort              null.Int  `boil:"sort" json:"sort,omitempty" toml:"sort" yaml:"sort,omitempty"`
	DurationTimerange null.JSON `boil:"duration_timerange" json:"duration_timerange,omitempty" toml:"duration_timerange" yaml:"duration_timerange,omitempty"`

	R *recipeSectionR `boil:"rel" json:"rel" toml:"rel" yaml:"rel"`
	L recipeSectionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RecipeSectionColumns = struct {
	ID                string
	RecipeDetailID    string
	Sort              string
	DurationTimerange string
}{
	ID:                "id",
	RecipeDetailID:    "recipe_detail_id",
	Sort:              "sort",
	DurationTimerange: "duration_timerange",
}

var RecipeSectionTableColumns = struct {
	ID                string
	RecipeDetailID    string
	Sort              string
	DurationTimerange string
}{
	ID:                "recipe_sections.id",
	RecipeDetailID:    "recipe_sections.recipe_detail_id",
	Sort:              "recipe_sections.sort",
	DurationTimerange: "recipe_sections.duration_timerange",
}

// Generated where

var RecipeSectionWhere = struct {
	ID                whereHelperstring
	RecipeDetailID    whereHelperstring
	Sort              whereHelpernull_Int
	DurationTimerange whereHelpernull_JSON
}{
	ID:                whereHelperstring{field: "\"recipe_sections\".\"id\""},
	RecipeDetailID:    whereHelperstring{field: "\"recipe_sections\".\"recipe_detail_id\""},
	Sort:              whereHelpernull_Int{field: "\"recipe_sections\".\"sort\""},
	DurationTimerange: whereHelpernull_JSON{field: "\"recipe_sections\".\"duration_timerange\""},
}

// RecipeSectionRels is where relationship names are stored.
var RecipeSectionRels = struct {
	RecipeDetail                     string
	SectionRecipeSectionIngredients  string
	SectionRecipeSectionInstructions string
}{
	RecipeDetail:                     "RecipeDetail",
	SectionRecipeSectionIngredients:  "SectionRecipeSectionIngredients",
	SectionRecipeSectionInstructions: "SectionRecipeSectionInstructions",
}

// recipeSectionR is where relationships are stored.
type recipeSectionR struct {
	RecipeDetail                     *RecipeDetail                 `boil:"RecipeDetail" json:"RecipeDetail" toml:"RecipeDetail" yaml:"RecipeDetail"`
	SectionRecipeSectionIngredients  RecipeSectionIngredientSlice  `boil:"SectionRecipeSectionIngredients" json:"SectionRecipeSectionIngredients" toml:"SectionRecipeSectionIngredients" yaml:"SectionRecipeSectionIngredients"`
	SectionRecipeSectionInstructions RecipeSectionInstructionSlice `boil:"SectionRecipeSectionInstructions" json:"SectionRecipeSectionInstructions" toml:"SectionRecipeSectionInstructions" yaml:"SectionRecipeSectionInstructions"`
}

// NewStruct creates a new relationship struct
func (*recipeSectionR) NewStruct() *recipeSectionR {
	return &recipeSectionR{}
}

// recipeSectionL is where Load methods for each relationship are stored.
type recipeSectionL struct{}

var (
	recipeSectionAllColumns            = []string{"id", "recipe_detail_id", "sort", "duration_timerange"}
	recipeSectionColumnsWithoutDefault = []string{"id", "recipe_detail_id"}
	recipeSectionColumnsWithDefault    = []string{"sort", "duration_timerange"}
	recipeSectionPrimaryKeyColumns     = []string{"id"}
	recipeSectionGeneratedColumns      = []string{}
)

type (
	// RecipeSectionSlice is an alias for a slice of pointers to RecipeSection.
	// This should almost always be used instead of []RecipeSection.
	RecipeSectionSlice []*RecipeSection
	// RecipeSectionHook is the signature for custom RecipeSection hook methods
	RecipeSectionHook func(context.Context, boil.ContextExecutor, *RecipeSection) error

	recipeSectionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	recipeSectionType                 = reflect.TypeOf(&RecipeSection{})
	recipeSectionMapping              = queries.MakeStructMapping(recipeSectionType)
	recipeSectionPrimaryKeyMapping, _ = queries.BindMapping(recipeSectionType, recipeSectionMapping, recipeSectionPrimaryKeyColumns)
	recipeSectionInsertCacheMut       sync.RWMutex
	recipeSectionInsertCache          = make(map[string]insertCache)
	recipeSectionUpdateCacheMut       sync.RWMutex
	recipeSectionUpdateCache          = make(map[string]updateCache)
	recipeSectionUpsertCacheMut       sync.RWMutex
	recipeSectionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var recipeSectionAfterSelectHooks []RecipeSectionHook

var recipeSectionBeforeInsertHooks []RecipeSectionHook
var recipeSectionAfterInsertHooks []RecipeSectionHook

var recipeSectionBeforeUpdateHooks []RecipeSectionHook
var recipeSectionAfterUpdateHooks []RecipeSectionHook

var recipeSectionBeforeDeleteHooks []RecipeSectionHook
var recipeSectionAfterDeleteHooks []RecipeSectionHook

var recipeSectionBeforeUpsertHooks []RecipeSectionHook
var recipeSectionAfterUpsertHooks []RecipeSectionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RecipeSection) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeSectionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RecipeSection) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeSectionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RecipeSection) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeSectionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RecipeSection) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeSectionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RecipeSection) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeSectionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RecipeSection) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeSectionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RecipeSection) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeSectionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RecipeSection) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeSectionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RecipeSection) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeSectionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRecipeSectionHook registers your hook function for all future operations.
func AddRecipeSectionHook(hookPoint boil.HookPoint, recipeSectionHook RecipeSectionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		recipeSectionAfterSelectHooks = append(recipeSectionAfterSelectHooks, recipeSectionHook)
	case boil.BeforeInsertHook:
		recipeSectionBeforeInsertHooks = append(recipeSectionBeforeInsertHooks, recipeSectionHook)
	case boil.AfterInsertHook:
		recipeSectionAfterInsertHooks = append(recipeSectionAfterInsertHooks, recipeSectionHook)
	case boil.BeforeUpdateHook:
		recipeSectionBeforeUpdateHooks = append(recipeSectionBeforeUpdateHooks, recipeSectionHook)
	case boil.AfterUpdateHook:
		recipeSectionAfterUpdateHooks = append(recipeSectionAfterUpdateHooks, recipeSectionHook)
	case boil.BeforeDeleteHook:
		recipeSectionBeforeDeleteHooks = append(recipeSectionBeforeDeleteHooks, recipeSectionHook)
	case boil.AfterDeleteHook:
		recipeSectionAfterDeleteHooks = append(recipeSectionAfterDeleteHooks, recipeSectionHook)
	case boil.BeforeUpsertHook:
		recipeSectionBeforeUpsertHooks = append(recipeSectionBeforeUpsertHooks, recipeSectionHook)
	case boil.AfterUpsertHook:
		recipeSectionAfterUpsertHooks = append(recipeSectionAfterUpsertHooks, recipeSectionHook)
	}
}

// One returns a single recipeSection record from the query.
func (q recipeSectionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RecipeSection, error) {
	o := &RecipeSection{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for recipe_sections")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RecipeSection records from the query.
func (q recipeSectionQuery) All(ctx context.Context, exec boil.ContextExecutor) (RecipeSectionSlice, error) {
	var o []*RecipeSection

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RecipeSection slice")
	}

	if len(recipeSectionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RecipeSection records in the query.
func (q recipeSectionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count recipe_sections rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q recipeSectionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if recipe_sections exists")
	}

	return count > 0, nil
}

// RecipeDetail pointed to by the foreign key.
func (o *RecipeSection) RecipeDetail(mods ...qm.QueryMod) recipeDetailQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RecipeDetailID),
	}

	queryMods = append(queryMods, mods...)

	return RecipeDetails(queryMods...)
}

// SectionRecipeSectionIngredients retrieves all the recipe_section_ingredient's RecipeSectionIngredients with an executor via section_id column.
func (o *RecipeSection) SectionRecipeSectionIngredients(mods ...qm.QueryMod) recipeSectionIngredientQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"recipe_section_ingredients\".\"section_id\"=?", o.ID),
	)

	return RecipeSectionIngredients(queryMods...)
}

// SectionRecipeSectionInstructions retrieves all the recipe_section_instruction's RecipeSectionInstructions with an executor via section_id column.
func (o *RecipeSection) SectionRecipeSectionInstructions(mods ...qm.QueryMod) recipeSectionInstructionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"recipe_section_instructions\".\"section_id\"=?", o.ID),
	)

	return RecipeSectionInstructions(queryMods...)
}

// LoadRecipeDetail allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (recipeSectionL) LoadRecipeDetail(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipeSection interface{}, mods queries.Applicator) error {
	var slice []*RecipeSection
	var object *RecipeSection

	if singular {
		object = maybeRecipeSection.(*RecipeSection)
	} else {
		slice = *maybeRecipeSection.(*[]*RecipeSection)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeSectionR{}
		}
		args = append(args, object.RecipeDetailID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeSectionR{}
			}

			for _, a := range args {
				if a == obj.RecipeDetailID {
					continue Outer
				}
			}

			args = append(args, obj.RecipeDetailID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`recipe_details`),
		qm.WhereIn(`recipe_details.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RecipeDetail")
	}

	var resultSlice []*RecipeDetail
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RecipeDetail")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for recipe_details")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for recipe_details")
	}

	if len(recipeSectionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RecipeDetail = foreign
		if foreign.R == nil {
			foreign.R = &recipeDetailR{}
		}
		foreign.R.RecipeSections = append(foreign.R.RecipeSections, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RecipeDetailID == foreign.ID {
				local.R.RecipeDetail = foreign
				if foreign.R == nil {
					foreign.R = &recipeDetailR{}
				}
				foreign.R.RecipeSections = append(foreign.R.RecipeSections, local)
				break
			}
		}
	}

	return nil
}

// LoadSectionRecipeSectionIngredients allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (recipeSectionL) LoadSectionRecipeSectionIngredients(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipeSection interface{}, mods queries.Applicator) error {
	var slice []*RecipeSection
	var object *RecipeSection

	if singular {
		object = maybeRecipeSection.(*RecipeSection)
	} else {
		slice = *maybeRecipeSection.(*[]*RecipeSection)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeSectionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeSectionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`recipe_section_ingredients`),
		qm.WhereIn(`recipe_section_ingredients.section_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load recipe_section_ingredients")
	}

	var resultSlice []*RecipeSectionIngredient
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice recipe_section_ingredients")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on recipe_section_ingredients")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for recipe_section_ingredients")
	}

	if len(recipeSectionIngredientAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SectionRecipeSectionIngredients = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &recipeSectionIngredientR{}
			}
			foreign.R.Section = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SectionID {
				local.R.SectionRecipeSectionIngredients = append(local.R.SectionRecipeSectionIngredients, foreign)
				if foreign.R == nil {
					foreign.R = &recipeSectionIngredientR{}
				}
				foreign.R.Section = local
				break
			}
		}
	}

	return nil
}

// LoadSectionRecipeSectionInstructions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (recipeSectionL) LoadSectionRecipeSectionInstructions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipeSection interface{}, mods queries.Applicator) error {
	var slice []*RecipeSection
	var object *RecipeSection

	if singular {
		object = maybeRecipeSection.(*RecipeSection)
	} else {
		slice = *maybeRecipeSection.(*[]*RecipeSection)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeSectionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeSectionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`recipe_section_instructions`),
		qm.WhereIn(`recipe_section_instructions.section_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load recipe_section_instructions")
	}

	var resultSlice []*RecipeSectionInstruction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice recipe_section_instructions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on recipe_section_instructions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for recipe_section_instructions")
	}

	if len(recipeSectionInstructionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SectionRecipeSectionInstructions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &recipeSectionInstructionR{}
			}
			foreign.R.Section = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SectionID {
				local.R.SectionRecipeSectionInstructions = append(local.R.SectionRecipeSectionInstructions, foreign)
				if foreign.R == nil {
					foreign.R = &recipeSectionInstructionR{}
				}
				foreign.R.Section = local
				break
			}
		}
	}

	return nil
}

// SetRecipeDetail of the recipeSection to the related item.
// Sets o.R.RecipeDetail to related.
// Adds o to related.R.RecipeSections.
func (o *RecipeSection) SetRecipeDetail(ctx context.Context, exec boil.ContextExecutor, insert bool, related *RecipeDetail) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"recipe_sections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"recipe_detail_id"}),
		strmangle.WhereClause("\"", "\"", 2, recipeSectionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RecipeDetailID = related.ID
	if o.R == nil {
		o.R = &recipeSectionR{
			RecipeDetail: related,
		}
	} else {
		o.R.RecipeDetail = related
	}

	if related.R == nil {
		related.R = &recipeDetailR{
			RecipeSections: RecipeSectionSlice{o},
		}
	} else {
		related.R.RecipeSections = append(related.R.RecipeSections, o)
	}

	return nil
}

// AddSectionRecipeSectionIngredients adds the given related objects to the existing relationships
// of the recipe_section, optionally inserting them as new records.
// Appends related to o.R.SectionRecipeSectionIngredients.
// Sets related.R.Section appropriately.
func (o *RecipeSection) AddSectionRecipeSectionIngredients(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RecipeSectionIngredient) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SectionID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"recipe_section_ingredients\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"section_id"}),
				strmangle.WhereClause("\"", "\"", 2, recipeSectionIngredientPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SectionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &recipeSectionR{
			SectionRecipeSectionIngredients: related,
		}
	} else {
		o.R.SectionRecipeSectionIngredients = append(o.R.SectionRecipeSectionIngredients, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &recipeSectionIngredientR{
				Section: o,
			}
		} else {
			rel.R.Section = o
		}
	}
	return nil
}

// AddSectionRecipeSectionInstructions adds the given related objects to the existing relationships
// of the recipe_section, optionally inserting them as new records.
// Appends related to o.R.SectionRecipeSectionInstructions.
// Sets related.R.Section appropriately.
func (o *RecipeSection) AddSectionRecipeSectionInstructions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RecipeSectionInstruction) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SectionID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"recipe_section_instructions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"section_id"}),
				strmangle.WhereClause("\"", "\"", 2, recipeSectionInstructionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SectionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &recipeSectionR{
			SectionRecipeSectionInstructions: related,
		}
	} else {
		o.R.SectionRecipeSectionInstructions = append(o.R.SectionRecipeSectionInstructions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &recipeSectionInstructionR{
				Section: o,
			}
		} else {
			rel.R.Section = o
		}
	}
	return nil
}

// RecipeSections retrieves all the records using an executor.
func RecipeSections(mods ...qm.QueryMod) recipeSectionQuery {
	mods = append(mods, qm.From("\"recipe_sections\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"recipe_sections\".*"})
	}

	return recipeSectionQuery{q}
}

// FindRecipeSection retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRecipeSection(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*RecipeSection, error) {
	recipeSectionObj := &RecipeSection{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"recipe_sections\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, recipeSectionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from recipe_sections")
	}

	if err = recipeSectionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return recipeSectionObj, err
	}

	return recipeSectionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RecipeSection) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no recipe_sections provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recipeSectionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	recipeSectionInsertCacheMut.RLock()
	cache, cached := recipeSectionInsertCache[key]
	recipeSectionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			recipeSectionAllColumns,
			recipeSectionColumnsWithDefault,
			recipeSectionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(recipeSectionType, recipeSectionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(recipeSectionType, recipeSectionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"recipe_sections\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"recipe_sections\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into recipe_sections")
	}

	if !cached {
		recipeSectionInsertCacheMut.Lock()
		recipeSectionInsertCache[key] = cache
		recipeSectionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RecipeSection.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RecipeSection) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	recipeSectionUpdateCacheMut.RLock()
	cache, cached := recipeSectionUpdateCache[key]
	recipeSectionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			recipeSectionAllColumns,
			recipeSectionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update recipe_sections, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"recipe_sections\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, recipeSectionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(recipeSectionType, recipeSectionMapping, append(wl, recipeSectionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update recipe_sections row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for recipe_sections")
	}

	if !cached {
		recipeSectionUpdateCacheMut.Lock()
		recipeSectionUpdateCache[key] = cache
		recipeSectionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q recipeSectionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for recipe_sections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for recipe_sections")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RecipeSectionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipeSectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"recipe_sections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, recipeSectionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in recipeSection slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all recipeSection")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RecipeSection) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no recipe_sections provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recipeSectionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	recipeSectionUpsertCacheMut.RLock()
	cache, cached := recipeSectionUpsertCache[key]
	recipeSectionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			recipeSectionAllColumns,
			recipeSectionColumnsWithDefault,
			recipeSectionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			recipeSectionAllColumns,
			recipeSectionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert recipe_sections, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(recipeSectionPrimaryKeyColumns))
			copy(conflict, recipeSectionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"recipe_sections\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(recipeSectionType, recipeSectionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(recipeSectionType, recipeSectionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert recipe_sections")
	}

	if !cached {
		recipeSectionUpsertCacheMut.Lock()
		recipeSectionUpsertCache[key] = cache
		recipeSectionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RecipeSection record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RecipeSection) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RecipeSection provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), recipeSectionPrimaryKeyMapping)
	sql := "DELETE FROM \"recipe_sections\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from recipe_sections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for recipe_sections")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q recipeSectionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no recipeSectionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from recipe_sections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for recipe_sections")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RecipeSectionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(recipeSectionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipeSectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"recipe_sections\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, recipeSectionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from recipeSection slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for recipe_sections")
	}

	if len(recipeSectionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RecipeSection) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRecipeSection(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RecipeSectionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RecipeSectionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipeSectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"recipe_sections\".* FROM \"recipe_sections\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, recipeSectionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RecipeSectionSlice")
	}

	*o = slice

	return nil
}

// RecipeSectionExists checks if the RecipeSection row exists.
func RecipeSectionExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"recipe_sections\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if recipe_sections exists")
	}

	return exists, nil
}
