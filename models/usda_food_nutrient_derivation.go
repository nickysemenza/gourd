// Code generated by SQLBoiler 4.8.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UsdaFoodNutrientDerivation is an object representing the database table.
type UsdaFoodNutrientDerivation struct {
	ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Code        null.String `boil:"code" json:"code,omitempty" toml:"code" yaml:"code,omitempty"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	SourceID    null.Int    `boil:"source_id" json:"source_id,omitempty" toml:"source_id" yaml:"source_id,omitempty"`

	R *usdaFoodNutrientDerivationR `boil:"rel" json:"rel" toml:"rel" yaml:"rel"`
	L usdaFoodNutrientDerivationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UsdaFoodNutrientDerivationColumns = struct {
	ID          string
	Code        string
	Description string
	SourceID    string
}{
	ID:          "id",
	Code:        "code",
	Description: "description",
	SourceID:    "source_id",
}

var UsdaFoodNutrientDerivationTableColumns = struct {
	ID          string
	Code        string
	Description string
	SourceID    string
}{
	ID:          "usda_food_nutrient_derivation.id",
	Code:        "usda_food_nutrient_derivation.code",
	Description: "usda_food_nutrient_derivation.description",
	SourceID:    "usda_food_nutrient_derivation.source_id",
}

// Generated where

var UsdaFoodNutrientDerivationWhere = struct {
	ID          whereHelperint
	Code        whereHelpernull_String
	Description whereHelpernull_String
	SourceID    whereHelpernull_Int
}{
	ID:          whereHelperint{field: "\"usda_food_nutrient_derivation\".\"id\""},
	Code:        whereHelpernull_String{field: "\"usda_food_nutrient_derivation\".\"code\""},
	Description: whereHelpernull_String{field: "\"usda_food_nutrient_derivation\".\"description\""},
	SourceID:    whereHelpernull_Int{field: "\"usda_food_nutrient_derivation\".\"source_id\""},
}

// UsdaFoodNutrientDerivationRels is where relationship names are stored.
var UsdaFoodNutrientDerivationRels = struct {
	Source                      string
	DerivationUsdaFoodNutrients string
}{
	Source:                      "Source",
	DerivationUsdaFoodNutrients: "DerivationUsdaFoodNutrients",
}

// usdaFoodNutrientDerivationR is where relationships are stored.
type usdaFoodNutrientDerivationR struct {
	Source                      *UsdaFoodNutrientSource `boil:"Source" json:"Source" toml:"Source" yaml:"Source"`
	DerivationUsdaFoodNutrients UsdaFoodNutrientSlice   `boil:"DerivationUsdaFoodNutrients" json:"DerivationUsdaFoodNutrients" toml:"DerivationUsdaFoodNutrients" yaml:"DerivationUsdaFoodNutrients"`
}

// NewStruct creates a new relationship struct
func (*usdaFoodNutrientDerivationR) NewStruct() *usdaFoodNutrientDerivationR {
	return &usdaFoodNutrientDerivationR{}
}

// usdaFoodNutrientDerivationL is where Load methods for each relationship are stored.
type usdaFoodNutrientDerivationL struct{}

var (
	usdaFoodNutrientDerivationAllColumns            = []string{"id", "code", "description", "source_id"}
	usdaFoodNutrientDerivationColumnsWithoutDefault = []string{"id", "code", "description", "source_id"}
	usdaFoodNutrientDerivationColumnsWithDefault    = []string{}
	usdaFoodNutrientDerivationPrimaryKeyColumns     = []string{"id"}
)

type (
	// UsdaFoodNutrientDerivationSlice is an alias for a slice of pointers to UsdaFoodNutrientDerivation.
	// This should almost always be used instead of []UsdaFoodNutrientDerivation.
	UsdaFoodNutrientDerivationSlice []*UsdaFoodNutrientDerivation
	// UsdaFoodNutrientDerivationHook is the signature for custom UsdaFoodNutrientDerivation hook methods
	UsdaFoodNutrientDerivationHook func(context.Context, boil.ContextExecutor, *UsdaFoodNutrientDerivation) error

	usdaFoodNutrientDerivationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usdaFoodNutrientDerivationType                 = reflect.TypeOf(&UsdaFoodNutrientDerivation{})
	usdaFoodNutrientDerivationMapping              = queries.MakeStructMapping(usdaFoodNutrientDerivationType)
	usdaFoodNutrientDerivationPrimaryKeyMapping, _ = queries.BindMapping(usdaFoodNutrientDerivationType, usdaFoodNutrientDerivationMapping, usdaFoodNutrientDerivationPrimaryKeyColumns)
	usdaFoodNutrientDerivationInsertCacheMut       sync.RWMutex
	usdaFoodNutrientDerivationInsertCache          = make(map[string]insertCache)
	usdaFoodNutrientDerivationUpdateCacheMut       sync.RWMutex
	usdaFoodNutrientDerivationUpdateCache          = make(map[string]updateCache)
	usdaFoodNutrientDerivationUpsertCacheMut       sync.RWMutex
	usdaFoodNutrientDerivationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var usdaFoodNutrientDerivationBeforeInsertHooks []UsdaFoodNutrientDerivationHook
var usdaFoodNutrientDerivationBeforeUpdateHooks []UsdaFoodNutrientDerivationHook
var usdaFoodNutrientDerivationBeforeDeleteHooks []UsdaFoodNutrientDerivationHook
var usdaFoodNutrientDerivationBeforeUpsertHooks []UsdaFoodNutrientDerivationHook

var usdaFoodNutrientDerivationAfterInsertHooks []UsdaFoodNutrientDerivationHook
var usdaFoodNutrientDerivationAfterSelectHooks []UsdaFoodNutrientDerivationHook
var usdaFoodNutrientDerivationAfterUpdateHooks []UsdaFoodNutrientDerivationHook
var usdaFoodNutrientDerivationAfterDeleteHooks []UsdaFoodNutrientDerivationHook
var usdaFoodNutrientDerivationAfterUpsertHooks []UsdaFoodNutrientDerivationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UsdaFoodNutrientDerivation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientDerivationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UsdaFoodNutrientDerivation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientDerivationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UsdaFoodNutrientDerivation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientDerivationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UsdaFoodNutrientDerivation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientDerivationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UsdaFoodNutrientDerivation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientDerivationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UsdaFoodNutrientDerivation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientDerivationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UsdaFoodNutrientDerivation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientDerivationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UsdaFoodNutrientDerivation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientDerivationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UsdaFoodNutrientDerivation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientDerivationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUsdaFoodNutrientDerivationHook registers your hook function for all future operations.
func AddUsdaFoodNutrientDerivationHook(hookPoint boil.HookPoint, usdaFoodNutrientDerivationHook UsdaFoodNutrientDerivationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		usdaFoodNutrientDerivationBeforeInsertHooks = append(usdaFoodNutrientDerivationBeforeInsertHooks, usdaFoodNutrientDerivationHook)
	case boil.BeforeUpdateHook:
		usdaFoodNutrientDerivationBeforeUpdateHooks = append(usdaFoodNutrientDerivationBeforeUpdateHooks, usdaFoodNutrientDerivationHook)
	case boil.BeforeDeleteHook:
		usdaFoodNutrientDerivationBeforeDeleteHooks = append(usdaFoodNutrientDerivationBeforeDeleteHooks, usdaFoodNutrientDerivationHook)
	case boil.BeforeUpsertHook:
		usdaFoodNutrientDerivationBeforeUpsertHooks = append(usdaFoodNutrientDerivationBeforeUpsertHooks, usdaFoodNutrientDerivationHook)
	case boil.AfterInsertHook:
		usdaFoodNutrientDerivationAfterInsertHooks = append(usdaFoodNutrientDerivationAfterInsertHooks, usdaFoodNutrientDerivationHook)
	case boil.AfterSelectHook:
		usdaFoodNutrientDerivationAfterSelectHooks = append(usdaFoodNutrientDerivationAfterSelectHooks, usdaFoodNutrientDerivationHook)
	case boil.AfterUpdateHook:
		usdaFoodNutrientDerivationAfterUpdateHooks = append(usdaFoodNutrientDerivationAfterUpdateHooks, usdaFoodNutrientDerivationHook)
	case boil.AfterDeleteHook:
		usdaFoodNutrientDerivationAfterDeleteHooks = append(usdaFoodNutrientDerivationAfterDeleteHooks, usdaFoodNutrientDerivationHook)
	case boil.AfterUpsertHook:
		usdaFoodNutrientDerivationAfterUpsertHooks = append(usdaFoodNutrientDerivationAfterUpsertHooks, usdaFoodNutrientDerivationHook)
	}
}

// One returns a single usdaFoodNutrientDerivation record from the query.
func (q usdaFoodNutrientDerivationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UsdaFoodNutrientDerivation, error) {
	o := &UsdaFoodNutrientDerivation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for usda_food_nutrient_derivation")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UsdaFoodNutrientDerivation records from the query.
func (q usdaFoodNutrientDerivationQuery) All(ctx context.Context, exec boil.ContextExecutor) (UsdaFoodNutrientDerivationSlice, error) {
	var o []*UsdaFoodNutrientDerivation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UsdaFoodNutrientDerivation slice")
	}

	if len(usdaFoodNutrientDerivationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UsdaFoodNutrientDerivation records in the query.
func (q usdaFoodNutrientDerivationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count usda_food_nutrient_derivation rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q usdaFoodNutrientDerivationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if usda_food_nutrient_derivation exists")
	}

	return count > 0, nil
}

// Source pointed to by the foreign key.
func (o *UsdaFoodNutrientDerivation) Source(mods ...qm.QueryMod) usdaFoodNutrientSourceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SourceID),
	}

	queryMods = append(queryMods, mods...)

	query := UsdaFoodNutrientSources(queryMods...)
	queries.SetFrom(query.Query, "\"usda_food_nutrient_source\"")

	return query
}

// DerivationUsdaFoodNutrients retrieves all the usda_food_nutrient's UsdaFoodNutrients with an executor via derivation_id column.
func (o *UsdaFoodNutrientDerivation) DerivationUsdaFoodNutrients(mods ...qm.QueryMod) usdaFoodNutrientQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"usda_food_nutrient\".\"derivation_id\"=?", o.ID),
	)

	query := UsdaFoodNutrients(queryMods...)
	queries.SetFrom(query.Query, "\"usda_food_nutrient\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"usda_food_nutrient\".*"})
	}

	return query
}

// LoadSource allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (usdaFoodNutrientDerivationL) LoadSource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsdaFoodNutrientDerivation interface{}, mods queries.Applicator) error {
	var slice []*UsdaFoodNutrientDerivation
	var object *UsdaFoodNutrientDerivation

	if singular {
		object = maybeUsdaFoodNutrientDerivation.(*UsdaFoodNutrientDerivation)
	} else {
		slice = *maybeUsdaFoodNutrientDerivation.(*[]*UsdaFoodNutrientDerivation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &usdaFoodNutrientDerivationR{}
		}
		if !queries.IsNil(object.SourceID) {
			args = append(args, object.SourceID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usdaFoodNutrientDerivationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SourceID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SourceID) {
				args = append(args, obj.SourceID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`usda_food_nutrient_source`),
		qm.WhereIn(`usda_food_nutrient_source.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UsdaFoodNutrientSource")
	}

	var resultSlice []*UsdaFoodNutrientSource
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UsdaFoodNutrientSource")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for usda_food_nutrient_source")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usda_food_nutrient_source")
	}

	if len(usdaFoodNutrientDerivationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Source = foreign
		if foreign.R == nil {
			foreign.R = &usdaFoodNutrientSourceR{}
		}
		foreign.R.SourceUsdaFoodNutrientDerivations = append(foreign.R.SourceUsdaFoodNutrientDerivations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SourceID, foreign.ID) {
				local.R.Source = foreign
				if foreign.R == nil {
					foreign.R = &usdaFoodNutrientSourceR{}
				}
				foreign.R.SourceUsdaFoodNutrientDerivations = append(foreign.R.SourceUsdaFoodNutrientDerivations, local)
				break
			}
		}
	}

	return nil
}

// LoadDerivationUsdaFoodNutrients allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (usdaFoodNutrientDerivationL) LoadDerivationUsdaFoodNutrients(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsdaFoodNutrientDerivation interface{}, mods queries.Applicator) error {
	var slice []*UsdaFoodNutrientDerivation
	var object *UsdaFoodNutrientDerivation

	if singular {
		object = maybeUsdaFoodNutrientDerivation.(*UsdaFoodNutrientDerivation)
	} else {
		slice = *maybeUsdaFoodNutrientDerivation.(*[]*UsdaFoodNutrientDerivation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &usdaFoodNutrientDerivationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usdaFoodNutrientDerivationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`usda_food_nutrient`),
		qm.WhereIn(`usda_food_nutrient.derivation_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load usda_food_nutrient")
	}

	var resultSlice []*UsdaFoodNutrient
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice usda_food_nutrient")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on usda_food_nutrient")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usda_food_nutrient")
	}

	if len(usdaFoodNutrientAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DerivationUsdaFoodNutrients = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &usdaFoodNutrientR{}
			}
			foreign.R.Derivation = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.DerivationID) {
				local.R.DerivationUsdaFoodNutrients = append(local.R.DerivationUsdaFoodNutrients, foreign)
				if foreign.R == nil {
					foreign.R = &usdaFoodNutrientR{}
				}
				foreign.R.Derivation = local
				break
			}
		}
	}

	return nil
}

// SetSource of the usdaFoodNutrientDerivation to the related item.
// Sets o.R.Source to related.
// Adds o to related.R.SourceUsdaFoodNutrientDerivations.
func (o *UsdaFoodNutrientDerivation) SetSource(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UsdaFoodNutrientSource) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"usda_food_nutrient_derivation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"source_id"}),
		strmangle.WhereClause("\"", "\"", 2, usdaFoodNutrientDerivationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SourceID, related.ID)
	if o.R == nil {
		o.R = &usdaFoodNutrientDerivationR{
			Source: related,
		}
	} else {
		o.R.Source = related
	}

	if related.R == nil {
		related.R = &usdaFoodNutrientSourceR{
			SourceUsdaFoodNutrientDerivations: UsdaFoodNutrientDerivationSlice{o},
		}
	} else {
		related.R.SourceUsdaFoodNutrientDerivations = append(related.R.SourceUsdaFoodNutrientDerivations, o)
	}

	return nil
}

// RemoveSource relationship.
// Sets o.R.Source to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *UsdaFoodNutrientDerivation) RemoveSource(ctx context.Context, exec boil.ContextExecutor, related *UsdaFoodNutrientSource) error {
	var err error

	queries.SetScanner(&o.SourceID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("source_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Source = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SourceUsdaFoodNutrientDerivations {
		if queries.Equal(o.SourceID, ri.SourceID) {
			continue
		}

		ln := len(related.R.SourceUsdaFoodNutrientDerivations)
		if ln > 1 && i < ln-1 {
			related.R.SourceUsdaFoodNutrientDerivations[i] = related.R.SourceUsdaFoodNutrientDerivations[ln-1]
		}
		related.R.SourceUsdaFoodNutrientDerivations = related.R.SourceUsdaFoodNutrientDerivations[:ln-1]
		break
	}
	return nil
}

// AddDerivationUsdaFoodNutrients adds the given related objects to the existing relationships
// of the usda_food_nutrient_derivation, optionally inserting them as new records.
// Appends related to o.R.DerivationUsdaFoodNutrients.
// Sets related.R.Derivation appropriately.
func (o *UsdaFoodNutrientDerivation) AddDerivationUsdaFoodNutrients(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UsdaFoodNutrient) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DerivationID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"usda_food_nutrient\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"derivation_id"}),
				strmangle.WhereClause("\"", "\"", 2, usdaFoodNutrientPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DerivationID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &usdaFoodNutrientDerivationR{
			DerivationUsdaFoodNutrients: related,
		}
	} else {
		o.R.DerivationUsdaFoodNutrients = append(o.R.DerivationUsdaFoodNutrients, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &usdaFoodNutrientR{
				Derivation: o,
			}
		} else {
			rel.R.Derivation = o
		}
	}
	return nil
}

// SetDerivationUsdaFoodNutrients removes all previously related items of the
// usda_food_nutrient_derivation replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Derivation's DerivationUsdaFoodNutrients accordingly.
// Replaces o.R.DerivationUsdaFoodNutrients with related.
// Sets related.R.Derivation's DerivationUsdaFoodNutrients accordingly.
func (o *UsdaFoodNutrientDerivation) SetDerivationUsdaFoodNutrients(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UsdaFoodNutrient) error {
	query := "update \"usda_food_nutrient\" set \"derivation_id\" = null where \"derivation_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.DerivationUsdaFoodNutrients {
			queries.SetScanner(&rel.DerivationID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Derivation = nil
		}

		o.R.DerivationUsdaFoodNutrients = nil
	}
	return o.AddDerivationUsdaFoodNutrients(ctx, exec, insert, related...)
}

// RemoveDerivationUsdaFoodNutrients relationships from objects passed in.
// Removes related items from R.DerivationUsdaFoodNutrients (uses pointer comparison, removal does not keep order)
// Sets related.R.Derivation.
func (o *UsdaFoodNutrientDerivation) RemoveDerivationUsdaFoodNutrients(ctx context.Context, exec boil.ContextExecutor, related ...*UsdaFoodNutrient) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DerivationID, nil)
		if rel.R != nil {
			rel.R.Derivation = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("derivation_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DerivationUsdaFoodNutrients {
			if rel != ri {
				continue
			}

			ln := len(o.R.DerivationUsdaFoodNutrients)
			if ln > 1 && i < ln-1 {
				o.R.DerivationUsdaFoodNutrients[i] = o.R.DerivationUsdaFoodNutrients[ln-1]
			}
			o.R.DerivationUsdaFoodNutrients = o.R.DerivationUsdaFoodNutrients[:ln-1]
			break
		}
	}

	return nil
}

// UsdaFoodNutrientDerivations retrieves all the records using an executor.
func UsdaFoodNutrientDerivations(mods ...qm.QueryMod) usdaFoodNutrientDerivationQuery {
	mods = append(mods, qm.From("\"usda_food_nutrient_derivation\""))
	return usdaFoodNutrientDerivationQuery{NewQuery(mods...)}
}

// FindUsdaFoodNutrientDerivation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUsdaFoodNutrientDerivation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UsdaFoodNutrientDerivation, error) {
	usdaFoodNutrientDerivationObj := &UsdaFoodNutrientDerivation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"usda_food_nutrient_derivation\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, usdaFoodNutrientDerivationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from usda_food_nutrient_derivation")
	}

	if err = usdaFoodNutrientDerivationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return usdaFoodNutrientDerivationObj, err
	}

	return usdaFoodNutrientDerivationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UsdaFoodNutrientDerivation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no usda_food_nutrient_derivation provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaFoodNutrientDerivationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	usdaFoodNutrientDerivationInsertCacheMut.RLock()
	cache, cached := usdaFoodNutrientDerivationInsertCache[key]
	usdaFoodNutrientDerivationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			usdaFoodNutrientDerivationAllColumns,
			usdaFoodNutrientDerivationColumnsWithDefault,
			usdaFoodNutrientDerivationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(usdaFoodNutrientDerivationType, usdaFoodNutrientDerivationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(usdaFoodNutrientDerivationType, usdaFoodNutrientDerivationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"usda_food_nutrient_derivation\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"usda_food_nutrient_derivation\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into usda_food_nutrient_derivation")
	}

	if !cached {
		usdaFoodNutrientDerivationInsertCacheMut.Lock()
		usdaFoodNutrientDerivationInsertCache[key] = cache
		usdaFoodNutrientDerivationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UsdaFoodNutrientDerivation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UsdaFoodNutrientDerivation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	usdaFoodNutrientDerivationUpdateCacheMut.RLock()
	cache, cached := usdaFoodNutrientDerivationUpdateCache[key]
	usdaFoodNutrientDerivationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			usdaFoodNutrientDerivationAllColumns,
			usdaFoodNutrientDerivationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update usda_food_nutrient_derivation, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"usda_food_nutrient_derivation\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, usdaFoodNutrientDerivationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(usdaFoodNutrientDerivationType, usdaFoodNutrientDerivationMapping, append(wl, usdaFoodNutrientDerivationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update usda_food_nutrient_derivation row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for usda_food_nutrient_derivation")
	}

	if !cached {
		usdaFoodNutrientDerivationUpdateCacheMut.Lock()
		usdaFoodNutrientDerivationUpdateCache[key] = cache
		usdaFoodNutrientDerivationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q usdaFoodNutrientDerivationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for usda_food_nutrient_derivation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for usda_food_nutrient_derivation")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UsdaFoodNutrientDerivationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaFoodNutrientDerivationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"usda_food_nutrient_derivation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, usdaFoodNutrientDerivationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in usdaFoodNutrientDerivation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all usdaFoodNutrientDerivation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UsdaFoodNutrientDerivation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no usda_food_nutrient_derivation provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaFoodNutrientDerivationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	usdaFoodNutrientDerivationUpsertCacheMut.RLock()
	cache, cached := usdaFoodNutrientDerivationUpsertCache[key]
	usdaFoodNutrientDerivationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			usdaFoodNutrientDerivationAllColumns,
			usdaFoodNutrientDerivationColumnsWithDefault,
			usdaFoodNutrientDerivationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			usdaFoodNutrientDerivationAllColumns,
			usdaFoodNutrientDerivationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert usda_food_nutrient_derivation, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(usdaFoodNutrientDerivationPrimaryKeyColumns))
			copy(conflict, usdaFoodNutrientDerivationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"usda_food_nutrient_derivation\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(usdaFoodNutrientDerivationType, usdaFoodNutrientDerivationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(usdaFoodNutrientDerivationType, usdaFoodNutrientDerivationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert usda_food_nutrient_derivation")
	}

	if !cached {
		usdaFoodNutrientDerivationUpsertCacheMut.Lock()
		usdaFoodNutrientDerivationUpsertCache[key] = cache
		usdaFoodNutrientDerivationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UsdaFoodNutrientDerivation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UsdaFoodNutrientDerivation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UsdaFoodNutrientDerivation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), usdaFoodNutrientDerivationPrimaryKeyMapping)
	sql := "DELETE FROM \"usda_food_nutrient_derivation\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from usda_food_nutrient_derivation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for usda_food_nutrient_derivation")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q usdaFoodNutrientDerivationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no usdaFoodNutrientDerivationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from usda_food_nutrient_derivation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for usda_food_nutrient_derivation")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UsdaFoodNutrientDerivationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(usdaFoodNutrientDerivationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaFoodNutrientDerivationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"usda_food_nutrient_derivation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaFoodNutrientDerivationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from usdaFoodNutrientDerivation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for usda_food_nutrient_derivation")
	}

	if len(usdaFoodNutrientDerivationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UsdaFoodNutrientDerivation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUsdaFoodNutrientDerivation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsdaFoodNutrientDerivationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UsdaFoodNutrientDerivationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaFoodNutrientDerivationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"usda_food_nutrient_derivation\".* FROM \"usda_food_nutrient_derivation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaFoodNutrientDerivationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UsdaFoodNutrientDerivationSlice")
	}

	*o = slice

	return nil
}

// UsdaFoodNutrientDerivationExists checks if the UsdaFoodNutrientDerivation row exists.
func UsdaFoodNutrientDerivationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"usda_food_nutrient_derivation\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if usda_food_nutrient_derivation exists")
	}

	return exists, nil
}
