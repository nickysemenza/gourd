// Code generated by SQLBoiler 4.8.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUsdaFoodProteinConversionFactors(t *testing.T) {
	t.Parallel()

	query := UsdaFoodProteinConversionFactors()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUsdaFoodProteinConversionFactorsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodProteinConversionFactor{}
	if err = randomize.Struct(seed, o, usdaFoodProteinConversionFactorDBTypes, true, usdaFoodProteinConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodProteinConversionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaFoodProteinConversionFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaFoodProteinConversionFactorsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodProteinConversionFactor{}
	if err = randomize.Struct(seed, o, usdaFoodProteinConversionFactorDBTypes, true, usdaFoodProteinConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodProteinConversionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UsdaFoodProteinConversionFactors().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaFoodProteinConversionFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaFoodProteinConversionFactorsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodProteinConversionFactor{}
	if err = randomize.Struct(seed, o, usdaFoodProteinConversionFactorDBTypes, true, usdaFoodProteinConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodProteinConversionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UsdaFoodProteinConversionFactorSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaFoodProteinConversionFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaFoodProteinConversionFactorsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodProteinConversionFactor{}
	if err = randomize.Struct(seed, o, usdaFoodProteinConversionFactorDBTypes, true, usdaFoodProteinConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodProteinConversionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UsdaFoodProteinConversionFactorExists(ctx, tx, o.FoodNutrientConversionFactorID)
	if err != nil {
		t.Errorf("Unable to check if UsdaFoodProteinConversionFactor exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UsdaFoodProteinConversionFactorExists to return true, but got false.")
	}
}

func testUsdaFoodProteinConversionFactorsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodProteinConversionFactor{}
	if err = randomize.Struct(seed, o, usdaFoodProteinConversionFactorDBTypes, true, usdaFoodProteinConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodProteinConversionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	usdaFoodProteinConversionFactorFound, err := FindUsdaFoodProteinConversionFactor(ctx, tx, o.FoodNutrientConversionFactorID)
	if err != nil {
		t.Error(err)
	}

	if usdaFoodProteinConversionFactorFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUsdaFoodProteinConversionFactorsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodProteinConversionFactor{}
	if err = randomize.Struct(seed, o, usdaFoodProteinConversionFactorDBTypes, true, usdaFoodProteinConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodProteinConversionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UsdaFoodProteinConversionFactors().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUsdaFoodProteinConversionFactorsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodProteinConversionFactor{}
	if err = randomize.Struct(seed, o, usdaFoodProteinConversionFactorDBTypes, true, usdaFoodProteinConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodProteinConversionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UsdaFoodProteinConversionFactors().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUsdaFoodProteinConversionFactorsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	usdaFoodProteinConversionFactorOne := &UsdaFoodProteinConversionFactor{}
	usdaFoodProteinConversionFactorTwo := &UsdaFoodProteinConversionFactor{}
	if err = randomize.Struct(seed, usdaFoodProteinConversionFactorOne, usdaFoodProteinConversionFactorDBTypes, false, usdaFoodProteinConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodProteinConversionFactor struct: %s", err)
	}
	if err = randomize.Struct(seed, usdaFoodProteinConversionFactorTwo, usdaFoodProteinConversionFactorDBTypes, false, usdaFoodProteinConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodProteinConversionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = usdaFoodProteinConversionFactorOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = usdaFoodProteinConversionFactorTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UsdaFoodProteinConversionFactors().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUsdaFoodProteinConversionFactorsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	usdaFoodProteinConversionFactorOne := &UsdaFoodProteinConversionFactor{}
	usdaFoodProteinConversionFactorTwo := &UsdaFoodProteinConversionFactor{}
	if err = randomize.Struct(seed, usdaFoodProteinConversionFactorOne, usdaFoodProteinConversionFactorDBTypes, false, usdaFoodProteinConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodProteinConversionFactor struct: %s", err)
	}
	if err = randomize.Struct(seed, usdaFoodProteinConversionFactorTwo, usdaFoodProteinConversionFactorDBTypes, false, usdaFoodProteinConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodProteinConversionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = usdaFoodProteinConversionFactorOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = usdaFoodProteinConversionFactorTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaFoodProteinConversionFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func usdaFoodProteinConversionFactorBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodProteinConversionFactor) error {
	*o = UsdaFoodProteinConversionFactor{}
	return nil
}

func usdaFoodProteinConversionFactorAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodProteinConversionFactor) error {
	*o = UsdaFoodProteinConversionFactor{}
	return nil
}

func usdaFoodProteinConversionFactorAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodProteinConversionFactor) error {
	*o = UsdaFoodProteinConversionFactor{}
	return nil
}

func usdaFoodProteinConversionFactorBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodProteinConversionFactor) error {
	*o = UsdaFoodProteinConversionFactor{}
	return nil
}

func usdaFoodProteinConversionFactorAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodProteinConversionFactor) error {
	*o = UsdaFoodProteinConversionFactor{}
	return nil
}

func usdaFoodProteinConversionFactorBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodProteinConversionFactor) error {
	*o = UsdaFoodProteinConversionFactor{}
	return nil
}

func usdaFoodProteinConversionFactorAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodProteinConversionFactor) error {
	*o = UsdaFoodProteinConversionFactor{}
	return nil
}

func usdaFoodProteinConversionFactorBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodProteinConversionFactor) error {
	*o = UsdaFoodProteinConversionFactor{}
	return nil
}

func usdaFoodProteinConversionFactorAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodProteinConversionFactor) error {
	*o = UsdaFoodProteinConversionFactor{}
	return nil
}

func testUsdaFoodProteinConversionFactorsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UsdaFoodProteinConversionFactor{}
	o := &UsdaFoodProteinConversionFactor{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, usdaFoodProteinConversionFactorDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UsdaFoodProteinConversionFactor object: %s", err)
	}

	AddUsdaFoodProteinConversionFactorHook(boil.BeforeInsertHook, usdaFoodProteinConversionFactorBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	usdaFoodProteinConversionFactorBeforeInsertHooks = []UsdaFoodProteinConversionFactorHook{}

	AddUsdaFoodProteinConversionFactorHook(boil.AfterInsertHook, usdaFoodProteinConversionFactorAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	usdaFoodProteinConversionFactorAfterInsertHooks = []UsdaFoodProteinConversionFactorHook{}

	AddUsdaFoodProteinConversionFactorHook(boil.AfterSelectHook, usdaFoodProteinConversionFactorAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	usdaFoodProteinConversionFactorAfterSelectHooks = []UsdaFoodProteinConversionFactorHook{}

	AddUsdaFoodProteinConversionFactorHook(boil.BeforeUpdateHook, usdaFoodProteinConversionFactorBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	usdaFoodProteinConversionFactorBeforeUpdateHooks = []UsdaFoodProteinConversionFactorHook{}

	AddUsdaFoodProteinConversionFactorHook(boil.AfterUpdateHook, usdaFoodProteinConversionFactorAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	usdaFoodProteinConversionFactorAfterUpdateHooks = []UsdaFoodProteinConversionFactorHook{}

	AddUsdaFoodProteinConversionFactorHook(boil.BeforeDeleteHook, usdaFoodProteinConversionFactorBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	usdaFoodProteinConversionFactorBeforeDeleteHooks = []UsdaFoodProteinConversionFactorHook{}

	AddUsdaFoodProteinConversionFactorHook(boil.AfterDeleteHook, usdaFoodProteinConversionFactorAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	usdaFoodProteinConversionFactorAfterDeleteHooks = []UsdaFoodProteinConversionFactorHook{}

	AddUsdaFoodProteinConversionFactorHook(boil.BeforeUpsertHook, usdaFoodProteinConversionFactorBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	usdaFoodProteinConversionFactorBeforeUpsertHooks = []UsdaFoodProteinConversionFactorHook{}

	AddUsdaFoodProteinConversionFactorHook(boil.AfterUpsertHook, usdaFoodProteinConversionFactorAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	usdaFoodProteinConversionFactorAfterUpsertHooks = []UsdaFoodProteinConversionFactorHook{}
}

func testUsdaFoodProteinConversionFactorsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodProteinConversionFactor{}
	if err = randomize.Struct(seed, o, usdaFoodProteinConversionFactorDBTypes, true, usdaFoodProteinConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodProteinConversionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaFoodProteinConversionFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUsdaFoodProteinConversionFactorsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodProteinConversionFactor{}
	if err = randomize.Struct(seed, o, usdaFoodProteinConversionFactorDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UsdaFoodProteinConversionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(usdaFoodProteinConversionFactorColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UsdaFoodProteinConversionFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUsdaFoodProteinConversionFactorToOneUsdaFoodNutrientConversionFactorUsingFoodNutrientConversionFactor(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UsdaFoodProteinConversionFactor
	var foreign UsdaFoodNutrientConversionFactor

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, usdaFoodProteinConversionFactorDBTypes, false, usdaFoodProteinConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodProteinConversionFactor struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, usdaFoodNutrientConversionFactorDBTypes, false, usdaFoodNutrientConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodNutrientConversionFactor struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.FoodNutrientConversionFactorID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.FoodNutrientConversionFactor().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UsdaFoodProteinConversionFactorSlice{&local}
	if err = local.L.LoadFoodNutrientConversionFactor(ctx, tx, false, (*[]*UsdaFoodProteinConversionFactor)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FoodNutrientConversionFactor == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.FoodNutrientConversionFactor = nil
	if err = local.L.LoadFoodNutrientConversionFactor(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FoodNutrientConversionFactor == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUsdaFoodProteinConversionFactorToOneSetOpUsdaFoodNutrientConversionFactorUsingFoodNutrientConversionFactor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFoodProteinConversionFactor
	var b, c UsdaFoodNutrientConversionFactor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodProteinConversionFactorDBTypes, false, strmangle.SetComplement(usdaFoodProteinConversionFactorPrimaryKeyColumns, usdaFoodProteinConversionFactorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, usdaFoodNutrientConversionFactorDBTypes, false, strmangle.SetComplement(usdaFoodNutrientConversionFactorPrimaryKeyColumns, usdaFoodNutrientConversionFactorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, usdaFoodNutrientConversionFactorDBTypes, false, strmangle.SetComplement(usdaFoodNutrientConversionFactorPrimaryKeyColumns, usdaFoodNutrientConversionFactorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UsdaFoodNutrientConversionFactor{&b, &c} {
		err = a.SetFoodNutrientConversionFactor(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.FoodNutrientConversionFactor != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FoodNutrientConversionFactorUsdaFoodProteinConversionFactor != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.FoodNutrientConversionFactorID != x.ID {
			t.Error("foreign key was wrong value", a.FoodNutrientConversionFactorID)
		}

		if exists, err := UsdaFoodProteinConversionFactorExists(ctx, tx, a.FoodNutrientConversionFactorID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testUsdaFoodProteinConversionFactorsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodProteinConversionFactor{}
	if err = randomize.Struct(seed, o, usdaFoodProteinConversionFactorDBTypes, true, usdaFoodProteinConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodProteinConversionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsdaFoodProteinConversionFactorsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodProteinConversionFactor{}
	if err = randomize.Struct(seed, o, usdaFoodProteinConversionFactorDBTypes, true, usdaFoodProteinConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodProteinConversionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UsdaFoodProteinConversionFactorSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsdaFoodProteinConversionFactorsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodProteinConversionFactor{}
	if err = randomize.Struct(seed, o, usdaFoodProteinConversionFactorDBTypes, true, usdaFoodProteinConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodProteinConversionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UsdaFoodProteinConversionFactors().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	usdaFoodProteinConversionFactorDBTypes = map[string]string{`FoodNutrientConversionFactorID`: `integer`, `Value`: `real`}
	_                                      = bytes.MinRead
)

func testUsdaFoodProteinConversionFactorsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(usdaFoodProteinConversionFactorPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(usdaFoodProteinConversionFactorAllColumns) == len(usdaFoodProteinConversionFactorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodProteinConversionFactor{}
	if err = randomize.Struct(seed, o, usdaFoodProteinConversionFactorDBTypes, true, usdaFoodProteinConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodProteinConversionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaFoodProteinConversionFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, usdaFoodProteinConversionFactorDBTypes, true, usdaFoodProteinConversionFactorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodProteinConversionFactor struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUsdaFoodProteinConversionFactorsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(usdaFoodProteinConversionFactorAllColumns) == len(usdaFoodProteinConversionFactorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodProteinConversionFactor{}
	if err = randomize.Struct(seed, o, usdaFoodProteinConversionFactorDBTypes, true, usdaFoodProteinConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodProteinConversionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaFoodProteinConversionFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, usdaFoodProteinConversionFactorDBTypes, true, usdaFoodProteinConversionFactorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodProteinConversionFactor struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(usdaFoodProteinConversionFactorAllColumns, usdaFoodProteinConversionFactorPrimaryKeyColumns) {
		fields = usdaFoodProteinConversionFactorAllColumns
	} else {
		fields = strmangle.SetComplement(
			usdaFoodProteinConversionFactorAllColumns,
			usdaFoodProteinConversionFactorPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UsdaFoodProteinConversionFactorSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUsdaFoodProteinConversionFactorsUpsert(t *testing.T) {
	t.Parallel()

	if len(usdaFoodProteinConversionFactorAllColumns) == len(usdaFoodProteinConversionFactorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UsdaFoodProteinConversionFactor{}
	if err = randomize.Struct(seed, &o, usdaFoodProteinConversionFactorDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UsdaFoodProteinConversionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UsdaFoodProteinConversionFactor: %s", err)
	}

	count, err := UsdaFoodProteinConversionFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, usdaFoodProteinConversionFactorDBTypes, false, usdaFoodProteinConversionFactorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodProteinConversionFactor struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UsdaFoodProteinConversionFactor: %s", err)
	}

	count, err = UsdaFoodProteinConversionFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
