// Code generated by SQLBoiler 4.10.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// IngredientUnit is an object representing the database table.
type IngredientUnit struct {
	ID           int           `boil:"id" json:"id" toml:"id" yaml:"id"`
	IngredientID string        `boil:"ingredient_id" json:"ingredient_id" toml:"ingredient_id" yaml:"ingredient_id"`
	UnitA        string        `boil:"unit_a" json:"unit_a" toml:"unit_a" yaml:"unit_a"`
	AmountA      types.Decimal `boil:"amount_a" json:"amount_a" toml:"amount_a" yaml:"amount_a"`
	UnitB        string        `boil:"unit_b" json:"unit_b" toml:"unit_b" yaml:"unit_b"`
	AmountB      types.Decimal `boil:"amount_b" json:"amount_b" toml:"amount_b" yaml:"amount_b"`
	Source       string        `boil:"source" json:"source" toml:"source" yaml:"source"`

	R *ingredientUnitR `boil:"rel" json:"rel" toml:"rel" yaml:"rel"`
	L ingredientUnitL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var IngredientUnitColumns = struct {
	ID           string
	IngredientID string
	UnitA        string
	AmountA      string
	UnitB        string
	AmountB      string
	Source       string
}{
	ID:           "id",
	IngredientID: "ingredient_id",
	UnitA:        "unit_a",
	AmountA:      "amount_a",
	UnitB:        "unit_b",
	AmountB:      "amount_b",
	Source:       "source",
}

var IngredientUnitTableColumns = struct {
	ID           string
	IngredientID string
	UnitA        string
	AmountA      string
	UnitB        string
	AmountB      string
	Source       string
}{
	ID:           "ingredient_units.id",
	IngredientID: "ingredient_units.ingredient_id",
	UnitA:        "ingredient_units.unit_a",
	AmountA:      "ingredient_units.amount_a",
	UnitB:        "ingredient_units.unit_b",
	AmountB:      "ingredient_units.amount_b",
	Source:       "ingredient_units.source",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertypes_Decimal struct{ field string }

func (w whereHelpertypes_Decimal) EQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_Decimal) NEQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_Decimal) LT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Decimal) LTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Decimal) GT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Decimal) GTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var IngredientUnitWhere = struct {
	ID           whereHelperint
	IngredientID whereHelperstring
	UnitA        whereHelperstring
	AmountA      whereHelpertypes_Decimal
	UnitB        whereHelperstring
	AmountB      whereHelpertypes_Decimal
	Source       whereHelperstring
}{
	ID:           whereHelperint{field: "\"ingredient_units\".\"id\""},
	IngredientID: whereHelperstring{field: "\"ingredient_units\".\"ingredient_id\""},
	UnitA:        whereHelperstring{field: "\"ingredient_units\".\"unit_a\""},
	AmountA:      whereHelpertypes_Decimal{field: "\"ingredient_units\".\"amount_a\""},
	UnitB:        whereHelperstring{field: "\"ingredient_units\".\"unit_b\""},
	AmountB:      whereHelpertypes_Decimal{field: "\"ingredient_units\".\"amount_b\""},
	Source:       whereHelperstring{field: "\"ingredient_units\".\"source\""},
}

// IngredientUnitRels is where relationship names are stored.
var IngredientUnitRels = struct {
	Ingredient string
}{
	Ingredient: "Ingredient",
}

// ingredientUnitR is where relationships are stored.
type ingredientUnitR struct {
	Ingredient *Ingredient `boil:"Ingredient" json:"Ingredient" toml:"Ingredient" yaml:"Ingredient"`
}

// NewStruct creates a new relationship struct
func (*ingredientUnitR) NewStruct() *ingredientUnitR {
	return &ingredientUnitR{}
}

// ingredientUnitL is where Load methods for each relationship are stored.
type ingredientUnitL struct{}

var (
	ingredientUnitAllColumns            = []string{"id", "ingredient_id", "unit_a", "amount_a", "unit_b", "amount_b", "source"}
	ingredientUnitColumnsWithoutDefault = []string{"ingredient_id", "unit_a", "amount_a", "unit_b", "amount_b", "source"}
	ingredientUnitColumnsWithDefault    = []string{"id"}
	ingredientUnitPrimaryKeyColumns     = []string{"id"}
	ingredientUnitGeneratedColumns      = []string{}
)

type (
	// IngredientUnitSlice is an alias for a slice of pointers to IngredientUnit.
	// This should almost always be used instead of []IngredientUnit.
	IngredientUnitSlice []*IngredientUnit
	// IngredientUnitHook is the signature for custom IngredientUnit hook methods
	IngredientUnitHook func(context.Context, boil.ContextExecutor, *IngredientUnit) error

	ingredientUnitQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ingredientUnitType                 = reflect.TypeOf(&IngredientUnit{})
	ingredientUnitMapping              = queries.MakeStructMapping(ingredientUnitType)
	ingredientUnitPrimaryKeyMapping, _ = queries.BindMapping(ingredientUnitType, ingredientUnitMapping, ingredientUnitPrimaryKeyColumns)
	ingredientUnitInsertCacheMut       sync.RWMutex
	ingredientUnitInsertCache          = make(map[string]insertCache)
	ingredientUnitUpdateCacheMut       sync.RWMutex
	ingredientUnitUpdateCache          = make(map[string]updateCache)
	ingredientUnitUpsertCacheMut       sync.RWMutex
	ingredientUnitUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var ingredientUnitAfterSelectHooks []IngredientUnitHook

var ingredientUnitBeforeInsertHooks []IngredientUnitHook
var ingredientUnitAfterInsertHooks []IngredientUnitHook

var ingredientUnitBeforeUpdateHooks []IngredientUnitHook
var ingredientUnitAfterUpdateHooks []IngredientUnitHook

var ingredientUnitBeforeDeleteHooks []IngredientUnitHook
var ingredientUnitAfterDeleteHooks []IngredientUnitHook

var ingredientUnitBeforeUpsertHooks []IngredientUnitHook
var ingredientUnitAfterUpsertHooks []IngredientUnitHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *IngredientUnit) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ingredientUnitAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *IngredientUnit) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ingredientUnitBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *IngredientUnit) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ingredientUnitAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *IngredientUnit) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ingredientUnitBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *IngredientUnit) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ingredientUnitAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *IngredientUnit) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ingredientUnitBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *IngredientUnit) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ingredientUnitAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *IngredientUnit) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ingredientUnitBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *IngredientUnit) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ingredientUnitAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddIngredientUnitHook registers your hook function for all future operations.
func AddIngredientUnitHook(hookPoint boil.HookPoint, ingredientUnitHook IngredientUnitHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		ingredientUnitAfterSelectHooks = append(ingredientUnitAfterSelectHooks, ingredientUnitHook)
	case boil.BeforeInsertHook:
		ingredientUnitBeforeInsertHooks = append(ingredientUnitBeforeInsertHooks, ingredientUnitHook)
	case boil.AfterInsertHook:
		ingredientUnitAfterInsertHooks = append(ingredientUnitAfterInsertHooks, ingredientUnitHook)
	case boil.BeforeUpdateHook:
		ingredientUnitBeforeUpdateHooks = append(ingredientUnitBeforeUpdateHooks, ingredientUnitHook)
	case boil.AfterUpdateHook:
		ingredientUnitAfterUpdateHooks = append(ingredientUnitAfterUpdateHooks, ingredientUnitHook)
	case boil.BeforeDeleteHook:
		ingredientUnitBeforeDeleteHooks = append(ingredientUnitBeforeDeleteHooks, ingredientUnitHook)
	case boil.AfterDeleteHook:
		ingredientUnitAfterDeleteHooks = append(ingredientUnitAfterDeleteHooks, ingredientUnitHook)
	case boil.BeforeUpsertHook:
		ingredientUnitBeforeUpsertHooks = append(ingredientUnitBeforeUpsertHooks, ingredientUnitHook)
	case boil.AfterUpsertHook:
		ingredientUnitAfterUpsertHooks = append(ingredientUnitAfterUpsertHooks, ingredientUnitHook)
	}
}

// One returns a single ingredientUnit record from the query.
func (q ingredientUnitQuery) One(ctx context.Context, exec boil.ContextExecutor) (*IngredientUnit, error) {
	o := &IngredientUnit{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ingredient_units")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all IngredientUnit records from the query.
func (q ingredientUnitQuery) All(ctx context.Context, exec boil.ContextExecutor) (IngredientUnitSlice, error) {
	var o []*IngredientUnit

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to IngredientUnit slice")
	}

	if len(ingredientUnitAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all IngredientUnit records in the query.
func (q ingredientUnitQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ingredient_units rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q ingredientUnitQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ingredient_units exists")
	}

	return count > 0, nil
}

// Ingredient pointed to by the foreign key.
func (o *IngredientUnit) Ingredient(mods ...qm.QueryMod) ingredientQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IngredientID),
	}

	queryMods = append(queryMods, mods...)

	return Ingredients(queryMods...)
}

// LoadIngredient allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (ingredientUnitL) LoadIngredient(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIngredientUnit interface{}, mods queries.Applicator) error {
	var slice []*IngredientUnit
	var object *IngredientUnit

	if singular {
		object = maybeIngredientUnit.(*IngredientUnit)
	} else {
		slice = *maybeIngredientUnit.(*[]*IngredientUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &ingredientUnitR{}
		}
		args = append(args, object.IngredientID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &ingredientUnitR{}
			}

			for _, a := range args {
				if a == obj.IngredientID {
					continue Outer
				}
			}

			args = append(args, obj.IngredientID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`ingredients`),
		qm.WhereIn(`ingredients.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Ingredient")
	}

	var resultSlice []*Ingredient
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Ingredient")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for ingredients")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ingredients")
	}

	if len(ingredientUnitAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Ingredient = foreign
		if foreign.R == nil {
			foreign.R = &ingredientR{}
		}
		foreign.R.IngredientUnits = append(foreign.R.IngredientUnits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IngredientID == foreign.ID {
				local.R.Ingredient = foreign
				if foreign.R == nil {
					foreign.R = &ingredientR{}
				}
				foreign.R.IngredientUnits = append(foreign.R.IngredientUnits, local)
				break
			}
		}
	}

	return nil
}

// SetIngredient of the ingredientUnit to the related item.
// Sets o.R.Ingredient to related.
// Adds o to related.R.IngredientUnits.
func (o *IngredientUnit) SetIngredient(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Ingredient) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ingredient_units\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"ingredient_id"}),
		strmangle.WhereClause("\"", "\"", 2, ingredientUnitPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IngredientID = related.ID
	if o.R == nil {
		o.R = &ingredientUnitR{
			Ingredient: related,
		}
	} else {
		o.R.Ingredient = related
	}

	if related.R == nil {
		related.R = &ingredientR{
			IngredientUnits: IngredientUnitSlice{o},
		}
	} else {
		related.R.IngredientUnits = append(related.R.IngredientUnits, o)
	}

	return nil
}

// IngredientUnits retrieves all the records using an executor.
func IngredientUnits(mods ...qm.QueryMod) ingredientUnitQuery {
	mods = append(mods, qm.From("\"ingredient_units\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"ingredient_units\".*"})
	}

	return ingredientUnitQuery{q}
}

// FindIngredientUnit retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindIngredientUnit(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*IngredientUnit, error) {
	ingredientUnitObj := &IngredientUnit{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ingredient_units\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, ingredientUnitObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ingredient_units")
	}

	if err = ingredientUnitObj.doAfterSelectHooks(ctx, exec); err != nil {
		return ingredientUnitObj, err
	}

	return ingredientUnitObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *IngredientUnit) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ingredient_units provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ingredientUnitColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ingredientUnitInsertCacheMut.RLock()
	cache, cached := ingredientUnitInsertCache[key]
	ingredientUnitInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ingredientUnitAllColumns,
			ingredientUnitColumnsWithDefault,
			ingredientUnitColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(ingredientUnitType, ingredientUnitMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ingredientUnitType, ingredientUnitMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ingredient_units\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ingredient_units\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ingredient_units")
	}

	if !cached {
		ingredientUnitInsertCacheMut.Lock()
		ingredientUnitInsertCache[key] = cache
		ingredientUnitInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the IngredientUnit.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *IngredientUnit) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ingredientUnitUpdateCacheMut.RLock()
	cache, cached := ingredientUnitUpdateCache[key]
	ingredientUnitUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ingredientUnitAllColumns,
			ingredientUnitPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update ingredient_units, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ingredient_units\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, ingredientUnitPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ingredientUnitType, ingredientUnitMapping, append(wl, ingredientUnitPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update ingredient_units row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for ingredient_units")
	}

	if !cached {
		ingredientUnitUpdateCacheMut.Lock()
		ingredientUnitUpdateCache[key] = cache
		ingredientUnitUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q ingredientUnitQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for ingredient_units")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for ingredient_units")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o IngredientUnitSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ingredientUnitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ingredient_units\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, ingredientUnitPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in ingredientUnit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all ingredientUnit")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *IngredientUnit) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ingredient_units provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ingredientUnitColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ingredientUnitUpsertCacheMut.RLock()
	cache, cached := ingredientUnitUpsertCache[key]
	ingredientUnitUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			ingredientUnitAllColumns,
			ingredientUnitColumnsWithDefault,
			ingredientUnitColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			ingredientUnitAllColumns,
			ingredientUnitPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert ingredient_units, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(ingredientUnitPrimaryKeyColumns))
			copy(conflict, ingredientUnitPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"ingredient_units\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(ingredientUnitType, ingredientUnitMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ingredientUnitType, ingredientUnitMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert ingredient_units")
	}

	if !cached {
		ingredientUnitUpsertCacheMut.Lock()
		ingredientUnitUpsertCache[key] = cache
		ingredientUnitUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single IngredientUnit record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *IngredientUnit) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no IngredientUnit provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ingredientUnitPrimaryKeyMapping)
	sql := "DELETE FROM \"ingredient_units\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from ingredient_units")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for ingredient_units")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q ingredientUnitQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no ingredientUnitQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ingredient_units")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ingredient_units")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o IngredientUnitSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(ingredientUnitBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ingredientUnitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ingredient_units\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ingredientUnitPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ingredientUnit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ingredient_units")
	}

	if len(ingredientUnitAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *IngredientUnit) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindIngredientUnit(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IngredientUnitSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := IngredientUnitSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ingredientUnitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ingredient_units\".* FROM \"ingredient_units\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ingredientUnitPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in IngredientUnitSlice")
	}

	*o = slice

	return nil
}

// IngredientUnitExists checks if the IngredientUnit row exists.
func IngredientUnitExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ingredient_units\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ingredient_units exists")
	}

	return exists, nil
}
