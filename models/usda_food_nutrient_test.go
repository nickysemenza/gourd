// Code generated by SQLBoiler 4.8.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUsdaFoodNutrients(t *testing.T) {
	t.Parallel()

	query := UsdaFoodNutrients()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUsdaFoodNutrientsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodNutrient{}
	if err = randomize.Struct(seed, o, usdaFoodNutrientDBTypes, true, usdaFoodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodNutrient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaFoodNutrients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaFoodNutrientsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodNutrient{}
	if err = randomize.Struct(seed, o, usdaFoodNutrientDBTypes, true, usdaFoodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodNutrient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UsdaFoodNutrients().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaFoodNutrients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaFoodNutrientsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodNutrient{}
	if err = randomize.Struct(seed, o, usdaFoodNutrientDBTypes, true, usdaFoodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodNutrient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UsdaFoodNutrientSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaFoodNutrients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaFoodNutrientsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodNutrient{}
	if err = randomize.Struct(seed, o, usdaFoodNutrientDBTypes, true, usdaFoodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodNutrient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UsdaFoodNutrientExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if UsdaFoodNutrient exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UsdaFoodNutrientExists to return true, but got false.")
	}
}

func testUsdaFoodNutrientsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodNutrient{}
	if err = randomize.Struct(seed, o, usdaFoodNutrientDBTypes, true, usdaFoodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodNutrient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	usdaFoodNutrientFound, err := FindUsdaFoodNutrient(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if usdaFoodNutrientFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUsdaFoodNutrientsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodNutrient{}
	if err = randomize.Struct(seed, o, usdaFoodNutrientDBTypes, true, usdaFoodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodNutrient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UsdaFoodNutrients().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUsdaFoodNutrientsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodNutrient{}
	if err = randomize.Struct(seed, o, usdaFoodNutrientDBTypes, true, usdaFoodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodNutrient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UsdaFoodNutrients().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUsdaFoodNutrientsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	usdaFoodNutrientOne := &UsdaFoodNutrient{}
	usdaFoodNutrientTwo := &UsdaFoodNutrient{}
	if err = randomize.Struct(seed, usdaFoodNutrientOne, usdaFoodNutrientDBTypes, false, usdaFoodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodNutrient struct: %s", err)
	}
	if err = randomize.Struct(seed, usdaFoodNutrientTwo, usdaFoodNutrientDBTypes, false, usdaFoodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodNutrient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = usdaFoodNutrientOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = usdaFoodNutrientTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UsdaFoodNutrients().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUsdaFoodNutrientsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	usdaFoodNutrientOne := &UsdaFoodNutrient{}
	usdaFoodNutrientTwo := &UsdaFoodNutrient{}
	if err = randomize.Struct(seed, usdaFoodNutrientOne, usdaFoodNutrientDBTypes, false, usdaFoodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodNutrient struct: %s", err)
	}
	if err = randomize.Struct(seed, usdaFoodNutrientTwo, usdaFoodNutrientDBTypes, false, usdaFoodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodNutrient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = usdaFoodNutrientOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = usdaFoodNutrientTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaFoodNutrients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func usdaFoodNutrientBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodNutrient) error {
	*o = UsdaFoodNutrient{}
	return nil
}

func usdaFoodNutrientAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodNutrient) error {
	*o = UsdaFoodNutrient{}
	return nil
}

func usdaFoodNutrientAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodNutrient) error {
	*o = UsdaFoodNutrient{}
	return nil
}

func usdaFoodNutrientBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodNutrient) error {
	*o = UsdaFoodNutrient{}
	return nil
}

func usdaFoodNutrientAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodNutrient) error {
	*o = UsdaFoodNutrient{}
	return nil
}

func usdaFoodNutrientBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodNutrient) error {
	*o = UsdaFoodNutrient{}
	return nil
}

func usdaFoodNutrientAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodNutrient) error {
	*o = UsdaFoodNutrient{}
	return nil
}

func usdaFoodNutrientBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodNutrient) error {
	*o = UsdaFoodNutrient{}
	return nil
}

func usdaFoodNutrientAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodNutrient) error {
	*o = UsdaFoodNutrient{}
	return nil
}

func testUsdaFoodNutrientsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UsdaFoodNutrient{}
	o := &UsdaFoodNutrient{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, usdaFoodNutrientDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UsdaFoodNutrient object: %s", err)
	}

	AddUsdaFoodNutrientHook(boil.BeforeInsertHook, usdaFoodNutrientBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	usdaFoodNutrientBeforeInsertHooks = []UsdaFoodNutrientHook{}

	AddUsdaFoodNutrientHook(boil.AfterInsertHook, usdaFoodNutrientAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	usdaFoodNutrientAfterInsertHooks = []UsdaFoodNutrientHook{}

	AddUsdaFoodNutrientHook(boil.AfterSelectHook, usdaFoodNutrientAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	usdaFoodNutrientAfterSelectHooks = []UsdaFoodNutrientHook{}

	AddUsdaFoodNutrientHook(boil.BeforeUpdateHook, usdaFoodNutrientBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	usdaFoodNutrientBeforeUpdateHooks = []UsdaFoodNutrientHook{}

	AddUsdaFoodNutrientHook(boil.AfterUpdateHook, usdaFoodNutrientAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	usdaFoodNutrientAfterUpdateHooks = []UsdaFoodNutrientHook{}

	AddUsdaFoodNutrientHook(boil.BeforeDeleteHook, usdaFoodNutrientBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	usdaFoodNutrientBeforeDeleteHooks = []UsdaFoodNutrientHook{}

	AddUsdaFoodNutrientHook(boil.AfterDeleteHook, usdaFoodNutrientAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	usdaFoodNutrientAfterDeleteHooks = []UsdaFoodNutrientHook{}

	AddUsdaFoodNutrientHook(boil.BeforeUpsertHook, usdaFoodNutrientBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	usdaFoodNutrientBeforeUpsertHooks = []UsdaFoodNutrientHook{}

	AddUsdaFoodNutrientHook(boil.AfterUpsertHook, usdaFoodNutrientAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	usdaFoodNutrientAfterUpsertHooks = []UsdaFoodNutrientHook{}
}

func testUsdaFoodNutrientsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodNutrient{}
	if err = randomize.Struct(seed, o, usdaFoodNutrientDBTypes, true, usdaFoodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodNutrient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaFoodNutrients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUsdaFoodNutrientsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodNutrient{}
	if err = randomize.Struct(seed, o, usdaFoodNutrientDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UsdaFoodNutrient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(usdaFoodNutrientColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UsdaFoodNutrients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUsdaFoodNutrientOneToOneUsdaSubSampleResultUsingFoodNutrientUsdaSubSampleResult(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign UsdaSubSampleResult
	var local UsdaFoodNutrient

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, usdaSubSampleResultDBTypes, true, usdaSubSampleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSubSampleResult struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, usdaFoodNutrientDBTypes, true, usdaFoodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodNutrient struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.FoodNutrientID = local.ID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.FoodNutrientUsdaSubSampleResult().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.FoodNutrientID != foreign.FoodNutrientID {
		t.Errorf("want: %v, got %v", foreign.FoodNutrientID, check.FoodNutrientID)
	}

	slice := UsdaFoodNutrientSlice{&local}
	if err = local.L.LoadFoodNutrientUsdaSubSampleResult(ctx, tx, false, (*[]*UsdaFoodNutrient)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FoodNutrientUsdaSubSampleResult == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.FoodNutrientUsdaSubSampleResult = nil
	if err = local.L.LoadFoodNutrientUsdaSubSampleResult(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FoodNutrientUsdaSubSampleResult == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUsdaFoodNutrientOneToOneSetOpUsdaSubSampleResultUsingFoodNutrientUsdaSubSampleResult(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFoodNutrient
	var b, c UsdaSubSampleResult

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodNutrientDBTypes, false, strmangle.SetComplement(usdaFoodNutrientPrimaryKeyColumns, usdaFoodNutrientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, usdaSubSampleResultDBTypes, false, strmangle.SetComplement(usdaSubSampleResultPrimaryKeyColumns, usdaSubSampleResultColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, usdaSubSampleResultDBTypes, false, strmangle.SetComplement(usdaSubSampleResultPrimaryKeyColumns, usdaSubSampleResultColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UsdaSubSampleResult{&b, &c} {
		err = a.SetFoodNutrientUsdaSubSampleResult(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.FoodNutrientUsdaSubSampleResult != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.FoodNutrient != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ID != x.FoodNutrientID {
			t.Error("foreign key was wrong value", a.ID)
		}

		if exists, err := UsdaSubSampleResultExists(ctx, tx, x.FoodNutrientID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'x' to exist")
		}

		if a.ID != x.FoodNutrientID {
			t.Error("foreign key was wrong value", a.ID, x.FoodNutrientID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testUsdaFoodNutrientToOneUsdaFoodNutrientDerivationUsingDerivation(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UsdaFoodNutrient
	var foreign UsdaFoodNutrientDerivation

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, usdaFoodNutrientDBTypes, true, usdaFoodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodNutrient struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, usdaFoodNutrientDerivationDBTypes, false, usdaFoodNutrientDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodNutrientDerivation struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.DerivationID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Derivation().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UsdaFoodNutrientSlice{&local}
	if err = local.L.LoadDerivation(ctx, tx, false, (*[]*UsdaFoodNutrient)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Derivation == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Derivation = nil
	if err = local.L.LoadDerivation(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Derivation == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUsdaFoodNutrientToOneSetOpUsdaFoodNutrientDerivationUsingDerivation(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFoodNutrient
	var b, c UsdaFoodNutrientDerivation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodNutrientDBTypes, false, strmangle.SetComplement(usdaFoodNutrientPrimaryKeyColumns, usdaFoodNutrientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, usdaFoodNutrientDerivationDBTypes, false, strmangle.SetComplement(usdaFoodNutrientDerivationPrimaryKeyColumns, usdaFoodNutrientDerivationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, usdaFoodNutrientDerivationDBTypes, false, strmangle.SetComplement(usdaFoodNutrientDerivationPrimaryKeyColumns, usdaFoodNutrientDerivationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UsdaFoodNutrientDerivation{&b, &c} {
		err = a.SetDerivation(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Derivation != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DerivationUsdaFoodNutrients[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.DerivationID, x.ID) {
			t.Error("foreign key was wrong value", a.DerivationID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DerivationID))
		reflect.Indirect(reflect.ValueOf(&a.DerivationID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.DerivationID, x.ID) {
			t.Error("foreign key was wrong value", a.DerivationID, x.ID)
		}
	}
}

func testUsdaFoodNutrientToOneRemoveOpUsdaFoodNutrientDerivationUsingDerivation(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFoodNutrient
	var b UsdaFoodNutrientDerivation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodNutrientDBTypes, false, strmangle.SetComplement(usdaFoodNutrientPrimaryKeyColumns, usdaFoodNutrientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, usdaFoodNutrientDerivationDBTypes, false, strmangle.SetComplement(usdaFoodNutrientDerivationPrimaryKeyColumns, usdaFoodNutrientDerivationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetDerivation(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveDerivation(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Derivation().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Derivation != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.DerivationID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.DerivationUsdaFoodNutrients) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testUsdaFoodNutrientsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodNutrient{}
	if err = randomize.Struct(seed, o, usdaFoodNutrientDBTypes, true, usdaFoodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodNutrient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsdaFoodNutrientsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodNutrient{}
	if err = randomize.Struct(seed, o, usdaFoodNutrientDBTypes, true, usdaFoodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodNutrient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UsdaFoodNutrientSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsdaFoodNutrientsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodNutrient{}
	if err = randomize.Struct(seed, o, usdaFoodNutrientDBTypes, true, usdaFoodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodNutrient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UsdaFoodNutrients().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	usdaFoodNutrientDBTypes = map[string]string{`ID`: `integer`, `FDCID`: `integer`, `NutrientID`: `integer`, `Amount`: `real`, `DataPoints`: `integer`, `DerivationID`: `integer`, `Min`: `real`, `Max`: `real`, `Median`: `real`, `Footnote`: `text`, `MinYearAcquired`: `text`}
	_                       = bytes.MinRead
)

func testUsdaFoodNutrientsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(usdaFoodNutrientPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(usdaFoodNutrientAllColumns) == len(usdaFoodNutrientPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodNutrient{}
	if err = randomize.Struct(seed, o, usdaFoodNutrientDBTypes, true, usdaFoodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodNutrient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaFoodNutrients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, usdaFoodNutrientDBTypes, true, usdaFoodNutrientPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodNutrient struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUsdaFoodNutrientsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(usdaFoodNutrientAllColumns) == len(usdaFoodNutrientPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodNutrient{}
	if err = randomize.Struct(seed, o, usdaFoodNutrientDBTypes, true, usdaFoodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodNutrient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaFoodNutrients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, usdaFoodNutrientDBTypes, true, usdaFoodNutrientPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodNutrient struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(usdaFoodNutrientAllColumns, usdaFoodNutrientPrimaryKeyColumns) {
		fields = usdaFoodNutrientAllColumns
	} else {
		fields = strmangle.SetComplement(
			usdaFoodNutrientAllColumns,
			usdaFoodNutrientPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UsdaFoodNutrientSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUsdaFoodNutrientsUpsert(t *testing.T) {
	t.Parallel()

	if len(usdaFoodNutrientAllColumns) == len(usdaFoodNutrientPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UsdaFoodNutrient{}
	if err = randomize.Struct(seed, &o, usdaFoodNutrientDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UsdaFoodNutrient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UsdaFoodNutrient: %s", err)
	}

	count, err := UsdaFoodNutrients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, usdaFoodNutrientDBTypes, false, usdaFoodNutrientPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodNutrient struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UsdaFoodNutrient: %s", err)
	}

	count, err = UsdaFoodNutrients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
