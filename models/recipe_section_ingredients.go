// Code generated by SQLBoiler 4.8.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// RecipeSectionIngredient is an object representing the database table.
type RecipeSectionIngredient struct {
	ID                 string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	SectionID          string      `boil:"section_id" json:"section_id" toml:"section_id" yaml:"section_id"`
	Sort               null.Int    `boil:"sort" json:"sort,omitempty" toml:"sort" yaml:"sort,omitempty"`
	IngredientID       null.String `boil:"ingredient_id" json:"ingredient_id,omitempty" toml:"ingredient_id" yaml:"ingredient_id,omitempty"`
	RecipeID           null.String `boil:"recipe_id" json:"recipe_id,omitempty" toml:"recipe_id" yaml:"recipe_id,omitempty"`
	Amounts            types.JSON  `boil:"amounts" json:"amounts" toml:"amounts" yaml:"amounts"`
	Adjective          null.String `boil:"adjective" json:"adjective,omitempty" toml:"adjective" yaml:"adjective,omitempty"`
	Original           null.String `boil:"original" json:"original,omitempty" toml:"original" yaml:"original,omitempty"`
	Optional           null.Bool   `boil:"optional" json:"optional,omitempty" toml:"optional" yaml:"optional,omitempty"`
	SubForIngredientID null.String `boil:"sub_for_ingredient_id" json:"sub_for_ingredient_id,omitempty" toml:"sub_for_ingredient_id" yaml:"sub_for_ingredient_id,omitempty"`

	R *recipeSectionIngredientR `boil:"rel" json:"rel" toml:"rel" yaml:"rel"`
	L recipeSectionIngredientL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RecipeSectionIngredientColumns = struct {
	ID                 string
	SectionID          string
	Sort               string
	IngredientID       string
	RecipeID           string
	Amounts            string
	Adjective          string
	Original           string
	Optional           string
	SubForIngredientID string
}{
	ID:                 "id",
	SectionID:          "section_id",
	Sort:               "sort",
	IngredientID:       "ingredient_id",
	RecipeID:           "recipe_id",
	Amounts:            "amounts",
	Adjective:          "adjective",
	Original:           "original",
	Optional:           "optional",
	SubForIngredientID: "sub_for_ingredient_id",
}

var RecipeSectionIngredientTableColumns = struct {
	ID                 string
	SectionID          string
	Sort               string
	IngredientID       string
	RecipeID           string
	Amounts            string
	Adjective          string
	Original           string
	Optional           string
	SubForIngredientID string
}{
	ID:                 "recipe_section_ingredients.id",
	SectionID:          "recipe_section_ingredients.section_id",
	Sort:               "recipe_section_ingredients.sort",
	IngredientID:       "recipe_section_ingredients.ingredient_id",
	RecipeID:           "recipe_section_ingredients.recipe_id",
	Amounts:            "recipe_section_ingredients.amounts",
	Adjective:          "recipe_section_ingredients.adjective",
	Original:           "recipe_section_ingredients.original",
	Optional:           "recipe_section_ingredients.optional",
	SubForIngredientID: "recipe_section_ingredients.sub_for_ingredient_id",
}

// Generated where

var RecipeSectionIngredientWhere = struct {
	ID                 whereHelperstring
	SectionID          whereHelperstring
	Sort               whereHelpernull_Int
	IngredientID       whereHelpernull_String
	RecipeID           whereHelpernull_String
	Amounts            whereHelpertypes_JSON
	Adjective          whereHelpernull_String
	Original           whereHelpernull_String
	Optional           whereHelpernull_Bool
	SubForIngredientID whereHelpernull_String
}{
	ID:                 whereHelperstring{field: "\"recipe_section_ingredients\".\"id\""},
	SectionID:          whereHelperstring{field: "\"recipe_section_ingredients\".\"section_id\""},
	Sort:               whereHelpernull_Int{field: "\"recipe_section_ingredients\".\"sort\""},
	IngredientID:       whereHelpernull_String{field: "\"recipe_section_ingredients\".\"ingredient_id\""},
	RecipeID:           whereHelpernull_String{field: "\"recipe_section_ingredients\".\"recipe_id\""},
	Amounts:            whereHelpertypes_JSON{field: "\"recipe_section_ingredients\".\"amounts\""},
	Adjective:          whereHelpernull_String{field: "\"recipe_section_ingredients\".\"adjective\""},
	Original:           whereHelpernull_String{field: "\"recipe_section_ingredients\".\"original\""},
	Optional:           whereHelpernull_Bool{field: "\"recipe_section_ingredients\".\"optional\""},
	SubForIngredientID: whereHelpernull_String{field: "\"recipe_section_ingredients\".\"sub_for_ingredient_id\""},
}

// RecipeSectionIngredientRels is where relationship names are stored.
var RecipeSectionIngredientRels = struct {
	Ingredient                               string
	Recipe                                   string
	Section                                  string
	SubForIngredient                         string
	SubForIngredientRecipeSectionIngredients string
}{
	Ingredient:                               "Ingredient",
	Recipe:                                   "Recipe",
	Section:                                  "Section",
	SubForIngredient:                         "SubForIngredient",
	SubForIngredientRecipeSectionIngredients: "SubForIngredientRecipeSectionIngredients",
}

// recipeSectionIngredientR is where relationships are stored.
type recipeSectionIngredientR struct {
	Ingredient                               *Ingredient                  `boil:"Ingredient" json:"Ingredient" toml:"Ingredient" yaml:"Ingredient"`
	Recipe                                   *Recipe                      `boil:"Recipe" json:"Recipe" toml:"Recipe" yaml:"Recipe"`
	Section                                  *RecipeSection               `boil:"Section" json:"Section" toml:"Section" yaml:"Section"`
	SubForIngredient                         *RecipeSectionIngredient     `boil:"SubForIngredient" json:"SubForIngredient" toml:"SubForIngredient" yaml:"SubForIngredient"`
	SubForIngredientRecipeSectionIngredients RecipeSectionIngredientSlice `boil:"SubForIngredientRecipeSectionIngredients" json:"SubForIngredientRecipeSectionIngredients" toml:"SubForIngredientRecipeSectionIngredients" yaml:"SubForIngredientRecipeSectionIngredients"`
}

// NewStruct creates a new relationship struct
func (*recipeSectionIngredientR) NewStruct() *recipeSectionIngredientR {
	return &recipeSectionIngredientR{}
}

// recipeSectionIngredientL is where Load methods for each relationship are stored.
type recipeSectionIngredientL struct{}

var (
	recipeSectionIngredientAllColumns            = []string{"id", "section_id", "sort", "ingredient_id", "recipe_id", "amounts", "adjective", "original", "optional", "sub_for_ingredient_id"}
	recipeSectionIngredientColumnsWithoutDefault = []string{"id", "section_id", "sort", "ingredient_id", "recipe_id", "amounts", "adjective", "original", "sub_for_ingredient_id"}
	recipeSectionIngredientColumnsWithDefault    = []string{"optional"}
	recipeSectionIngredientPrimaryKeyColumns     = []string{"id"}
)

type (
	// RecipeSectionIngredientSlice is an alias for a slice of pointers to RecipeSectionIngredient.
	// This should almost always be used instead of []RecipeSectionIngredient.
	RecipeSectionIngredientSlice []*RecipeSectionIngredient
	// RecipeSectionIngredientHook is the signature for custom RecipeSectionIngredient hook methods
	RecipeSectionIngredientHook func(context.Context, boil.ContextExecutor, *RecipeSectionIngredient) error

	recipeSectionIngredientQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	recipeSectionIngredientType                 = reflect.TypeOf(&RecipeSectionIngredient{})
	recipeSectionIngredientMapping              = queries.MakeStructMapping(recipeSectionIngredientType)
	recipeSectionIngredientPrimaryKeyMapping, _ = queries.BindMapping(recipeSectionIngredientType, recipeSectionIngredientMapping, recipeSectionIngredientPrimaryKeyColumns)
	recipeSectionIngredientInsertCacheMut       sync.RWMutex
	recipeSectionIngredientInsertCache          = make(map[string]insertCache)
	recipeSectionIngredientUpdateCacheMut       sync.RWMutex
	recipeSectionIngredientUpdateCache          = make(map[string]updateCache)
	recipeSectionIngredientUpsertCacheMut       sync.RWMutex
	recipeSectionIngredientUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var recipeSectionIngredientBeforeInsertHooks []RecipeSectionIngredientHook
var recipeSectionIngredientBeforeUpdateHooks []RecipeSectionIngredientHook
var recipeSectionIngredientBeforeDeleteHooks []RecipeSectionIngredientHook
var recipeSectionIngredientBeforeUpsertHooks []RecipeSectionIngredientHook

var recipeSectionIngredientAfterInsertHooks []RecipeSectionIngredientHook
var recipeSectionIngredientAfterSelectHooks []RecipeSectionIngredientHook
var recipeSectionIngredientAfterUpdateHooks []RecipeSectionIngredientHook
var recipeSectionIngredientAfterDeleteHooks []RecipeSectionIngredientHook
var recipeSectionIngredientAfterUpsertHooks []RecipeSectionIngredientHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RecipeSectionIngredient) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeSectionIngredientBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RecipeSectionIngredient) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeSectionIngredientBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RecipeSectionIngredient) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeSectionIngredientBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RecipeSectionIngredient) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeSectionIngredientBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RecipeSectionIngredient) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeSectionIngredientAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RecipeSectionIngredient) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeSectionIngredientAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RecipeSectionIngredient) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeSectionIngredientAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RecipeSectionIngredient) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeSectionIngredientAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RecipeSectionIngredient) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeSectionIngredientAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRecipeSectionIngredientHook registers your hook function for all future operations.
func AddRecipeSectionIngredientHook(hookPoint boil.HookPoint, recipeSectionIngredientHook RecipeSectionIngredientHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		recipeSectionIngredientBeforeInsertHooks = append(recipeSectionIngredientBeforeInsertHooks, recipeSectionIngredientHook)
	case boil.BeforeUpdateHook:
		recipeSectionIngredientBeforeUpdateHooks = append(recipeSectionIngredientBeforeUpdateHooks, recipeSectionIngredientHook)
	case boil.BeforeDeleteHook:
		recipeSectionIngredientBeforeDeleteHooks = append(recipeSectionIngredientBeforeDeleteHooks, recipeSectionIngredientHook)
	case boil.BeforeUpsertHook:
		recipeSectionIngredientBeforeUpsertHooks = append(recipeSectionIngredientBeforeUpsertHooks, recipeSectionIngredientHook)
	case boil.AfterInsertHook:
		recipeSectionIngredientAfterInsertHooks = append(recipeSectionIngredientAfterInsertHooks, recipeSectionIngredientHook)
	case boil.AfterSelectHook:
		recipeSectionIngredientAfterSelectHooks = append(recipeSectionIngredientAfterSelectHooks, recipeSectionIngredientHook)
	case boil.AfterUpdateHook:
		recipeSectionIngredientAfterUpdateHooks = append(recipeSectionIngredientAfterUpdateHooks, recipeSectionIngredientHook)
	case boil.AfterDeleteHook:
		recipeSectionIngredientAfterDeleteHooks = append(recipeSectionIngredientAfterDeleteHooks, recipeSectionIngredientHook)
	case boil.AfterUpsertHook:
		recipeSectionIngredientAfterUpsertHooks = append(recipeSectionIngredientAfterUpsertHooks, recipeSectionIngredientHook)
	}
}

// One returns a single recipeSectionIngredient record from the query.
func (q recipeSectionIngredientQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RecipeSectionIngredient, error) {
	o := &RecipeSectionIngredient{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for recipe_section_ingredients")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RecipeSectionIngredient records from the query.
func (q recipeSectionIngredientQuery) All(ctx context.Context, exec boil.ContextExecutor) (RecipeSectionIngredientSlice, error) {
	var o []*RecipeSectionIngredient

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RecipeSectionIngredient slice")
	}

	if len(recipeSectionIngredientAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RecipeSectionIngredient records in the query.
func (q recipeSectionIngredientQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count recipe_section_ingredients rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q recipeSectionIngredientQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if recipe_section_ingredients exists")
	}

	return count > 0, nil
}

// Ingredient pointed to by the foreign key.
func (o *RecipeSectionIngredient) Ingredient(mods ...qm.QueryMod) ingredientQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IngredientID),
	}

	queryMods = append(queryMods, mods...)

	query := Ingredients(queryMods...)
	queries.SetFrom(query.Query, "\"ingredients\"")

	return query
}

// Recipe pointed to by the foreign key.
func (o *RecipeSectionIngredient) Recipe(mods ...qm.QueryMod) recipeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RecipeID),
	}

	queryMods = append(queryMods, mods...)

	query := Recipes(queryMods...)
	queries.SetFrom(query.Query, "\"recipes\"")

	return query
}

// Section pointed to by the foreign key.
func (o *RecipeSectionIngredient) Section(mods ...qm.QueryMod) recipeSectionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SectionID),
	}

	queryMods = append(queryMods, mods...)

	query := RecipeSections(queryMods...)
	queries.SetFrom(query.Query, "\"recipe_sections\"")

	return query
}

// SubForIngredient pointed to by the foreign key.
func (o *RecipeSectionIngredient) SubForIngredient(mods ...qm.QueryMod) recipeSectionIngredientQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SubForIngredientID),
	}

	queryMods = append(queryMods, mods...)

	query := RecipeSectionIngredients(queryMods...)
	queries.SetFrom(query.Query, "\"recipe_section_ingredients\"")

	return query
}

// SubForIngredientRecipeSectionIngredients retrieves all the recipe_section_ingredient's RecipeSectionIngredients with an executor via sub_for_ingredient_id column.
func (o *RecipeSectionIngredient) SubForIngredientRecipeSectionIngredients(mods ...qm.QueryMod) recipeSectionIngredientQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"recipe_section_ingredients\".\"sub_for_ingredient_id\"=?", o.ID),
	)

	query := RecipeSectionIngredients(queryMods...)
	queries.SetFrom(query.Query, "\"recipe_section_ingredients\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"recipe_section_ingredients\".*"})
	}

	return query
}

// LoadIngredient allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (recipeSectionIngredientL) LoadIngredient(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipeSectionIngredient interface{}, mods queries.Applicator) error {
	var slice []*RecipeSectionIngredient
	var object *RecipeSectionIngredient

	if singular {
		object = maybeRecipeSectionIngredient.(*RecipeSectionIngredient)
	} else {
		slice = *maybeRecipeSectionIngredient.(*[]*RecipeSectionIngredient)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeSectionIngredientR{}
		}
		if !queries.IsNil(object.IngredientID) {
			args = append(args, object.IngredientID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeSectionIngredientR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.IngredientID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.IngredientID) {
				args = append(args, obj.IngredientID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`ingredients`),
		qm.WhereIn(`ingredients.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Ingredient")
	}

	var resultSlice []*Ingredient
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Ingredient")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for ingredients")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ingredients")
	}

	if len(recipeSectionIngredientAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Ingredient = foreign
		if foreign.R == nil {
			foreign.R = &ingredientR{}
		}
		foreign.R.RecipeSectionIngredients = append(foreign.R.RecipeSectionIngredients, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.IngredientID, foreign.ID) {
				local.R.Ingredient = foreign
				if foreign.R == nil {
					foreign.R = &ingredientR{}
				}
				foreign.R.RecipeSectionIngredients = append(foreign.R.RecipeSectionIngredients, local)
				break
			}
		}
	}

	return nil
}

// LoadRecipe allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (recipeSectionIngredientL) LoadRecipe(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipeSectionIngredient interface{}, mods queries.Applicator) error {
	var slice []*RecipeSectionIngredient
	var object *RecipeSectionIngredient

	if singular {
		object = maybeRecipeSectionIngredient.(*RecipeSectionIngredient)
	} else {
		slice = *maybeRecipeSectionIngredient.(*[]*RecipeSectionIngredient)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeSectionIngredientR{}
		}
		if !queries.IsNil(object.RecipeID) {
			args = append(args, object.RecipeID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeSectionIngredientR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.RecipeID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.RecipeID) {
				args = append(args, obj.RecipeID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`recipes`),
		qm.WhereIn(`recipes.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Recipe")
	}

	var resultSlice []*Recipe
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Recipe")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for recipes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for recipes")
	}

	if len(recipeSectionIngredientAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Recipe = foreign
		if foreign.R == nil {
			foreign.R = &recipeR{}
		}
		foreign.R.RecipeSectionIngredients = append(foreign.R.RecipeSectionIngredients, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RecipeID, foreign.ID) {
				local.R.Recipe = foreign
				if foreign.R == nil {
					foreign.R = &recipeR{}
				}
				foreign.R.RecipeSectionIngredients = append(foreign.R.RecipeSectionIngredients, local)
				break
			}
		}
	}

	return nil
}

// LoadSection allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (recipeSectionIngredientL) LoadSection(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipeSectionIngredient interface{}, mods queries.Applicator) error {
	var slice []*RecipeSectionIngredient
	var object *RecipeSectionIngredient

	if singular {
		object = maybeRecipeSectionIngredient.(*RecipeSectionIngredient)
	} else {
		slice = *maybeRecipeSectionIngredient.(*[]*RecipeSectionIngredient)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeSectionIngredientR{}
		}
		args = append(args, object.SectionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeSectionIngredientR{}
			}

			for _, a := range args {
				if a == obj.SectionID {
					continue Outer
				}
			}

			args = append(args, obj.SectionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`recipe_sections`),
		qm.WhereIn(`recipe_sections.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RecipeSection")
	}

	var resultSlice []*RecipeSection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RecipeSection")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for recipe_sections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for recipe_sections")
	}

	if len(recipeSectionIngredientAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Section = foreign
		if foreign.R == nil {
			foreign.R = &recipeSectionR{}
		}
		foreign.R.SectionRecipeSectionIngredients = append(foreign.R.SectionRecipeSectionIngredients, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SectionID == foreign.ID {
				local.R.Section = foreign
				if foreign.R == nil {
					foreign.R = &recipeSectionR{}
				}
				foreign.R.SectionRecipeSectionIngredients = append(foreign.R.SectionRecipeSectionIngredients, local)
				break
			}
		}
	}

	return nil
}

// LoadSubForIngredient allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (recipeSectionIngredientL) LoadSubForIngredient(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipeSectionIngredient interface{}, mods queries.Applicator) error {
	var slice []*RecipeSectionIngredient
	var object *RecipeSectionIngredient

	if singular {
		object = maybeRecipeSectionIngredient.(*RecipeSectionIngredient)
	} else {
		slice = *maybeRecipeSectionIngredient.(*[]*RecipeSectionIngredient)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeSectionIngredientR{}
		}
		if !queries.IsNil(object.SubForIngredientID) {
			args = append(args, object.SubForIngredientID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeSectionIngredientR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SubForIngredientID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SubForIngredientID) {
				args = append(args, obj.SubForIngredientID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`recipe_section_ingredients`),
		qm.WhereIn(`recipe_section_ingredients.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RecipeSectionIngredient")
	}

	var resultSlice []*RecipeSectionIngredient
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RecipeSectionIngredient")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for recipe_section_ingredients")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for recipe_section_ingredients")
	}

	if len(recipeSectionIngredientAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SubForIngredient = foreign
		if foreign.R == nil {
			foreign.R = &recipeSectionIngredientR{}
		}
		foreign.R.SubForIngredientRecipeSectionIngredients = append(foreign.R.SubForIngredientRecipeSectionIngredients, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SubForIngredientID, foreign.ID) {
				local.R.SubForIngredient = foreign
				if foreign.R == nil {
					foreign.R = &recipeSectionIngredientR{}
				}
				foreign.R.SubForIngredientRecipeSectionIngredients = append(foreign.R.SubForIngredientRecipeSectionIngredients, local)
				break
			}
		}
	}

	return nil
}

// LoadSubForIngredientRecipeSectionIngredients allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (recipeSectionIngredientL) LoadSubForIngredientRecipeSectionIngredients(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipeSectionIngredient interface{}, mods queries.Applicator) error {
	var slice []*RecipeSectionIngredient
	var object *RecipeSectionIngredient

	if singular {
		object = maybeRecipeSectionIngredient.(*RecipeSectionIngredient)
	} else {
		slice = *maybeRecipeSectionIngredient.(*[]*RecipeSectionIngredient)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeSectionIngredientR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeSectionIngredientR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`recipe_section_ingredients`),
		qm.WhereIn(`recipe_section_ingredients.sub_for_ingredient_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load recipe_section_ingredients")
	}

	var resultSlice []*RecipeSectionIngredient
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice recipe_section_ingredients")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on recipe_section_ingredients")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for recipe_section_ingredients")
	}

	if len(recipeSectionIngredientAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SubForIngredientRecipeSectionIngredients = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &recipeSectionIngredientR{}
			}
			foreign.R.SubForIngredient = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SubForIngredientID) {
				local.R.SubForIngredientRecipeSectionIngredients = append(local.R.SubForIngredientRecipeSectionIngredients, foreign)
				if foreign.R == nil {
					foreign.R = &recipeSectionIngredientR{}
				}
				foreign.R.SubForIngredient = local
				break
			}
		}
	}

	return nil
}

// SetIngredient of the recipeSectionIngredient to the related item.
// Sets o.R.Ingredient to related.
// Adds o to related.R.RecipeSectionIngredients.
func (o *RecipeSectionIngredient) SetIngredient(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Ingredient) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"recipe_section_ingredients\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"ingredient_id"}),
		strmangle.WhereClause("\"", "\"", 2, recipeSectionIngredientPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.IngredientID, related.ID)
	if o.R == nil {
		o.R = &recipeSectionIngredientR{
			Ingredient: related,
		}
	} else {
		o.R.Ingredient = related
	}

	if related.R == nil {
		related.R = &ingredientR{
			RecipeSectionIngredients: RecipeSectionIngredientSlice{o},
		}
	} else {
		related.R.RecipeSectionIngredients = append(related.R.RecipeSectionIngredients, o)
	}

	return nil
}

// RemoveIngredient relationship.
// Sets o.R.Ingredient to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *RecipeSectionIngredient) RemoveIngredient(ctx context.Context, exec boil.ContextExecutor, related *Ingredient) error {
	var err error

	queries.SetScanner(&o.IngredientID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("ingredient_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Ingredient = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RecipeSectionIngredients {
		if queries.Equal(o.IngredientID, ri.IngredientID) {
			continue
		}

		ln := len(related.R.RecipeSectionIngredients)
		if ln > 1 && i < ln-1 {
			related.R.RecipeSectionIngredients[i] = related.R.RecipeSectionIngredients[ln-1]
		}
		related.R.RecipeSectionIngredients = related.R.RecipeSectionIngredients[:ln-1]
		break
	}
	return nil
}

// SetRecipe of the recipeSectionIngredient to the related item.
// Sets o.R.Recipe to related.
// Adds o to related.R.RecipeSectionIngredients.
func (o *RecipeSectionIngredient) SetRecipe(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Recipe) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"recipe_section_ingredients\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"recipe_id"}),
		strmangle.WhereClause("\"", "\"", 2, recipeSectionIngredientPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RecipeID, related.ID)
	if o.R == nil {
		o.R = &recipeSectionIngredientR{
			Recipe: related,
		}
	} else {
		o.R.Recipe = related
	}

	if related.R == nil {
		related.R = &recipeR{
			RecipeSectionIngredients: RecipeSectionIngredientSlice{o},
		}
	} else {
		related.R.RecipeSectionIngredients = append(related.R.RecipeSectionIngredients, o)
	}

	return nil
}

// RemoveRecipe relationship.
// Sets o.R.Recipe to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *RecipeSectionIngredient) RemoveRecipe(ctx context.Context, exec boil.ContextExecutor, related *Recipe) error {
	var err error

	queries.SetScanner(&o.RecipeID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("recipe_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Recipe = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RecipeSectionIngredients {
		if queries.Equal(o.RecipeID, ri.RecipeID) {
			continue
		}

		ln := len(related.R.RecipeSectionIngredients)
		if ln > 1 && i < ln-1 {
			related.R.RecipeSectionIngredients[i] = related.R.RecipeSectionIngredients[ln-1]
		}
		related.R.RecipeSectionIngredients = related.R.RecipeSectionIngredients[:ln-1]
		break
	}
	return nil
}

// SetSection of the recipeSectionIngredient to the related item.
// Sets o.R.Section to related.
// Adds o to related.R.SectionRecipeSectionIngredients.
func (o *RecipeSectionIngredient) SetSection(ctx context.Context, exec boil.ContextExecutor, insert bool, related *RecipeSection) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"recipe_section_ingredients\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"section_id"}),
		strmangle.WhereClause("\"", "\"", 2, recipeSectionIngredientPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SectionID = related.ID
	if o.R == nil {
		o.R = &recipeSectionIngredientR{
			Section: related,
		}
	} else {
		o.R.Section = related
	}

	if related.R == nil {
		related.R = &recipeSectionR{
			SectionRecipeSectionIngredients: RecipeSectionIngredientSlice{o},
		}
	} else {
		related.R.SectionRecipeSectionIngredients = append(related.R.SectionRecipeSectionIngredients, o)
	}

	return nil
}

// SetSubForIngredient of the recipeSectionIngredient to the related item.
// Sets o.R.SubForIngredient to related.
// Adds o to related.R.SubForIngredientRecipeSectionIngredients.
func (o *RecipeSectionIngredient) SetSubForIngredient(ctx context.Context, exec boil.ContextExecutor, insert bool, related *RecipeSectionIngredient) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"recipe_section_ingredients\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"sub_for_ingredient_id"}),
		strmangle.WhereClause("\"", "\"", 2, recipeSectionIngredientPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SubForIngredientID, related.ID)
	if o.R == nil {
		o.R = &recipeSectionIngredientR{
			SubForIngredient: related,
		}
	} else {
		o.R.SubForIngredient = related
	}

	if related.R == nil {
		related.R = &recipeSectionIngredientR{
			SubForIngredientRecipeSectionIngredients: RecipeSectionIngredientSlice{o},
		}
	} else {
		related.R.SubForIngredientRecipeSectionIngredients = append(related.R.SubForIngredientRecipeSectionIngredients, o)
	}

	return nil
}

// RemoveSubForIngredient relationship.
// Sets o.R.SubForIngredient to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *RecipeSectionIngredient) RemoveSubForIngredient(ctx context.Context, exec boil.ContextExecutor, related *RecipeSectionIngredient) error {
	var err error

	queries.SetScanner(&o.SubForIngredientID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("sub_for_ingredient_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.SubForIngredient = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SubForIngredientRecipeSectionIngredients {
		if queries.Equal(o.SubForIngredientID, ri.SubForIngredientID) {
			continue
		}

		ln := len(related.R.SubForIngredientRecipeSectionIngredients)
		if ln > 1 && i < ln-1 {
			related.R.SubForIngredientRecipeSectionIngredients[i] = related.R.SubForIngredientRecipeSectionIngredients[ln-1]
		}
		related.R.SubForIngredientRecipeSectionIngredients = related.R.SubForIngredientRecipeSectionIngredients[:ln-1]
		break
	}
	return nil
}

// AddSubForIngredientRecipeSectionIngredients adds the given related objects to the existing relationships
// of the recipe_section_ingredient, optionally inserting them as new records.
// Appends related to o.R.SubForIngredientRecipeSectionIngredients.
// Sets related.R.SubForIngredient appropriately.
func (o *RecipeSectionIngredient) AddSubForIngredientRecipeSectionIngredients(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RecipeSectionIngredient) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SubForIngredientID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"recipe_section_ingredients\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sub_for_ingredient_id"}),
				strmangle.WhereClause("\"", "\"", 2, recipeSectionIngredientPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SubForIngredientID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &recipeSectionIngredientR{
			SubForIngredientRecipeSectionIngredients: related,
		}
	} else {
		o.R.SubForIngredientRecipeSectionIngredients = append(o.R.SubForIngredientRecipeSectionIngredients, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &recipeSectionIngredientR{
				SubForIngredient: o,
			}
		} else {
			rel.R.SubForIngredient = o
		}
	}
	return nil
}

// SetSubForIngredientRecipeSectionIngredients removes all previously related items of the
// recipe_section_ingredient replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SubForIngredient's SubForIngredientRecipeSectionIngredients accordingly.
// Replaces o.R.SubForIngredientRecipeSectionIngredients with related.
// Sets related.R.SubForIngredient's SubForIngredientRecipeSectionIngredients accordingly.
func (o *RecipeSectionIngredient) SetSubForIngredientRecipeSectionIngredients(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RecipeSectionIngredient) error {
	query := "update \"recipe_section_ingredients\" set \"sub_for_ingredient_id\" = null where \"sub_for_ingredient_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SubForIngredientRecipeSectionIngredients {
			queries.SetScanner(&rel.SubForIngredientID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.SubForIngredient = nil
		}

		o.R.SubForIngredientRecipeSectionIngredients = nil
	}
	return o.AddSubForIngredientRecipeSectionIngredients(ctx, exec, insert, related...)
}

// RemoveSubForIngredientRecipeSectionIngredients relationships from objects passed in.
// Removes related items from R.SubForIngredientRecipeSectionIngredients (uses pointer comparison, removal does not keep order)
// Sets related.R.SubForIngredient.
func (o *RecipeSectionIngredient) RemoveSubForIngredientRecipeSectionIngredients(ctx context.Context, exec boil.ContextExecutor, related ...*RecipeSectionIngredient) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SubForIngredientID, nil)
		if rel.R != nil {
			rel.R.SubForIngredient = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("sub_for_ingredient_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SubForIngredientRecipeSectionIngredients {
			if rel != ri {
				continue
			}

			ln := len(o.R.SubForIngredientRecipeSectionIngredients)
			if ln > 1 && i < ln-1 {
				o.R.SubForIngredientRecipeSectionIngredients[i] = o.R.SubForIngredientRecipeSectionIngredients[ln-1]
			}
			o.R.SubForIngredientRecipeSectionIngredients = o.R.SubForIngredientRecipeSectionIngredients[:ln-1]
			break
		}
	}

	return nil
}

// RecipeSectionIngredients retrieves all the records using an executor.
func RecipeSectionIngredients(mods ...qm.QueryMod) recipeSectionIngredientQuery {
	mods = append(mods, qm.From("\"recipe_section_ingredients\""))
	return recipeSectionIngredientQuery{NewQuery(mods...)}
}

// FindRecipeSectionIngredient retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRecipeSectionIngredient(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*RecipeSectionIngredient, error) {
	recipeSectionIngredientObj := &RecipeSectionIngredient{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"recipe_section_ingredients\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, recipeSectionIngredientObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from recipe_section_ingredients")
	}

	if err = recipeSectionIngredientObj.doAfterSelectHooks(ctx, exec); err != nil {
		return recipeSectionIngredientObj, err
	}

	return recipeSectionIngredientObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RecipeSectionIngredient) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no recipe_section_ingredients provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recipeSectionIngredientColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	recipeSectionIngredientInsertCacheMut.RLock()
	cache, cached := recipeSectionIngredientInsertCache[key]
	recipeSectionIngredientInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			recipeSectionIngredientAllColumns,
			recipeSectionIngredientColumnsWithDefault,
			recipeSectionIngredientColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(recipeSectionIngredientType, recipeSectionIngredientMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(recipeSectionIngredientType, recipeSectionIngredientMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"recipe_section_ingredients\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"recipe_section_ingredients\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into recipe_section_ingredients")
	}

	if !cached {
		recipeSectionIngredientInsertCacheMut.Lock()
		recipeSectionIngredientInsertCache[key] = cache
		recipeSectionIngredientInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RecipeSectionIngredient.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RecipeSectionIngredient) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	recipeSectionIngredientUpdateCacheMut.RLock()
	cache, cached := recipeSectionIngredientUpdateCache[key]
	recipeSectionIngredientUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			recipeSectionIngredientAllColumns,
			recipeSectionIngredientPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update recipe_section_ingredients, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"recipe_section_ingredients\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, recipeSectionIngredientPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(recipeSectionIngredientType, recipeSectionIngredientMapping, append(wl, recipeSectionIngredientPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update recipe_section_ingredients row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for recipe_section_ingredients")
	}

	if !cached {
		recipeSectionIngredientUpdateCacheMut.Lock()
		recipeSectionIngredientUpdateCache[key] = cache
		recipeSectionIngredientUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q recipeSectionIngredientQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for recipe_section_ingredients")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for recipe_section_ingredients")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RecipeSectionIngredientSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipeSectionIngredientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"recipe_section_ingredients\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, recipeSectionIngredientPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in recipeSectionIngredient slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all recipeSectionIngredient")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RecipeSectionIngredient) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no recipe_section_ingredients provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recipeSectionIngredientColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	recipeSectionIngredientUpsertCacheMut.RLock()
	cache, cached := recipeSectionIngredientUpsertCache[key]
	recipeSectionIngredientUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			recipeSectionIngredientAllColumns,
			recipeSectionIngredientColumnsWithDefault,
			recipeSectionIngredientColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			recipeSectionIngredientAllColumns,
			recipeSectionIngredientPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert recipe_section_ingredients, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(recipeSectionIngredientPrimaryKeyColumns))
			copy(conflict, recipeSectionIngredientPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"recipe_section_ingredients\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(recipeSectionIngredientType, recipeSectionIngredientMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(recipeSectionIngredientType, recipeSectionIngredientMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert recipe_section_ingredients")
	}

	if !cached {
		recipeSectionIngredientUpsertCacheMut.Lock()
		recipeSectionIngredientUpsertCache[key] = cache
		recipeSectionIngredientUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RecipeSectionIngredient record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RecipeSectionIngredient) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RecipeSectionIngredient provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), recipeSectionIngredientPrimaryKeyMapping)
	sql := "DELETE FROM \"recipe_section_ingredients\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from recipe_section_ingredients")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for recipe_section_ingredients")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q recipeSectionIngredientQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no recipeSectionIngredientQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from recipe_section_ingredients")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for recipe_section_ingredients")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RecipeSectionIngredientSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(recipeSectionIngredientBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipeSectionIngredientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"recipe_section_ingredients\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, recipeSectionIngredientPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from recipeSectionIngredient slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for recipe_section_ingredients")
	}

	if len(recipeSectionIngredientAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RecipeSectionIngredient) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRecipeSectionIngredient(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RecipeSectionIngredientSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RecipeSectionIngredientSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipeSectionIngredientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"recipe_section_ingredients\".* FROM \"recipe_section_ingredients\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, recipeSectionIngredientPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RecipeSectionIngredientSlice")
	}

	*o = slice

	return nil
}

// RecipeSectionIngredientExists checks if the RecipeSectionIngredient row exists.
func RecipeSectionIngredientExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"recipe_section_ingredients\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if recipe_section_ingredients exists")
	}

	return exists, nil
}
