// Code generated by SQLBoiler 4.8.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUsdaFoodComponents(t *testing.T) {
	t.Parallel()

	query := UsdaFoodComponents()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUsdaFoodComponentsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodComponent{}
	if err = randomize.Struct(seed, o, usdaFoodComponentDBTypes, true, usdaFoodComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaFoodComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaFoodComponentsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodComponent{}
	if err = randomize.Struct(seed, o, usdaFoodComponentDBTypes, true, usdaFoodComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UsdaFoodComponents().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaFoodComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaFoodComponentsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodComponent{}
	if err = randomize.Struct(seed, o, usdaFoodComponentDBTypes, true, usdaFoodComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UsdaFoodComponentSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaFoodComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaFoodComponentsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodComponent{}
	if err = randomize.Struct(seed, o, usdaFoodComponentDBTypes, true, usdaFoodComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UsdaFoodComponentExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if UsdaFoodComponent exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UsdaFoodComponentExists to return true, but got false.")
	}
}

func testUsdaFoodComponentsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodComponent{}
	if err = randomize.Struct(seed, o, usdaFoodComponentDBTypes, true, usdaFoodComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	usdaFoodComponentFound, err := FindUsdaFoodComponent(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if usdaFoodComponentFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUsdaFoodComponentsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodComponent{}
	if err = randomize.Struct(seed, o, usdaFoodComponentDBTypes, true, usdaFoodComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UsdaFoodComponents().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUsdaFoodComponentsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodComponent{}
	if err = randomize.Struct(seed, o, usdaFoodComponentDBTypes, true, usdaFoodComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UsdaFoodComponents().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUsdaFoodComponentsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	usdaFoodComponentOne := &UsdaFoodComponent{}
	usdaFoodComponentTwo := &UsdaFoodComponent{}
	if err = randomize.Struct(seed, usdaFoodComponentOne, usdaFoodComponentDBTypes, false, usdaFoodComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodComponent struct: %s", err)
	}
	if err = randomize.Struct(seed, usdaFoodComponentTwo, usdaFoodComponentDBTypes, false, usdaFoodComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = usdaFoodComponentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = usdaFoodComponentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UsdaFoodComponents().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUsdaFoodComponentsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	usdaFoodComponentOne := &UsdaFoodComponent{}
	usdaFoodComponentTwo := &UsdaFoodComponent{}
	if err = randomize.Struct(seed, usdaFoodComponentOne, usdaFoodComponentDBTypes, false, usdaFoodComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodComponent struct: %s", err)
	}
	if err = randomize.Struct(seed, usdaFoodComponentTwo, usdaFoodComponentDBTypes, false, usdaFoodComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = usdaFoodComponentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = usdaFoodComponentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaFoodComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func usdaFoodComponentBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodComponent) error {
	*o = UsdaFoodComponent{}
	return nil
}

func usdaFoodComponentAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodComponent) error {
	*o = UsdaFoodComponent{}
	return nil
}

func usdaFoodComponentAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodComponent) error {
	*o = UsdaFoodComponent{}
	return nil
}

func usdaFoodComponentBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodComponent) error {
	*o = UsdaFoodComponent{}
	return nil
}

func usdaFoodComponentAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodComponent) error {
	*o = UsdaFoodComponent{}
	return nil
}

func usdaFoodComponentBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodComponent) error {
	*o = UsdaFoodComponent{}
	return nil
}

func usdaFoodComponentAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodComponent) error {
	*o = UsdaFoodComponent{}
	return nil
}

func usdaFoodComponentBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodComponent) error {
	*o = UsdaFoodComponent{}
	return nil
}

func usdaFoodComponentAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodComponent) error {
	*o = UsdaFoodComponent{}
	return nil
}

func testUsdaFoodComponentsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UsdaFoodComponent{}
	o := &UsdaFoodComponent{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, usdaFoodComponentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UsdaFoodComponent object: %s", err)
	}

	AddUsdaFoodComponentHook(boil.BeforeInsertHook, usdaFoodComponentBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	usdaFoodComponentBeforeInsertHooks = []UsdaFoodComponentHook{}

	AddUsdaFoodComponentHook(boil.AfterInsertHook, usdaFoodComponentAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	usdaFoodComponentAfterInsertHooks = []UsdaFoodComponentHook{}

	AddUsdaFoodComponentHook(boil.AfterSelectHook, usdaFoodComponentAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	usdaFoodComponentAfterSelectHooks = []UsdaFoodComponentHook{}

	AddUsdaFoodComponentHook(boil.BeforeUpdateHook, usdaFoodComponentBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	usdaFoodComponentBeforeUpdateHooks = []UsdaFoodComponentHook{}

	AddUsdaFoodComponentHook(boil.AfterUpdateHook, usdaFoodComponentAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	usdaFoodComponentAfterUpdateHooks = []UsdaFoodComponentHook{}

	AddUsdaFoodComponentHook(boil.BeforeDeleteHook, usdaFoodComponentBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	usdaFoodComponentBeforeDeleteHooks = []UsdaFoodComponentHook{}

	AddUsdaFoodComponentHook(boil.AfterDeleteHook, usdaFoodComponentAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	usdaFoodComponentAfterDeleteHooks = []UsdaFoodComponentHook{}

	AddUsdaFoodComponentHook(boil.BeforeUpsertHook, usdaFoodComponentBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	usdaFoodComponentBeforeUpsertHooks = []UsdaFoodComponentHook{}

	AddUsdaFoodComponentHook(boil.AfterUpsertHook, usdaFoodComponentAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	usdaFoodComponentAfterUpsertHooks = []UsdaFoodComponentHook{}
}

func testUsdaFoodComponentsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodComponent{}
	if err = randomize.Struct(seed, o, usdaFoodComponentDBTypes, true, usdaFoodComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaFoodComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUsdaFoodComponentsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodComponent{}
	if err = randomize.Struct(seed, o, usdaFoodComponentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UsdaFoodComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(usdaFoodComponentColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UsdaFoodComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUsdaFoodComponentToOneUsdaFoodUsingFDC(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UsdaFoodComponent
	var foreign UsdaFood

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, usdaFoodComponentDBTypes, true, usdaFoodComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodComponent struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, usdaFoodDBTypes, false, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.FDCID, foreign.FDCID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.FDC().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.FDCID, foreign.FDCID) {
		t.Errorf("want: %v, got %v", foreign.FDCID, check.FDCID)
	}

	slice := UsdaFoodComponentSlice{&local}
	if err = local.L.LoadFDC(ctx, tx, false, (*[]*UsdaFoodComponent)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FDC == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.FDC = nil
	if err = local.L.LoadFDC(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FDC == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUsdaFoodComponentToOneSetOpUsdaFoodUsingFDC(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFoodComponent
	var b, c UsdaFood

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodComponentDBTypes, false, strmangle.SetComplement(usdaFoodComponentPrimaryKeyColumns, usdaFoodComponentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UsdaFood{&b, &c} {
		err = a.SetFDC(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.FDC != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FDCUsdaFoodComponents[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.FDCID, x.FDCID) {
			t.Error("foreign key was wrong value", a.FDCID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.FDCID))
		reflect.Indirect(reflect.ValueOf(&a.FDCID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.FDCID, x.FDCID) {
			t.Error("foreign key was wrong value", a.FDCID, x.FDCID)
		}
	}
}

func testUsdaFoodComponentToOneRemoveOpUsdaFoodUsingFDC(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFoodComponent
	var b UsdaFood

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodComponentDBTypes, false, strmangle.SetComplement(usdaFoodComponentPrimaryKeyColumns, usdaFoodComponentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetFDC(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveFDC(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.FDC().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.FDC != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.FDCID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.FDCUsdaFoodComponents) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testUsdaFoodComponentsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodComponent{}
	if err = randomize.Struct(seed, o, usdaFoodComponentDBTypes, true, usdaFoodComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsdaFoodComponentsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodComponent{}
	if err = randomize.Struct(seed, o, usdaFoodComponentDBTypes, true, usdaFoodComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UsdaFoodComponentSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsdaFoodComponentsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodComponent{}
	if err = randomize.Struct(seed, o, usdaFoodComponentDBTypes, true, usdaFoodComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UsdaFoodComponents().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	usdaFoodComponentDBTypes = map[string]string{`ID`: `integer`, `FDCID`: `integer`, `Name`: `text`, `PCTWeight`: `real`, `IsRefuse`: `text`, `GramWeight`: `real`, `DataPoints`: `integer`, `MinYearAcquired`: `text`}
	_                        = bytes.MinRead
)

func testUsdaFoodComponentsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(usdaFoodComponentPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(usdaFoodComponentAllColumns) == len(usdaFoodComponentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodComponent{}
	if err = randomize.Struct(seed, o, usdaFoodComponentDBTypes, true, usdaFoodComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaFoodComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, usdaFoodComponentDBTypes, true, usdaFoodComponentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodComponent struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUsdaFoodComponentsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(usdaFoodComponentAllColumns) == len(usdaFoodComponentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodComponent{}
	if err = randomize.Struct(seed, o, usdaFoodComponentDBTypes, true, usdaFoodComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaFoodComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, usdaFoodComponentDBTypes, true, usdaFoodComponentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodComponent struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(usdaFoodComponentAllColumns, usdaFoodComponentPrimaryKeyColumns) {
		fields = usdaFoodComponentAllColumns
	} else {
		fields = strmangle.SetComplement(
			usdaFoodComponentAllColumns,
			usdaFoodComponentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UsdaFoodComponentSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUsdaFoodComponentsUpsert(t *testing.T) {
	t.Parallel()

	if len(usdaFoodComponentAllColumns) == len(usdaFoodComponentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UsdaFoodComponent{}
	if err = randomize.Struct(seed, &o, usdaFoodComponentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UsdaFoodComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UsdaFoodComponent: %s", err)
	}

	count, err := UsdaFoodComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, usdaFoodComponentDBTypes, false, usdaFoodComponentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodComponent struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UsdaFoodComponent: %s", err)
	}

	count, err = UsdaFoodComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
