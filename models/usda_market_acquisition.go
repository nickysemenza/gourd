// Code generated by SQLBoiler 4.10.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UsdaMarketAcquisition is an object representing the database table.
type UsdaMarketAcquisition struct {
	FDCID            int          `boil:"fdc_id" json:"fdc_id" toml:"fdc_id" yaml:"fdc_id"`
	BrandDescription null.String  `boil:"brand_description" json:"brand_description,omitempty" toml:"brand_description" yaml:"brand_description,omitempty"`
	ExpirationDate   null.String  `boil:"expiration_date" json:"expiration_date,omitempty" toml:"expiration_date" yaml:"expiration_date,omitempty"`
	LabelWeight      null.Float32 `boil:"label_weight" json:"label_weight,omitempty" toml:"label_weight" yaml:"label_weight,omitempty"`
	Location         null.String  `boil:"location" json:"location,omitempty" toml:"location" yaml:"location,omitempty"`
	AcquisitionDate  null.String  `boil:"acquisition_date" json:"acquisition_date,omitempty" toml:"acquisition_date" yaml:"acquisition_date,omitempty"`
	SalesType        null.String  `boil:"sales_type" json:"sales_type,omitempty" toml:"sales_type" yaml:"sales_type,omitempty"`
	SampleLotNBR     null.String  `boil:"sample_lot_nbr" json:"sample_lot_nbr,omitempty" toml:"sample_lot_nbr" yaml:"sample_lot_nbr,omitempty"`
	SellByDate       null.String  `boil:"sell_by_date" json:"sell_by_date,omitempty" toml:"sell_by_date" yaml:"sell_by_date,omitempty"`
	StoreCity        null.String  `boil:"store_city" json:"store_city,omitempty" toml:"store_city" yaml:"store_city,omitempty"`
	StoreName        null.String  `boil:"store_name" json:"store_name,omitempty" toml:"store_name" yaml:"store_name,omitempty"`
	StoreState       null.String  `boil:"store_state" json:"store_state,omitempty" toml:"store_state" yaml:"store_state,omitempty"`
	UpcCode          null.String  `boil:"upc_code" json:"upc_code,omitempty" toml:"upc_code" yaml:"upc_code,omitempty"`

	R *usdaMarketAcquisitionR `boil:"rel" json:"rel" toml:"rel" yaml:"rel"`
	L usdaMarketAcquisitionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UsdaMarketAcquisitionColumns = struct {
	FDCID            string
	BrandDescription string
	ExpirationDate   string
	LabelWeight      string
	Location         string
	AcquisitionDate  string
	SalesType        string
	SampleLotNBR     string
	SellByDate       string
	StoreCity        string
	StoreName        string
	StoreState       string
	UpcCode          string
}{
	FDCID:            "fdc_id",
	BrandDescription: "brand_description",
	ExpirationDate:   "expiration_date",
	LabelWeight:      "label_weight",
	Location:         "location",
	AcquisitionDate:  "acquisition_date",
	SalesType:        "sales_type",
	SampleLotNBR:     "sample_lot_nbr",
	SellByDate:       "sell_by_date",
	StoreCity:        "store_city",
	StoreName:        "store_name",
	StoreState:       "store_state",
	UpcCode:          "upc_code",
}

var UsdaMarketAcquisitionTableColumns = struct {
	FDCID            string
	BrandDescription string
	ExpirationDate   string
	LabelWeight      string
	Location         string
	AcquisitionDate  string
	SalesType        string
	SampleLotNBR     string
	SellByDate       string
	StoreCity        string
	StoreName        string
	StoreState       string
	UpcCode          string
}{
	FDCID:            "usda_market_acquisition.fdc_id",
	BrandDescription: "usda_market_acquisition.brand_description",
	ExpirationDate:   "usda_market_acquisition.expiration_date",
	LabelWeight:      "usda_market_acquisition.label_weight",
	Location:         "usda_market_acquisition.location",
	AcquisitionDate:  "usda_market_acquisition.acquisition_date",
	SalesType:        "usda_market_acquisition.sales_type",
	SampleLotNBR:     "usda_market_acquisition.sample_lot_nbr",
	SellByDate:       "usda_market_acquisition.sell_by_date",
	StoreCity:        "usda_market_acquisition.store_city",
	StoreName:        "usda_market_acquisition.store_name",
	StoreState:       "usda_market_acquisition.store_state",
	UpcCode:          "usda_market_acquisition.upc_code",
}

// Generated where

var UsdaMarketAcquisitionWhere = struct {
	FDCID            whereHelperint
	BrandDescription whereHelpernull_String
	ExpirationDate   whereHelpernull_String
	LabelWeight      whereHelpernull_Float32
	Location         whereHelpernull_String
	AcquisitionDate  whereHelpernull_String
	SalesType        whereHelpernull_String
	SampleLotNBR     whereHelpernull_String
	SellByDate       whereHelpernull_String
	StoreCity        whereHelpernull_String
	StoreName        whereHelpernull_String
	StoreState       whereHelpernull_String
	UpcCode          whereHelpernull_String
}{
	FDCID:            whereHelperint{field: "\"usda_market_acquisition\".\"fdc_id\""},
	BrandDescription: whereHelpernull_String{field: "\"usda_market_acquisition\".\"brand_description\""},
	ExpirationDate:   whereHelpernull_String{field: "\"usda_market_acquisition\".\"expiration_date\""},
	LabelWeight:      whereHelpernull_Float32{field: "\"usda_market_acquisition\".\"label_weight\""},
	Location:         whereHelpernull_String{field: "\"usda_market_acquisition\".\"location\""},
	AcquisitionDate:  whereHelpernull_String{field: "\"usda_market_acquisition\".\"acquisition_date\""},
	SalesType:        whereHelpernull_String{field: "\"usda_market_acquisition\".\"sales_type\""},
	SampleLotNBR:     whereHelpernull_String{field: "\"usda_market_acquisition\".\"sample_lot_nbr\""},
	SellByDate:       whereHelpernull_String{field: "\"usda_market_acquisition\".\"sell_by_date\""},
	StoreCity:        whereHelpernull_String{field: "\"usda_market_acquisition\".\"store_city\""},
	StoreName:        whereHelpernull_String{field: "\"usda_market_acquisition\".\"store_name\""},
	StoreState:       whereHelpernull_String{field: "\"usda_market_acquisition\".\"store_state\""},
	UpcCode:          whereHelpernull_String{field: "\"usda_market_acquisition\".\"upc_code\""},
}

// UsdaMarketAcquisitionRels is where relationship names are stored.
var UsdaMarketAcquisitionRels = struct {
	FDC string
}{
	FDC: "FDC",
}

// usdaMarketAcquisitionR is where relationships are stored.
type usdaMarketAcquisitionR struct {
	FDC *UsdaFood `boil:"FDC" json:"FDC" toml:"FDC" yaml:"FDC"`
}

// NewStruct creates a new relationship struct
func (*usdaMarketAcquisitionR) NewStruct() *usdaMarketAcquisitionR {
	return &usdaMarketAcquisitionR{}
}

// usdaMarketAcquisitionL is where Load methods for each relationship are stored.
type usdaMarketAcquisitionL struct{}

var (
	usdaMarketAcquisitionAllColumns            = []string{"fdc_id", "brand_description", "expiration_date", "label_weight", "location", "acquisition_date", "sales_type", "sample_lot_nbr", "sell_by_date", "store_city", "store_name", "store_state", "upc_code"}
	usdaMarketAcquisitionColumnsWithoutDefault = []string{"fdc_id"}
	usdaMarketAcquisitionColumnsWithDefault    = []string{"brand_description", "expiration_date", "label_weight", "location", "acquisition_date", "sales_type", "sample_lot_nbr", "sell_by_date", "store_city", "store_name", "store_state", "upc_code"}
	usdaMarketAcquisitionPrimaryKeyColumns     = []string{"fdc_id"}
	usdaMarketAcquisitionGeneratedColumns      = []string{}
)

type (
	// UsdaMarketAcquisitionSlice is an alias for a slice of pointers to UsdaMarketAcquisition.
	// This should almost always be used instead of []UsdaMarketAcquisition.
	UsdaMarketAcquisitionSlice []*UsdaMarketAcquisition
	// UsdaMarketAcquisitionHook is the signature for custom UsdaMarketAcquisition hook methods
	UsdaMarketAcquisitionHook func(context.Context, boil.ContextExecutor, *UsdaMarketAcquisition) error

	usdaMarketAcquisitionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usdaMarketAcquisitionType                 = reflect.TypeOf(&UsdaMarketAcquisition{})
	usdaMarketAcquisitionMapping              = queries.MakeStructMapping(usdaMarketAcquisitionType)
	usdaMarketAcquisitionPrimaryKeyMapping, _ = queries.BindMapping(usdaMarketAcquisitionType, usdaMarketAcquisitionMapping, usdaMarketAcquisitionPrimaryKeyColumns)
	usdaMarketAcquisitionInsertCacheMut       sync.RWMutex
	usdaMarketAcquisitionInsertCache          = make(map[string]insertCache)
	usdaMarketAcquisitionUpdateCacheMut       sync.RWMutex
	usdaMarketAcquisitionUpdateCache          = make(map[string]updateCache)
	usdaMarketAcquisitionUpsertCacheMut       sync.RWMutex
	usdaMarketAcquisitionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var usdaMarketAcquisitionAfterSelectHooks []UsdaMarketAcquisitionHook

var usdaMarketAcquisitionBeforeInsertHooks []UsdaMarketAcquisitionHook
var usdaMarketAcquisitionAfterInsertHooks []UsdaMarketAcquisitionHook

var usdaMarketAcquisitionBeforeUpdateHooks []UsdaMarketAcquisitionHook
var usdaMarketAcquisitionAfterUpdateHooks []UsdaMarketAcquisitionHook

var usdaMarketAcquisitionBeforeDeleteHooks []UsdaMarketAcquisitionHook
var usdaMarketAcquisitionAfterDeleteHooks []UsdaMarketAcquisitionHook

var usdaMarketAcquisitionBeforeUpsertHooks []UsdaMarketAcquisitionHook
var usdaMarketAcquisitionAfterUpsertHooks []UsdaMarketAcquisitionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UsdaMarketAcquisition) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaMarketAcquisitionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UsdaMarketAcquisition) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaMarketAcquisitionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UsdaMarketAcquisition) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaMarketAcquisitionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UsdaMarketAcquisition) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaMarketAcquisitionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UsdaMarketAcquisition) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaMarketAcquisitionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UsdaMarketAcquisition) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaMarketAcquisitionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UsdaMarketAcquisition) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaMarketAcquisitionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UsdaMarketAcquisition) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaMarketAcquisitionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UsdaMarketAcquisition) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaMarketAcquisitionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUsdaMarketAcquisitionHook registers your hook function for all future operations.
func AddUsdaMarketAcquisitionHook(hookPoint boil.HookPoint, usdaMarketAcquisitionHook UsdaMarketAcquisitionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		usdaMarketAcquisitionAfterSelectHooks = append(usdaMarketAcquisitionAfterSelectHooks, usdaMarketAcquisitionHook)
	case boil.BeforeInsertHook:
		usdaMarketAcquisitionBeforeInsertHooks = append(usdaMarketAcquisitionBeforeInsertHooks, usdaMarketAcquisitionHook)
	case boil.AfterInsertHook:
		usdaMarketAcquisitionAfterInsertHooks = append(usdaMarketAcquisitionAfterInsertHooks, usdaMarketAcquisitionHook)
	case boil.BeforeUpdateHook:
		usdaMarketAcquisitionBeforeUpdateHooks = append(usdaMarketAcquisitionBeforeUpdateHooks, usdaMarketAcquisitionHook)
	case boil.AfterUpdateHook:
		usdaMarketAcquisitionAfterUpdateHooks = append(usdaMarketAcquisitionAfterUpdateHooks, usdaMarketAcquisitionHook)
	case boil.BeforeDeleteHook:
		usdaMarketAcquisitionBeforeDeleteHooks = append(usdaMarketAcquisitionBeforeDeleteHooks, usdaMarketAcquisitionHook)
	case boil.AfterDeleteHook:
		usdaMarketAcquisitionAfterDeleteHooks = append(usdaMarketAcquisitionAfterDeleteHooks, usdaMarketAcquisitionHook)
	case boil.BeforeUpsertHook:
		usdaMarketAcquisitionBeforeUpsertHooks = append(usdaMarketAcquisitionBeforeUpsertHooks, usdaMarketAcquisitionHook)
	case boil.AfterUpsertHook:
		usdaMarketAcquisitionAfterUpsertHooks = append(usdaMarketAcquisitionAfterUpsertHooks, usdaMarketAcquisitionHook)
	}
}

// One returns a single usdaMarketAcquisition record from the query.
func (q usdaMarketAcquisitionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UsdaMarketAcquisition, error) {
	o := &UsdaMarketAcquisition{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for usda_market_acquisition")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UsdaMarketAcquisition records from the query.
func (q usdaMarketAcquisitionQuery) All(ctx context.Context, exec boil.ContextExecutor) (UsdaMarketAcquisitionSlice, error) {
	var o []*UsdaMarketAcquisition

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UsdaMarketAcquisition slice")
	}

	if len(usdaMarketAcquisitionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UsdaMarketAcquisition records in the query.
func (q usdaMarketAcquisitionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count usda_market_acquisition rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q usdaMarketAcquisitionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if usda_market_acquisition exists")
	}

	return count > 0, nil
}

// FDC pointed to by the foreign key.
func (o *UsdaMarketAcquisition) FDC(mods ...qm.QueryMod) usdaFoodQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"fdc_id\" = ?", o.FDCID),
	}

	queryMods = append(queryMods, mods...)

	return UsdaFoods(queryMods...)
}

// LoadFDC allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (usdaMarketAcquisitionL) LoadFDC(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsdaMarketAcquisition interface{}, mods queries.Applicator) error {
	var slice []*UsdaMarketAcquisition
	var object *UsdaMarketAcquisition

	if singular {
		object = maybeUsdaMarketAcquisition.(*UsdaMarketAcquisition)
	} else {
		slice = *maybeUsdaMarketAcquisition.(*[]*UsdaMarketAcquisition)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &usdaMarketAcquisitionR{}
		}
		args = append(args, object.FDCID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usdaMarketAcquisitionR{}
			}

			for _, a := range args {
				if a == obj.FDCID {
					continue Outer
				}
			}

			args = append(args, obj.FDCID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`usda_food`),
		qm.WhereIn(`usda_food.fdc_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UsdaFood")
	}

	var resultSlice []*UsdaFood
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UsdaFood")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for usda_food")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usda_food")
	}

	if len(usdaMarketAcquisitionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FDC = foreign
		if foreign.R == nil {
			foreign.R = &usdaFoodR{}
		}
		foreign.R.FDCUsdaMarketAcquisition = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FDCID == foreign.FDCID {
				local.R.FDC = foreign
				if foreign.R == nil {
					foreign.R = &usdaFoodR{}
				}
				foreign.R.FDCUsdaMarketAcquisition = local
				break
			}
		}
	}

	return nil
}

// SetFDC of the usdaMarketAcquisition to the related item.
// Sets o.R.FDC to related.
// Adds o to related.R.FDCUsdaMarketAcquisition.
func (o *UsdaMarketAcquisition) SetFDC(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UsdaFood) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"usda_market_acquisition\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"fdc_id"}),
		strmangle.WhereClause("\"", "\"", 2, usdaMarketAcquisitionPrimaryKeyColumns),
	)
	values := []interface{}{related.FDCID, o.FDCID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FDCID = related.FDCID
	if o.R == nil {
		o.R = &usdaMarketAcquisitionR{
			FDC: related,
		}
	} else {
		o.R.FDC = related
	}

	if related.R == nil {
		related.R = &usdaFoodR{
			FDCUsdaMarketAcquisition: o,
		}
	} else {
		related.R.FDCUsdaMarketAcquisition = o
	}

	return nil
}

// UsdaMarketAcquisitions retrieves all the records using an executor.
func UsdaMarketAcquisitions(mods ...qm.QueryMod) usdaMarketAcquisitionQuery {
	mods = append(mods, qm.From("\"usda_market_acquisition\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"usda_market_acquisition\".*"})
	}

	return usdaMarketAcquisitionQuery{q}
}

// FindUsdaMarketAcquisition retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUsdaMarketAcquisition(ctx context.Context, exec boil.ContextExecutor, fDCID int, selectCols ...string) (*UsdaMarketAcquisition, error) {
	usdaMarketAcquisitionObj := &UsdaMarketAcquisition{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"usda_market_acquisition\" where \"fdc_id\"=$1", sel,
	)

	q := queries.Raw(query, fDCID)

	err := q.Bind(ctx, exec, usdaMarketAcquisitionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from usda_market_acquisition")
	}

	if err = usdaMarketAcquisitionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return usdaMarketAcquisitionObj, err
	}

	return usdaMarketAcquisitionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UsdaMarketAcquisition) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no usda_market_acquisition provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaMarketAcquisitionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	usdaMarketAcquisitionInsertCacheMut.RLock()
	cache, cached := usdaMarketAcquisitionInsertCache[key]
	usdaMarketAcquisitionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			usdaMarketAcquisitionAllColumns,
			usdaMarketAcquisitionColumnsWithDefault,
			usdaMarketAcquisitionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(usdaMarketAcquisitionType, usdaMarketAcquisitionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(usdaMarketAcquisitionType, usdaMarketAcquisitionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"usda_market_acquisition\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"usda_market_acquisition\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into usda_market_acquisition")
	}

	if !cached {
		usdaMarketAcquisitionInsertCacheMut.Lock()
		usdaMarketAcquisitionInsertCache[key] = cache
		usdaMarketAcquisitionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UsdaMarketAcquisition.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UsdaMarketAcquisition) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	usdaMarketAcquisitionUpdateCacheMut.RLock()
	cache, cached := usdaMarketAcquisitionUpdateCache[key]
	usdaMarketAcquisitionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			usdaMarketAcquisitionAllColumns,
			usdaMarketAcquisitionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update usda_market_acquisition, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"usda_market_acquisition\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, usdaMarketAcquisitionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(usdaMarketAcquisitionType, usdaMarketAcquisitionMapping, append(wl, usdaMarketAcquisitionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update usda_market_acquisition row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for usda_market_acquisition")
	}

	if !cached {
		usdaMarketAcquisitionUpdateCacheMut.Lock()
		usdaMarketAcquisitionUpdateCache[key] = cache
		usdaMarketAcquisitionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q usdaMarketAcquisitionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for usda_market_acquisition")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for usda_market_acquisition")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UsdaMarketAcquisitionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaMarketAcquisitionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"usda_market_acquisition\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, usdaMarketAcquisitionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in usdaMarketAcquisition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all usdaMarketAcquisition")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UsdaMarketAcquisition) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no usda_market_acquisition provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaMarketAcquisitionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	usdaMarketAcquisitionUpsertCacheMut.RLock()
	cache, cached := usdaMarketAcquisitionUpsertCache[key]
	usdaMarketAcquisitionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			usdaMarketAcquisitionAllColumns,
			usdaMarketAcquisitionColumnsWithDefault,
			usdaMarketAcquisitionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			usdaMarketAcquisitionAllColumns,
			usdaMarketAcquisitionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert usda_market_acquisition, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(usdaMarketAcquisitionPrimaryKeyColumns))
			copy(conflict, usdaMarketAcquisitionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"usda_market_acquisition\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(usdaMarketAcquisitionType, usdaMarketAcquisitionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(usdaMarketAcquisitionType, usdaMarketAcquisitionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert usda_market_acquisition")
	}

	if !cached {
		usdaMarketAcquisitionUpsertCacheMut.Lock()
		usdaMarketAcquisitionUpsertCache[key] = cache
		usdaMarketAcquisitionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UsdaMarketAcquisition record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UsdaMarketAcquisition) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UsdaMarketAcquisition provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), usdaMarketAcquisitionPrimaryKeyMapping)
	sql := "DELETE FROM \"usda_market_acquisition\" WHERE \"fdc_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from usda_market_acquisition")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for usda_market_acquisition")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q usdaMarketAcquisitionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no usdaMarketAcquisitionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from usda_market_acquisition")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for usda_market_acquisition")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UsdaMarketAcquisitionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(usdaMarketAcquisitionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaMarketAcquisitionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"usda_market_acquisition\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaMarketAcquisitionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from usdaMarketAcquisition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for usda_market_acquisition")
	}

	if len(usdaMarketAcquisitionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UsdaMarketAcquisition) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUsdaMarketAcquisition(ctx, exec, o.FDCID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsdaMarketAcquisitionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UsdaMarketAcquisitionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaMarketAcquisitionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"usda_market_acquisition\".* FROM \"usda_market_acquisition\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaMarketAcquisitionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UsdaMarketAcquisitionSlice")
	}

	*o = slice

	return nil
}

// UsdaMarketAcquisitionExists checks if the UsdaMarketAcquisition row exists.
func UsdaMarketAcquisitionExists(ctx context.Context, exec boil.ContextExecutor, fDCID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"usda_market_acquisition\" where \"fdc_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, fDCID)
	}
	row := exec.QueryRowContext(ctx, sql, fDCID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if usda_market_acquisition exists")
	}

	return exists, nil
}
