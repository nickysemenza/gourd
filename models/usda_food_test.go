// Code generated by SQLBoiler 4.8.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUsdaFoods(t *testing.T) {
	t.Parallel()

	query := UsdaFoods()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUsdaFoodsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFood{}
	if err = randomize.Struct(seed, o, usdaFoodDBTypes, true, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaFoodsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFood{}
	if err = randomize.Struct(seed, o, usdaFoodDBTypes, true, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UsdaFoods().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaFoodsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFood{}
	if err = randomize.Struct(seed, o, usdaFoodDBTypes, true, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UsdaFoodSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaFoodsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFood{}
	if err = randomize.Struct(seed, o, usdaFoodDBTypes, true, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UsdaFoodExists(ctx, tx, o.FDCID)
	if err != nil {
		t.Errorf("Unable to check if UsdaFood exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UsdaFoodExists to return true, but got false.")
	}
}

func testUsdaFoodsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFood{}
	if err = randomize.Struct(seed, o, usdaFoodDBTypes, true, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	usdaFoodFound, err := FindUsdaFood(ctx, tx, o.FDCID)
	if err != nil {
		t.Error(err)
	}

	if usdaFoodFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUsdaFoodsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFood{}
	if err = randomize.Struct(seed, o, usdaFoodDBTypes, true, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UsdaFoods().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUsdaFoodsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFood{}
	if err = randomize.Struct(seed, o, usdaFoodDBTypes, true, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UsdaFoods().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUsdaFoodsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	usdaFoodOne := &UsdaFood{}
	usdaFoodTwo := &UsdaFood{}
	if err = randomize.Struct(seed, usdaFoodOne, usdaFoodDBTypes, false, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}
	if err = randomize.Struct(seed, usdaFoodTwo, usdaFoodDBTypes, false, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = usdaFoodOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = usdaFoodTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UsdaFoods().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUsdaFoodsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	usdaFoodOne := &UsdaFood{}
	usdaFoodTwo := &UsdaFood{}
	if err = randomize.Struct(seed, usdaFoodOne, usdaFoodDBTypes, false, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}
	if err = randomize.Struct(seed, usdaFoodTwo, usdaFoodDBTypes, false, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = usdaFoodOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = usdaFoodTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func usdaFoodBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFood) error {
	*o = UsdaFood{}
	return nil
}

func usdaFoodAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFood) error {
	*o = UsdaFood{}
	return nil
}

func usdaFoodAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFood) error {
	*o = UsdaFood{}
	return nil
}

func usdaFoodBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFood) error {
	*o = UsdaFood{}
	return nil
}

func usdaFoodAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFood) error {
	*o = UsdaFood{}
	return nil
}

func usdaFoodBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFood) error {
	*o = UsdaFood{}
	return nil
}

func usdaFoodAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFood) error {
	*o = UsdaFood{}
	return nil
}

func usdaFoodBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFood) error {
	*o = UsdaFood{}
	return nil
}

func usdaFoodAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFood) error {
	*o = UsdaFood{}
	return nil
}

func testUsdaFoodsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UsdaFood{}
	o := &UsdaFood{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, usdaFoodDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UsdaFood object: %s", err)
	}

	AddUsdaFoodHook(boil.BeforeInsertHook, usdaFoodBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	usdaFoodBeforeInsertHooks = []UsdaFoodHook{}

	AddUsdaFoodHook(boil.AfterInsertHook, usdaFoodAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	usdaFoodAfterInsertHooks = []UsdaFoodHook{}

	AddUsdaFoodHook(boil.AfterSelectHook, usdaFoodAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	usdaFoodAfterSelectHooks = []UsdaFoodHook{}

	AddUsdaFoodHook(boil.BeforeUpdateHook, usdaFoodBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	usdaFoodBeforeUpdateHooks = []UsdaFoodHook{}

	AddUsdaFoodHook(boil.AfterUpdateHook, usdaFoodAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	usdaFoodAfterUpdateHooks = []UsdaFoodHook{}

	AddUsdaFoodHook(boil.BeforeDeleteHook, usdaFoodBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	usdaFoodBeforeDeleteHooks = []UsdaFoodHook{}

	AddUsdaFoodHook(boil.AfterDeleteHook, usdaFoodAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	usdaFoodAfterDeleteHooks = []UsdaFoodHook{}

	AddUsdaFoodHook(boil.BeforeUpsertHook, usdaFoodBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	usdaFoodBeforeUpsertHooks = []UsdaFoodHook{}

	AddUsdaFoodHook(boil.AfterUpsertHook, usdaFoodAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	usdaFoodAfterUpsertHooks = []UsdaFoodHook{}
}

func testUsdaFoodsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFood{}
	if err = randomize.Struct(seed, o, usdaFoodDBTypes, true, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUsdaFoodsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFood{}
	if err = randomize.Struct(seed, o, usdaFoodDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(usdaFoodColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UsdaFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUsdaFoodOneToOneUsdaBrandedFoodUsingFDCUsdaBrandedFood(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign UsdaBrandedFood
	var local UsdaFood

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, usdaBrandedFoodDBTypes, true, usdaBrandedFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaBrandedFood struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, usdaFoodDBTypes, true, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.FDCID = local.FDCID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.FDCUsdaBrandedFood().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.FDCID != foreign.FDCID {
		t.Errorf("want: %v, got %v", foreign.FDCID, check.FDCID)
	}

	slice := UsdaFoodSlice{&local}
	if err = local.L.LoadFDCUsdaBrandedFood(ctx, tx, false, (*[]*UsdaFood)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FDCUsdaBrandedFood == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.FDCUsdaBrandedFood = nil
	if err = local.L.LoadFDCUsdaBrandedFood(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FDCUsdaBrandedFood == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUsdaFoodOneToOneUsdaFoundationFoodUsingFDCUsdaFoundationFood(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign UsdaFoundationFood
	var local UsdaFood

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, usdaFoundationFoodDBTypes, true, usdaFoundationFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoundationFood struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, usdaFoodDBTypes, true, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.FDCID = local.FDCID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.FDCUsdaFoundationFood().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.FDCID != foreign.FDCID {
		t.Errorf("want: %v, got %v", foreign.FDCID, check.FDCID)
	}

	slice := UsdaFoodSlice{&local}
	if err = local.L.LoadFDCUsdaFoundationFood(ctx, tx, false, (*[]*UsdaFood)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FDCUsdaFoundationFood == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.FDCUsdaFoundationFood = nil
	if err = local.L.LoadFDCUsdaFoundationFood(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FDCUsdaFoundationFood == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUsdaFoodOneToOneUsdaMarketAcquisitionUsingFDCUsdaMarketAcquisition(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign UsdaMarketAcquisition
	var local UsdaFood

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, usdaMarketAcquisitionDBTypes, true, usdaMarketAcquisitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaMarketAcquisition struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, usdaFoodDBTypes, true, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.FDCID = local.FDCID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.FDCUsdaMarketAcquisition().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.FDCID != foreign.FDCID {
		t.Errorf("want: %v, got %v", foreign.FDCID, check.FDCID)
	}

	slice := UsdaFoodSlice{&local}
	if err = local.L.LoadFDCUsdaMarketAcquisition(ctx, tx, false, (*[]*UsdaFood)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FDCUsdaMarketAcquisition == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.FDCUsdaMarketAcquisition = nil
	if err = local.L.LoadFDCUsdaMarketAcquisition(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FDCUsdaMarketAcquisition == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUsdaFoodOneToOneUsdaSampleFoodUsingFDCUsdaSampleFood(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign UsdaSampleFood
	var local UsdaFood

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, usdaSampleFoodDBTypes, true, usdaSampleFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSampleFood struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, usdaFoodDBTypes, true, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.FDCID = local.FDCID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.FDCUsdaSampleFood().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.FDCID != foreign.FDCID {
		t.Errorf("want: %v, got %v", foreign.FDCID, check.FDCID)
	}

	slice := UsdaFoodSlice{&local}
	if err = local.L.LoadFDCUsdaSampleFood(ctx, tx, false, (*[]*UsdaFood)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FDCUsdaSampleFood == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.FDCUsdaSampleFood = nil
	if err = local.L.LoadFDCUsdaSampleFood(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FDCUsdaSampleFood == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUsdaFoodOneToOneUsdaSRLegacyFoodUsingFDCUsdaSRLegacyFood(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign UsdaSRLegacyFood
	var local UsdaFood

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, usdaSRLegacyFoodDBTypes, true, usdaSRLegacyFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSRLegacyFood struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, usdaFoodDBTypes, true, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.FDCID = local.FDCID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.FDCUsdaSRLegacyFood().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.FDCID != foreign.FDCID {
		t.Errorf("want: %v, got %v", foreign.FDCID, check.FDCID)
	}

	slice := UsdaFoodSlice{&local}
	if err = local.L.LoadFDCUsdaSRLegacyFood(ctx, tx, false, (*[]*UsdaFood)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FDCUsdaSRLegacyFood == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.FDCUsdaSRLegacyFood = nil
	if err = local.L.LoadFDCUsdaSRLegacyFood(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FDCUsdaSRLegacyFood == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUsdaFoodOneToOneUsdaSubSampleFoodUsingFDCUsdaSubSampleFood(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign UsdaSubSampleFood
	var local UsdaFood

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, usdaSubSampleFoodDBTypes, true, usdaSubSampleFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSubSampleFood struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, usdaFoodDBTypes, true, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.FDCID = local.FDCID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.FDCUsdaSubSampleFood().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.FDCID != foreign.FDCID {
		t.Errorf("want: %v, got %v", foreign.FDCID, check.FDCID)
	}

	slice := UsdaFoodSlice{&local}
	if err = local.L.LoadFDCUsdaSubSampleFood(ctx, tx, false, (*[]*UsdaFood)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FDCUsdaSubSampleFood == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.FDCUsdaSubSampleFood = nil
	if err = local.L.LoadFDCUsdaSubSampleFood(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FDCUsdaSubSampleFood == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUsdaFoodOneToOneUsdaSurveyFNDDSFoodUsingFDCUsdaSurveyFNDDSFood(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign UsdaSurveyFNDDSFood
	var local UsdaFood

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, usdaSurveyFNDDSFoodDBTypes, true, usdaSurveyFNDDSFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSurveyFNDDSFood struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, usdaFoodDBTypes, true, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.FDCID = local.FDCID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.FDCUsdaSurveyFNDDSFood().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.FDCID != foreign.FDCID {
		t.Errorf("want: %v, got %v", foreign.FDCID, check.FDCID)
	}

	slice := UsdaFoodSlice{&local}
	if err = local.L.LoadFDCUsdaSurveyFNDDSFood(ctx, tx, false, (*[]*UsdaFood)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FDCUsdaSurveyFNDDSFood == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.FDCUsdaSurveyFNDDSFood = nil
	if err = local.L.LoadFDCUsdaSurveyFNDDSFood(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FDCUsdaSurveyFNDDSFood == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUsdaFoodOneToOneSetOpUsdaBrandedFoodUsingFDCUsdaBrandedFood(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c UsdaBrandedFood

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, usdaBrandedFoodDBTypes, false, strmangle.SetComplement(usdaBrandedFoodPrimaryKeyColumns, usdaBrandedFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, usdaBrandedFoodDBTypes, false, strmangle.SetComplement(usdaBrandedFoodPrimaryKeyColumns, usdaBrandedFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UsdaBrandedFood{&b, &c} {
		err = a.SetFDCUsdaBrandedFood(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.FDCUsdaBrandedFood != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.FDC != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.FDCID != x.FDCID {
			t.Error("foreign key was wrong value", a.FDCID)
		}

		if exists, err := UsdaBrandedFoodExists(ctx, tx, x.FDCID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'x' to exist")
		}

		if a.FDCID != x.FDCID {
			t.Error("foreign key was wrong value", a.FDCID, x.FDCID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}
func testUsdaFoodOneToOneSetOpUsdaFoundationFoodUsingFDCUsdaFoundationFood(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c UsdaFoundationFood

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, usdaFoundationFoodDBTypes, false, strmangle.SetComplement(usdaFoundationFoodPrimaryKeyColumns, usdaFoundationFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, usdaFoundationFoodDBTypes, false, strmangle.SetComplement(usdaFoundationFoodPrimaryKeyColumns, usdaFoundationFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UsdaFoundationFood{&b, &c} {
		err = a.SetFDCUsdaFoundationFood(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.FDCUsdaFoundationFood != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.FDC != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.FDCID != x.FDCID {
			t.Error("foreign key was wrong value", a.FDCID)
		}

		if exists, err := UsdaFoundationFoodExists(ctx, tx, x.FDCID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'x' to exist")
		}

		if a.FDCID != x.FDCID {
			t.Error("foreign key was wrong value", a.FDCID, x.FDCID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}
func testUsdaFoodOneToOneSetOpUsdaMarketAcquisitionUsingFDCUsdaMarketAcquisition(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c UsdaMarketAcquisition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, usdaMarketAcquisitionDBTypes, false, strmangle.SetComplement(usdaMarketAcquisitionPrimaryKeyColumns, usdaMarketAcquisitionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, usdaMarketAcquisitionDBTypes, false, strmangle.SetComplement(usdaMarketAcquisitionPrimaryKeyColumns, usdaMarketAcquisitionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UsdaMarketAcquisition{&b, &c} {
		err = a.SetFDCUsdaMarketAcquisition(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.FDCUsdaMarketAcquisition != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.FDC != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.FDCID != x.FDCID {
			t.Error("foreign key was wrong value", a.FDCID)
		}

		if exists, err := UsdaMarketAcquisitionExists(ctx, tx, x.FDCID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'x' to exist")
		}

		if a.FDCID != x.FDCID {
			t.Error("foreign key was wrong value", a.FDCID, x.FDCID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}
func testUsdaFoodOneToOneSetOpUsdaSampleFoodUsingFDCUsdaSampleFood(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c UsdaSampleFood

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, usdaSampleFoodDBTypes, false, strmangle.SetComplement(usdaSampleFoodPrimaryKeyColumns, usdaSampleFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, usdaSampleFoodDBTypes, false, strmangle.SetComplement(usdaSampleFoodPrimaryKeyColumns, usdaSampleFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UsdaSampleFood{&b, &c} {
		err = a.SetFDCUsdaSampleFood(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.FDCUsdaSampleFood != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.FDC != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.FDCID != x.FDCID {
			t.Error("foreign key was wrong value", a.FDCID)
		}

		if exists, err := UsdaSampleFoodExists(ctx, tx, x.FDCID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'x' to exist")
		}

		if a.FDCID != x.FDCID {
			t.Error("foreign key was wrong value", a.FDCID, x.FDCID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}
func testUsdaFoodOneToOneSetOpUsdaSRLegacyFoodUsingFDCUsdaSRLegacyFood(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c UsdaSRLegacyFood

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, usdaSRLegacyFoodDBTypes, false, strmangle.SetComplement(usdaSRLegacyFoodPrimaryKeyColumns, usdaSRLegacyFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, usdaSRLegacyFoodDBTypes, false, strmangle.SetComplement(usdaSRLegacyFoodPrimaryKeyColumns, usdaSRLegacyFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UsdaSRLegacyFood{&b, &c} {
		err = a.SetFDCUsdaSRLegacyFood(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.FDCUsdaSRLegacyFood != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.FDC != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.FDCID != x.FDCID {
			t.Error("foreign key was wrong value", a.FDCID)
		}

		if exists, err := UsdaSRLegacyFoodExists(ctx, tx, x.FDCID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'x' to exist")
		}

		if a.FDCID != x.FDCID {
			t.Error("foreign key was wrong value", a.FDCID, x.FDCID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}
func testUsdaFoodOneToOneSetOpUsdaSubSampleFoodUsingFDCUsdaSubSampleFood(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c UsdaSubSampleFood

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, usdaSubSampleFoodDBTypes, false, strmangle.SetComplement(usdaSubSampleFoodPrimaryKeyColumns, usdaSubSampleFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, usdaSubSampleFoodDBTypes, false, strmangle.SetComplement(usdaSubSampleFoodPrimaryKeyColumns, usdaSubSampleFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UsdaSubSampleFood{&b, &c} {
		err = a.SetFDCUsdaSubSampleFood(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.FDCUsdaSubSampleFood != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.FDC != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.FDCID != x.FDCID {
			t.Error("foreign key was wrong value", a.FDCID)
		}

		if exists, err := UsdaSubSampleFoodExists(ctx, tx, x.FDCID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'x' to exist")
		}

		if a.FDCID != x.FDCID {
			t.Error("foreign key was wrong value", a.FDCID, x.FDCID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}
func testUsdaFoodOneToOneSetOpUsdaSurveyFNDDSFoodUsingFDCUsdaSurveyFNDDSFood(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c UsdaSurveyFNDDSFood

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, usdaSurveyFNDDSFoodDBTypes, false, strmangle.SetComplement(usdaSurveyFNDDSFoodPrimaryKeyColumns, usdaSurveyFNDDSFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, usdaSurveyFNDDSFoodDBTypes, false, strmangle.SetComplement(usdaSurveyFNDDSFoodPrimaryKeyColumns, usdaSurveyFNDDSFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UsdaSurveyFNDDSFood{&b, &c} {
		err = a.SetFDCUsdaSurveyFNDDSFood(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.FDCUsdaSurveyFNDDSFood != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.FDC != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.FDCID != x.FDCID {
			t.Error("foreign key was wrong value", a.FDCID)
		}

		if exists, err := UsdaSurveyFNDDSFoodExists(ctx, tx, x.FDCID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'x' to exist")
		}

		if a.FDCID != x.FDCID {
			t.Error("foreign key was wrong value", a.FDCID, x.FDCID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testUsdaFoodToManyFDCIDOfSampleFoodUsdaFoods(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c UsdaFood

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, true, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, usdaFoodDBTypes, false, usdaFoodColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, usdaFoodDBTypes, false, usdaFoodColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"usda_acquisition_sample\" (\"fdc_id_of_acquisition_food\", \"fdc_id_of_sample_food\") values ($1, $2)", a.FDCID, b.FDCID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"usda_acquisition_sample\" (\"fdc_id_of_acquisition_food\", \"fdc_id_of_sample_food\") values ($1, $2)", a.FDCID, c.FDCID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.FDCIDOfSampleFoodUsdaFoods().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.FDCID == b.FDCID {
			bFound = true
		}
		if v.FDCID == c.FDCID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UsdaFoodSlice{&a}
	if err = a.L.LoadFDCIDOfSampleFoodUsdaFoods(ctx, tx, false, (*[]*UsdaFood)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FDCIDOfSampleFoodUsdaFoods); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FDCIDOfSampleFoodUsdaFoods = nil
	if err = a.L.LoadFDCIDOfSampleFoodUsdaFoods(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FDCIDOfSampleFoodUsdaFoods); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUsdaFoodToManyFDCIDOfAcquisitionFoodUsdaFoods(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c UsdaFood

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, true, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, usdaFoodDBTypes, false, usdaFoodColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, usdaFoodDBTypes, false, usdaFoodColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"usda_acquisition_sample\" (\"fdc_id_of_sample_food\", \"fdc_id_of_acquisition_food\") values ($1, $2)", a.FDCID, b.FDCID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"usda_acquisition_sample\" (\"fdc_id_of_sample_food\", \"fdc_id_of_acquisition_food\") values ($1, $2)", a.FDCID, c.FDCID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.FDCIDOfAcquisitionFoodUsdaFoods().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.FDCID == b.FDCID {
			bFound = true
		}
		if v.FDCID == c.FDCID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UsdaFoodSlice{&a}
	if err = a.L.LoadFDCIDOfAcquisitionFoodUsdaFoods(ctx, tx, false, (*[]*UsdaFood)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FDCIDOfAcquisitionFoodUsdaFoods); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FDCIDOfAcquisitionFoodUsdaFoods = nil
	if err = a.L.LoadFDCIDOfAcquisitionFoodUsdaFoods(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FDCIDOfAcquisitionFoodUsdaFoods); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUsdaFoodToManyFDCUsdaFoodAttributes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c UsdaFoodAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, true, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, usdaFoodAttributeDBTypes, false, usdaFoodAttributeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, usdaFoodAttributeDBTypes, false, usdaFoodAttributeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.FDCID, a.FDCID)
	queries.Assign(&c.FDCID, a.FDCID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.FDCUsdaFoodAttributes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.FDCID, b.FDCID) {
			bFound = true
		}
		if queries.Equal(v.FDCID, c.FDCID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UsdaFoodSlice{&a}
	if err = a.L.LoadFDCUsdaFoodAttributes(ctx, tx, false, (*[]*UsdaFood)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FDCUsdaFoodAttributes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FDCUsdaFoodAttributes = nil
	if err = a.L.LoadFDCUsdaFoodAttributes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FDCUsdaFoodAttributes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUsdaFoodToManyFDCUsdaFoodComponents(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c UsdaFoodComponent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, true, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, usdaFoodComponentDBTypes, false, usdaFoodComponentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, usdaFoodComponentDBTypes, false, usdaFoodComponentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.FDCID, a.FDCID)
	queries.Assign(&c.FDCID, a.FDCID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.FDCUsdaFoodComponents().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.FDCID, b.FDCID) {
			bFound = true
		}
		if queries.Equal(v.FDCID, c.FDCID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UsdaFoodSlice{&a}
	if err = a.L.LoadFDCUsdaFoodComponents(ctx, tx, false, (*[]*UsdaFood)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FDCUsdaFoodComponents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FDCUsdaFoodComponents = nil
	if err = a.L.LoadFDCUsdaFoodComponents(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FDCUsdaFoodComponents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUsdaFoodToManyFDCUsdaFoodNutrientConversionFactors(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c UsdaFoodNutrientConversionFactor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, true, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, usdaFoodNutrientConversionFactorDBTypes, false, usdaFoodNutrientConversionFactorColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, usdaFoodNutrientConversionFactorDBTypes, false, usdaFoodNutrientConversionFactorColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.FDCID, a.FDCID)
	queries.Assign(&c.FDCID, a.FDCID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.FDCUsdaFoodNutrientConversionFactors().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.FDCID, b.FDCID) {
			bFound = true
		}
		if queries.Equal(v.FDCID, c.FDCID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UsdaFoodSlice{&a}
	if err = a.L.LoadFDCUsdaFoodNutrientConversionFactors(ctx, tx, false, (*[]*UsdaFood)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FDCUsdaFoodNutrientConversionFactors); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FDCUsdaFoodNutrientConversionFactors = nil
	if err = a.L.LoadFDCUsdaFoodNutrientConversionFactors(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FDCUsdaFoodNutrientConversionFactors); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUsdaFoodToManyFDCUsdaFoodPortions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c UsdaFoodPortion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, true, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, usdaFoodPortionDBTypes, false, usdaFoodPortionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, usdaFoodPortionDBTypes, false, usdaFoodPortionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.FDCID, a.FDCID)
	queries.Assign(&c.FDCID, a.FDCID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.FDCUsdaFoodPortions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.FDCID, b.FDCID) {
			bFound = true
		}
		if queries.Equal(v.FDCID, c.FDCID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UsdaFoodSlice{&a}
	if err = a.L.LoadFDCUsdaFoodPortions(ctx, tx, false, (*[]*UsdaFood)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FDCUsdaFoodPortions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FDCUsdaFoodPortions = nil
	if err = a.L.LoadFDCUsdaFoodPortions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FDCUsdaFoodPortions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUsdaFoodToManyFDCUsdaInputFoods(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c UsdaInputFood

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, true, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, usdaInputFoodDBTypes, false, usdaInputFoodColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, usdaInputFoodDBTypes, false, usdaInputFoodColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.FDCID, a.FDCID)
	queries.Assign(&c.FDCID, a.FDCID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.FDCUsdaInputFoods().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.FDCID, b.FDCID) {
			bFound = true
		}
		if queries.Equal(v.FDCID, c.FDCID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UsdaFoodSlice{&a}
	if err = a.L.LoadFDCUsdaInputFoods(ctx, tx, false, (*[]*UsdaFood)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FDCUsdaInputFoods); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FDCUsdaInputFoods = nil
	if err = a.L.LoadFDCUsdaInputFoods(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FDCUsdaInputFoods); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUsdaFoodToManyFDCIDOfInputFoodUsdaInputFoods(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c UsdaInputFood

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, true, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, usdaInputFoodDBTypes, false, usdaInputFoodColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, usdaInputFoodDBTypes, false, usdaInputFoodColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.FDCIDOfInputFood, a.FDCID)
	queries.Assign(&c.FDCIDOfInputFood, a.FDCID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.FDCIDOfInputFoodUsdaInputFoods().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.FDCIDOfInputFood, b.FDCIDOfInputFood) {
			bFound = true
		}
		if queries.Equal(v.FDCIDOfInputFood, c.FDCIDOfInputFood) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UsdaFoodSlice{&a}
	if err = a.L.LoadFDCIDOfInputFoodUsdaInputFoods(ctx, tx, false, (*[]*UsdaFood)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FDCIDOfInputFoodUsdaInputFoods); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FDCIDOfInputFoodUsdaInputFoods = nil
	if err = a.L.LoadFDCIDOfInputFoodUsdaInputFoods(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FDCIDOfInputFoodUsdaInputFoods); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUsdaFoodToManyFDCIDOfSampleFoodUsdaSubSampleFoods(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c UsdaSubSampleFood

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, true, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, usdaSubSampleFoodDBTypes, false, usdaSubSampleFoodColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, usdaSubSampleFoodDBTypes, false, usdaSubSampleFoodColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.FDCIDOfSampleFood, a.FDCID)
	queries.Assign(&c.FDCIDOfSampleFood, a.FDCID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.FDCIDOfSampleFoodUsdaSubSampleFoods().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.FDCIDOfSampleFood, b.FDCIDOfSampleFood) {
			bFound = true
		}
		if queries.Equal(v.FDCIDOfSampleFood, c.FDCIDOfSampleFood) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UsdaFoodSlice{&a}
	if err = a.L.LoadFDCIDOfSampleFoodUsdaSubSampleFoods(ctx, tx, false, (*[]*UsdaFood)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FDCIDOfSampleFoodUsdaSubSampleFoods); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FDCIDOfSampleFoodUsdaSubSampleFoods = nil
	if err = a.L.LoadFDCIDOfSampleFoodUsdaSubSampleFoods(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FDCIDOfSampleFoodUsdaSubSampleFoods); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUsdaFoodToManyAddOpFDCIDOfSampleFoodUsdaFoods(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c, d, e UsdaFood

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaFood{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UsdaFood{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFDCIDOfSampleFoodUsdaFoods(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.FDCIDOfAcquisitionFoodUsdaFoods[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.FDCIDOfAcquisitionFoodUsdaFoods[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.FDCIDOfSampleFoodUsdaFoods[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FDCIDOfSampleFoodUsdaFoods[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FDCIDOfSampleFoodUsdaFoods().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testUsdaFoodToManySetOpFDCIDOfSampleFoodUsdaFoods(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c, d, e UsdaFood

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaFood{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetFDCIDOfSampleFoodUsdaFoods(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FDCIDOfSampleFoodUsdaFoods().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetFDCIDOfSampleFoodUsdaFoods(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FDCIDOfSampleFoodUsdaFoods().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.FDCIDOfAcquisitionFoodUsdaFoods) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.FDCIDOfAcquisitionFoodUsdaFoods) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.FDCIDOfAcquisitionFoodUsdaFoods[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.FDCIDOfAcquisitionFoodUsdaFoods[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.FDCIDOfSampleFoodUsdaFoods[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.FDCIDOfSampleFoodUsdaFoods[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testUsdaFoodToManyRemoveOpFDCIDOfSampleFoodUsdaFoods(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c, d, e UsdaFood

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaFood{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddFDCIDOfSampleFoodUsdaFoods(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FDCIDOfSampleFoodUsdaFoods().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveFDCIDOfSampleFoodUsdaFoods(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FDCIDOfSampleFoodUsdaFoods().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.FDCIDOfAcquisitionFoodUsdaFoods) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.FDCIDOfAcquisitionFoodUsdaFoods) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.FDCIDOfAcquisitionFoodUsdaFoods[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.FDCIDOfAcquisitionFoodUsdaFoods[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.FDCIDOfSampleFoodUsdaFoods) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.FDCIDOfSampleFoodUsdaFoods[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.FDCIDOfSampleFoodUsdaFoods[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testUsdaFoodToManyAddOpFDCIDOfAcquisitionFoodUsdaFoods(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c, d, e UsdaFood

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaFood{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UsdaFood{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFDCIDOfAcquisitionFoodUsdaFoods(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.FDCIDOfSampleFoodUsdaFoods[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.FDCIDOfSampleFoodUsdaFoods[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.FDCIDOfAcquisitionFoodUsdaFoods[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FDCIDOfAcquisitionFoodUsdaFoods[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FDCIDOfAcquisitionFoodUsdaFoods().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testUsdaFoodToManySetOpFDCIDOfAcquisitionFoodUsdaFoods(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c, d, e UsdaFood

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaFood{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetFDCIDOfAcquisitionFoodUsdaFoods(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FDCIDOfAcquisitionFoodUsdaFoods().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetFDCIDOfAcquisitionFoodUsdaFoods(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FDCIDOfAcquisitionFoodUsdaFoods().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.FDCIDOfSampleFoodUsdaFoods) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.FDCIDOfSampleFoodUsdaFoods) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.FDCIDOfSampleFoodUsdaFoods[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.FDCIDOfSampleFoodUsdaFoods[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.FDCIDOfAcquisitionFoodUsdaFoods[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.FDCIDOfAcquisitionFoodUsdaFoods[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testUsdaFoodToManyRemoveOpFDCIDOfAcquisitionFoodUsdaFoods(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c, d, e UsdaFood

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaFood{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddFDCIDOfAcquisitionFoodUsdaFoods(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FDCIDOfAcquisitionFoodUsdaFoods().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveFDCIDOfAcquisitionFoodUsdaFoods(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FDCIDOfAcquisitionFoodUsdaFoods().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.FDCIDOfSampleFoodUsdaFoods) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.FDCIDOfSampleFoodUsdaFoods) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.FDCIDOfSampleFoodUsdaFoods[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.FDCIDOfSampleFoodUsdaFoods[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.FDCIDOfAcquisitionFoodUsdaFoods) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.FDCIDOfAcquisitionFoodUsdaFoods[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.FDCIDOfAcquisitionFoodUsdaFoods[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testUsdaFoodToManyAddOpFDCUsdaFoodAttributes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c, d, e UsdaFoodAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaFoodAttribute{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaFoodAttributeDBTypes, false, strmangle.SetComplement(usdaFoodAttributePrimaryKeyColumns, usdaFoodAttributeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UsdaFoodAttribute{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFDCUsdaFoodAttributes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.FDCID, first.FDCID) {
			t.Error("foreign key was wrong value", a.FDCID, first.FDCID)
		}
		if !queries.Equal(a.FDCID, second.FDCID) {
			t.Error("foreign key was wrong value", a.FDCID, second.FDCID)
		}

		if first.R.FDC != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.FDC != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.FDCUsdaFoodAttributes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FDCUsdaFoodAttributes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FDCUsdaFoodAttributes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testUsdaFoodToManySetOpFDCUsdaFoodAttributes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c, d, e UsdaFoodAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaFoodAttribute{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaFoodAttributeDBTypes, false, strmangle.SetComplement(usdaFoodAttributePrimaryKeyColumns, usdaFoodAttributeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetFDCUsdaFoodAttributes(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FDCUsdaFoodAttributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetFDCUsdaFoodAttributes(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FDCUsdaFoodAttributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.FDCID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.FDCID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.FDCID, d.FDCID) {
		t.Error("foreign key was wrong value", a.FDCID, d.FDCID)
	}
	if !queries.Equal(a.FDCID, e.FDCID) {
		t.Error("foreign key was wrong value", a.FDCID, e.FDCID)
	}

	if b.R.FDC != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.FDC != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.FDC != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.FDC != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.FDCUsdaFoodAttributes[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.FDCUsdaFoodAttributes[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testUsdaFoodToManyRemoveOpFDCUsdaFoodAttributes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c, d, e UsdaFoodAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaFoodAttribute{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaFoodAttributeDBTypes, false, strmangle.SetComplement(usdaFoodAttributePrimaryKeyColumns, usdaFoodAttributeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddFDCUsdaFoodAttributes(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FDCUsdaFoodAttributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveFDCUsdaFoodAttributes(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FDCUsdaFoodAttributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.FDCID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.FDCID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.FDC != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.FDC != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.FDC != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.FDC != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.FDCUsdaFoodAttributes) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.FDCUsdaFoodAttributes[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.FDCUsdaFoodAttributes[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testUsdaFoodToManyAddOpFDCUsdaFoodComponents(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c, d, e UsdaFoodComponent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaFoodComponent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaFoodComponentDBTypes, false, strmangle.SetComplement(usdaFoodComponentPrimaryKeyColumns, usdaFoodComponentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UsdaFoodComponent{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFDCUsdaFoodComponents(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.FDCID, first.FDCID) {
			t.Error("foreign key was wrong value", a.FDCID, first.FDCID)
		}
		if !queries.Equal(a.FDCID, second.FDCID) {
			t.Error("foreign key was wrong value", a.FDCID, second.FDCID)
		}

		if first.R.FDC != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.FDC != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.FDCUsdaFoodComponents[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FDCUsdaFoodComponents[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FDCUsdaFoodComponents().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testUsdaFoodToManySetOpFDCUsdaFoodComponents(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c, d, e UsdaFoodComponent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaFoodComponent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaFoodComponentDBTypes, false, strmangle.SetComplement(usdaFoodComponentPrimaryKeyColumns, usdaFoodComponentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetFDCUsdaFoodComponents(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FDCUsdaFoodComponents().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetFDCUsdaFoodComponents(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FDCUsdaFoodComponents().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.FDCID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.FDCID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.FDCID, d.FDCID) {
		t.Error("foreign key was wrong value", a.FDCID, d.FDCID)
	}
	if !queries.Equal(a.FDCID, e.FDCID) {
		t.Error("foreign key was wrong value", a.FDCID, e.FDCID)
	}

	if b.R.FDC != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.FDC != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.FDC != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.FDC != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.FDCUsdaFoodComponents[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.FDCUsdaFoodComponents[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testUsdaFoodToManyRemoveOpFDCUsdaFoodComponents(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c, d, e UsdaFoodComponent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaFoodComponent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaFoodComponentDBTypes, false, strmangle.SetComplement(usdaFoodComponentPrimaryKeyColumns, usdaFoodComponentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddFDCUsdaFoodComponents(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FDCUsdaFoodComponents().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveFDCUsdaFoodComponents(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FDCUsdaFoodComponents().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.FDCID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.FDCID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.FDC != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.FDC != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.FDC != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.FDC != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.FDCUsdaFoodComponents) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.FDCUsdaFoodComponents[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.FDCUsdaFoodComponents[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testUsdaFoodToManyAddOpFDCUsdaFoodNutrientConversionFactors(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c, d, e UsdaFoodNutrientConversionFactor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaFoodNutrientConversionFactor{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaFoodNutrientConversionFactorDBTypes, false, strmangle.SetComplement(usdaFoodNutrientConversionFactorPrimaryKeyColumns, usdaFoodNutrientConversionFactorColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UsdaFoodNutrientConversionFactor{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFDCUsdaFoodNutrientConversionFactors(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.FDCID, first.FDCID) {
			t.Error("foreign key was wrong value", a.FDCID, first.FDCID)
		}
		if !queries.Equal(a.FDCID, second.FDCID) {
			t.Error("foreign key was wrong value", a.FDCID, second.FDCID)
		}

		if first.R.FDC != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.FDC != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.FDCUsdaFoodNutrientConversionFactors[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FDCUsdaFoodNutrientConversionFactors[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FDCUsdaFoodNutrientConversionFactors().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testUsdaFoodToManySetOpFDCUsdaFoodNutrientConversionFactors(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c, d, e UsdaFoodNutrientConversionFactor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaFoodNutrientConversionFactor{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaFoodNutrientConversionFactorDBTypes, false, strmangle.SetComplement(usdaFoodNutrientConversionFactorPrimaryKeyColumns, usdaFoodNutrientConversionFactorColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetFDCUsdaFoodNutrientConversionFactors(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FDCUsdaFoodNutrientConversionFactors().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetFDCUsdaFoodNutrientConversionFactors(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FDCUsdaFoodNutrientConversionFactors().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.FDCID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.FDCID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.FDCID, d.FDCID) {
		t.Error("foreign key was wrong value", a.FDCID, d.FDCID)
	}
	if !queries.Equal(a.FDCID, e.FDCID) {
		t.Error("foreign key was wrong value", a.FDCID, e.FDCID)
	}

	if b.R.FDC != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.FDC != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.FDC != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.FDC != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.FDCUsdaFoodNutrientConversionFactors[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.FDCUsdaFoodNutrientConversionFactors[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testUsdaFoodToManyRemoveOpFDCUsdaFoodNutrientConversionFactors(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c, d, e UsdaFoodNutrientConversionFactor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaFoodNutrientConversionFactor{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaFoodNutrientConversionFactorDBTypes, false, strmangle.SetComplement(usdaFoodNutrientConversionFactorPrimaryKeyColumns, usdaFoodNutrientConversionFactorColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddFDCUsdaFoodNutrientConversionFactors(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FDCUsdaFoodNutrientConversionFactors().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveFDCUsdaFoodNutrientConversionFactors(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FDCUsdaFoodNutrientConversionFactors().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.FDCID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.FDCID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.FDC != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.FDC != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.FDC != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.FDC != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.FDCUsdaFoodNutrientConversionFactors) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.FDCUsdaFoodNutrientConversionFactors[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.FDCUsdaFoodNutrientConversionFactors[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testUsdaFoodToManyAddOpFDCUsdaFoodPortions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c, d, e UsdaFoodPortion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaFoodPortion{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaFoodPortionDBTypes, false, strmangle.SetComplement(usdaFoodPortionPrimaryKeyColumns, usdaFoodPortionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UsdaFoodPortion{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFDCUsdaFoodPortions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.FDCID, first.FDCID) {
			t.Error("foreign key was wrong value", a.FDCID, first.FDCID)
		}
		if !queries.Equal(a.FDCID, second.FDCID) {
			t.Error("foreign key was wrong value", a.FDCID, second.FDCID)
		}

		if first.R.FDC != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.FDC != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.FDCUsdaFoodPortions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FDCUsdaFoodPortions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FDCUsdaFoodPortions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testUsdaFoodToManySetOpFDCUsdaFoodPortions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c, d, e UsdaFoodPortion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaFoodPortion{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaFoodPortionDBTypes, false, strmangle.SetComplement(usdaFoodPortionPrimaryKeyColumns, usdaFoodPortionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetFDCUsdaFoodPortions(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FDCUsdaFoodPortions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetFDCUsdaFoodPortions(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FDCUsdaFoodPortions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.FDCID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.FDCID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.FDCID, d.FDCID) {
		t.Error("foreign key was wrong value", a.FDCID, d.FDCID)
	}
	if !queries.Equal(a.FDCID, e.FDCID) {
		t.Error("foreign key was wrong value", a.FDCID, e.FDCID)
	}

	if b.R.FDC != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.FDC != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.FDC != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.FDC != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.FDCUsdaFoodPortions[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.FDCUsdaFoodPortions[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testUsdaFoodToManyRemoveOpFDCUsdaFoodPortions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c, d, e UsdaFoodPortion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaFoodPortion{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaFoodPortionDBTypes, false, strmangle.SetComplement(usdaFoodPortionPrimaryKeyColumns, usdaFoodPortionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddFDCUsdaFoodPortions(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FDCUsdaFoodPortions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveFDCUsdaFoodPortions(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FDCUsdaFoodPortions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.FDCID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.FDCID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.FDC != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.FDC != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.FDC != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.FDC != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.FDCUsdaFoodPortions) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.FDCUsdaFoodPortions[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.FDCUsdaFoodPortions[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testUsdaFoodToManyAddOpFDCUsdaInputFoods(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c, d, e UsdaInputFood

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaInputFood{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaInputFoodDBTypes, false, strmangle.SetComplement(usdaInputFoodPrimaryKeyColumns, usdaInputFoodColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UsdaInputFood{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFDCUsdaInputFoods(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.FDCID, first.FDCID) {
			t.Error("foreign key was wrong value", a.FDCID, first.FDCID)
		}
		if !queries.Equal(a.FDCID, second.FDCID) {
			t.Error("foreign key was wrong value", a.FDCID, second.FDCID)
		}

		if first.R.FDC != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.FDC != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.FDCUsdaInputFoods[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FDCUsdaInputFoods[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FDCUsdaInputFoods().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testUsdaFoodToManySetOpFDCUsdaInputFoods(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c, d, e UsdaInputFood

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaInputFood{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaInputFoodDBTypes, false, strmangle.SetComplement(usdaInputFoodPrimaryKeyColumns, usdaInputFoodColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetFDCUsdaInputFoods(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FDCUsdaInputFoods().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetFDCUsdaInputFoods(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FDCUsdaInputFoods().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.FDCID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.FDCID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.FDCID, d.FDCID) {
		t.Error("foreign key was wrong value", a.FDCID, d.FDCID)
	}
	if !queries.Equal(a.FDCID, e.FDCID) {
		t.Error("foreign key was wrong value", a.FDCID, e.FDCID)
	}

	if b.R.FDC != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.FDC != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.FDC != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.FDC != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.FDCUsdaInputFoods[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.FDCUsdaInputFoods[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testUsdaFoodToManyRemoveOpFDCUsdaInputFoods(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c, d, e UsdaInputFood

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaInputFood{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaInputFoodDBTypes, false, strmangle.SetComplement(usdaInputFoodPrimaryKeyColumns, usdaInputFoodColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddFDCUsdaInputFoods(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FDCUsdaInputFoods().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveFDCUsdaInputFoods(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FDCUsdaInputFoods().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.FDCID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.FDCID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.FDC != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.FDC != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.FDC != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.FDC != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.FDCUsdaInputFoods) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.FDCUsdaInputFoods[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.FDCUsdaInputFoods[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testUsdaFoodToManyAddOpFDCIDOfInputFoodUsdaInputFoods(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c, d, e UsdaInputFood

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaInputFood{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaInputFoodDBTypes, false, strmangle.SetComplement(usdaInputFoodPrimaryKeyColumns, usdaInputFoodColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UsdaInputFood{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFDCIDOfInputFoodUsdaInputFoods(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.FDCID, first.FDCIDOfInputFood) {
			t.Error("foreign key was wrong value", a.FDCID, first.FDCIDOfInputFood)
		}
		if !queries.Equal(a.FDCID, second.FDCIDOfInputFood) {
			t.Error("foreign key was wrong value", a.FDCID, second.FDCIDOfInputFood)
		}

		if first.R.FDCIDOfInputFoodUsdaFood != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.FDCIDOfInputFoodUsdaFood != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.FDCIDOfInputFoodUsdaInputFoods[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FDCIDOfInputFoodUsdaInputFoods[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FDCIDOfInputFoodUsdaInputFoods().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testUsdaFoodToManySetOpFDCIDOfInputFoodUsdaInputFoods(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c, d, e UsdaInputFood

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaInputFood{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaInputFoodDBTypes, false, strmangle.SetComplement(usdaInputFoodPrimaryKeyColumns, usdaInputFoodColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetFDCIDOfInputFoodUsdaInputFoods(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FDCIDOfInputFoodUsdaInputFoods().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetFDCIDOfInputFoodUsdaInputFoods(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FDCIDOfInputFoodUsdaInputFoods().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.FDCIDOfInputFood) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.FDCIDOfInputFood) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.FDCID, d.FDCIDOfInputFood) {
		t.Error("foreign key was wrong value", a.FDCID, d.FDCIDOfInputFood)
	}
	if !queries.Equal(a.FDCID, e.FDCIDOfInputFood) {
		t.Error("foreign key was wrong value", a.FDCID, e.FDCIDOfInputFood)
	}

	if b.R.FDCIDOfInputFoodUsdaFood != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.FDCIDOfInputFoodUsdaFood != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.FDCIDOfInputFoodUsdaFood != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.FDCIDOfInputFoodUsdaFood != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.FDCIDOfInputFoodUsdaInputFoods[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.FDCIDOfInputFoodUsdaInputFoods[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testUsdaFoodToManyRemoveOpFDCIDOfInputFoodUsdaInputFoods(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c, d, e UsdaInputFood

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaInputFood{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaInputFoodDBTypes, false, strmangle.SetComplement(usdaInputFoodPrimaryKeyColumns, usdaInputFoodColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddFDCIDOfInputFoodUsdaInputFoods(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FDCIDOfInputFoodUsdaInputFoods().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveFDCIDOfInputFoodUsdaInputFoods(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FDCIDOfInputFoodUsdaInputFoods().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.FDCIDOfInputFood) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.FDCIDOfInputFood) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.FDCIDOfInputFoodUsdaFood != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.FDCIDOfInputFoodUsdaFood != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.FDCIDOfInputFoodUsdaFood != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.FDCIDOfInputFoodUsdaFood != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.FDCIDOfInputFoodUsdaInputFoods) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.FDCIDOfInputFoodUsdaInputFoods[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.FDCIDOfInputFoodUsdaInputFoods[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testUsdaFoodToManyAddOpFDCIDOfSampleFoodUsdaSubSampleFoods(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c, d, e UsdaSubSampleFood

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaSubSampleFood{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaSubSampleFoodDBTypes, false, strmangle.SetComplement(usdaSubSampleFoodPrimaryKeyColumns, usdaSubSampleFoodColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UsdaSubSampleFood{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFDCIDOfSampleFoodUsdaSubSampleFoods(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.FDCID, first.FDCIDOfSampleFood) {
			t.Error("foreign key was wrong value", a.FDCID, first.FDCIDOfSampleFood)
		}
		if !queries.Equal(a.FDCID, second.FDCIDOfSampleFood) {
			t.Error("foreign key was wrong value", a.FDCID, second.FDCIDOfSampleFood)
		}

		if first.R.FDCIDOfSampleFoodUsdaFood != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.FDCIDOfSampleFoodUsdaFood != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.FDCIDOfSampleFoodUsdaSubSampleFoods[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FDCIDOfSampleFoodUsdaSubSampleFoods[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FDCIDOfSampleFoodUsdaSubSampleFoods().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testUsdaFoodToManySetOpFDCIDOfSampleFoodUsdaSubSampleFoods(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c, d, e UsdaSubSampleFood

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaSubSampleFood{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaSubSampleFoodDBTypes, false, strmangle.SetComplement(usdaSubSampleFoodPrimaryKeyColumns, usdaSubSampleFoodColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetFDCIDOfSampleFoodUsdaSubSampleFoods(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FDCIDOfSampleFoodUsdaSubSampleFoods().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetFDCIDOfSampleFoodUsdaSubSampleFoods(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FDCIDOfSampleFoodUsdaSubSampleFoods().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.FDCIDOfSampleFood) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.FDCIDOfSampleFood) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.FDCID, d.FDCIDOfSampleFood) {
		t.Error("foreign key was wrong value", a.FDCID, d.FDCIDOfSampleFood)
	}
	if !queries.Equal(a.FDCID, e.FDCIDOfSampleFood) {
		t.Error("foreign key was wrong value", a.FDCID, e.FDCIDOfSampleFood)
	}

	if b.R.FDCIDOfSampleFoodUsdaFood != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.FDCIDOfSampleFoodUsdaFood != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.FDCIDOfSampleFoodUsdaFood != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.FDCIDOfSampleFoodUsdaFood != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.FDCIDOfSampleFoodUsdaSubSampleFoods[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.FDCIDOfSampleFoodUsdaSubSampleFoods[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testUsdaFoodToManyRemoveOpFDCIDOfSampleFoodUsdaSubSampleFoods(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaFood
	var b, c, d, e UsdaSubSampleFood

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UsdaSubSampleFood{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, usdaSubSampleFoodDBTypes, false, strmangle.SetComplement(usdaSubSampleFoodPrimaryKeyColumns, usdaSubSampleFoodColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddFDCIDOfSampleFoodUsdaSubSampleFoods(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FDCIDOfSampleFoodUsdaSubSampleFoods().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveFDCIDOfSampleFoodUsdaSubSampleFoods(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FDCIDOfSampleFoodUsdaSubSampleFoods().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.FDCIDOfSampleFood) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.FDCIDOfSampleFood) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.FDCIDOfSampleFoodUsdaFood != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.FDCIDOfSampleFoodUsdaFood != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.FDCIDOfSampleFoodUsdaFood != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.FDCIDOfSampleFoodUsdaFood != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.FDCIDOfSampleFoodUsdaSubSampleFoods) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.FDCIDOfSampleFoodUsdaSubSampleFoods[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.FDCIDOfSampleFoodUsdaSubSampleFoods[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testUsdaFoodsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFood{}
	if err = randomize.Struct(seed, o, usdaFoodDBTypes, true, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsdaFoodsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFood{}
	if err = randomize.Struct(seed, o, usdaFoodDBTypes, true, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UsdaFoodSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsdaFoodsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFood{}
	if err = randomize.Struct(seed, o, usdaFoodDBTypes, true, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UsdaFoods().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	usdaFoodDBTypes = map[string]string{`FDCID`: `integer`, `DataType`: `text`, `Description`: `text`, `FoodCategoryID`: `integer`, `PublicationDate`: `text`}
	_               = bytes.MinRead
)

func testUsdaFoodsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(usdaFoodPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(usdaFoodAllColumns) == len(usdaFoodPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFood{}
	if err = randomize.Struct(seed, o, usdaFoodDBTypes, true, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, usdaFoodDBTypes, true, usdaFoodPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUsdaFoodsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(usdaFoodAllColumns) == len(usdaFoodPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFood{}
	if err = randomize.Struct(seed, o, usdaFoodDBTypes, true, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, usdaFoodDBTypes, true, usdaFoodPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(usdaFoodAllColumns, usdaFoodPrimaryKeyColumns) {
		fields = usdaFoodAllColumns
	} else {
		fields = strmangle.SetComplement(
			usdaFoodAllColumns,
			usdaFoodPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UsdaFoodSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUsdaFoodsUpsert(t *testing.T) {
	t.Parallel()

	if len(usdaFoodAllColumns) == len(usdaFoodPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UsdaFood{}
	if err = randomize.Struct(seed, &o, usdaFoodDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UsdaFood: %s", err)
	}

	count, err := UsdaFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, usdaFoodDBTypes, false, usdaFoodPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UsdaFood: %s", err)
	}

	count, err = UsdaFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
