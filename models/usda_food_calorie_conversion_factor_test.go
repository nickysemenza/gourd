// Code generated by SQLBoiler 4.8.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUsdaFoodCalorieConversionFactors(t *testing.T) {
	t.Parallel()

	query := UsdaFoodCalorieConversionFactors()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUsdaFoodCalorieConversionFactorsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodCalorieConversionFactor{}
	if err = randomize.Struct(seed, o, usdaFoodCalorieConversionFactorDBTypes, true, usdaFoodCalorieConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodCalorieConversionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaFoodCalorieConversionFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaFoodCalorieConversionFactorsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodCalorieConversionFactor{}
	if err = randomize.Struct(seed, o, usdaFoodCalorieConversionFactorDBTypes, true, usdaFoodCalorieConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodCalorieConversionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UsdaFoodCalorieConversionFactors().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaFoodCalorieConversionFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaFoodCalorieConversionFactorsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodCalorieConversionFactor{}
	if err = randomize.Struct(seed, o, usdaFoodCalorieConversionFactorDBTypes, true, usdaFoodCalorieConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodCalorieConversionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UsdaFoodCalorieConversionFactorSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaFoodCalorieConversionFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaFoodCalorieConversionFactorsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodCalorieConversionFactor{}
	if err = randomize.Struct(seed, o, usdaFoodCalorieConversionFactorDBTypes, true, usdaFoodCalorieConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodCalorieConversionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UsdaFoodCalorieConversionFactorExists(ctx, tx, o.FoodNutrientConversionFactorID)
	if err != nil {
		t.Errorf("Unable to check if UsdaFoodCalorieConversionFactor exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UsdaFoodCalorieConversionFactorExists to return true, but got false.")
	}
}

func testUsdaFoodCalorieConversionFactorsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodCalorieConversionFactor{}
	if err = randomize.Struct(seed, o, usdaFoodCalorieConversionFactorDBTypes, true, usdaFoodCalorieConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodCalorieConversionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	usdaFoodCalorieConversionFactorFound, err := FindUsdaFoodCalorieConversionFactor(ctx, tx, o.FoodNutrientConversionFactorID)
	if err != nil {
		t.Error(err)
	}

	if usdaFoodCalorieConversionFactorFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUsdaFoodCalorieConversionFactorsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodCalorieConversionFactor{}
	if err = randomize.Struct(seed, o, usdaFoodCalorieConversionFactorDBTypes, true, usdaFoodCalorieConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodCalorieConversionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UsdaFoodCalorieConversionFactors().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUsdaFoodCalorieConversionFactorsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodCalorieConversionFactor{}
	if err = randomize.Struct(seed, o, usdaFoodCalorieConversionFactorDBTypes, true, usdaFoodCalorieConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodCalorieConversionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UsdaFoodCalorieConversionFactors().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUsdaFoodCalorieConversionFactorsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	usdaFoodCalorieConversionFactorOne := &UsdaFoodCalorieConversionFactor{}
	usdaFoodCalorieConversionFactorTwo := &UsdaFoodCalorieConversionFactor{}
	if err = randomize.Struct(seed, usdaFoodCalorieConversionFactorOne, usdaFoodCalorieConversionFactorDBTypes, false, usdaFoodCalorieConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodCalorieConversionFactor struct: %s", err)
	}
	if err = randomize.Struct(seed, usdaFoodCalorieConversionFactorTwo, usdaFoodCalorieConversionFactorDBTypes, false, usdaFoodCalorieConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodCalorieConversionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = usdaFoodCalorieConversionFactorOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = usdaFoodCalorieConversionFactorTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UsdaFoodCalorieConversionFactors().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUsdaFoodCalorieConversionFactorsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	usdaFoodCalorieConversionFactorOne := &UsdaFoodCalorieConversionFactor{}
	usdaFoodCalorieConversionFactorTwo := &UsdaFoodCalorieConversionFactor{}
	if err = randomize.Struct(seed, usdaFoodCalorieConversionFactorOne, usdaFoodCalorieConversionFactorDBTypes, false, usdaFoodCalorieConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodCalorieConversionFactor struct: %s", err)
	}
	if err = randomize.Struct(seed, usdaFoodCalorieConversionFactorTwo, usdaFoodCalorieConversionFactorDBTypes, false, usdaFoodCalorieConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodCalorieConversionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = usdaFoodCalorieConversionFactorOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = usdaFoodCalorieConversionFactorTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaFoodCalorieConversionFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func usdaFoodCalorieConversionFactorBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodCalorieConversionFactor) error {
	*o = UsdaFoodCalorieConversionFactor{}
	return nil
}

func usdaFoodCalorieConversionFactorAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodCalorieConversionFactor) error {
	*o = UsdaFoodCalorieConversionFactor{}
	return nil
}

func usdaFoodCalorieConversionFactorAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodCalorieConversionFactor) error {
	*o = UsdaFoodCalorieConversionFactor{}
	return nil
}

func usdaFoodCalorieConversionFactorBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodCalorieConversionFactor) error {
	*o = UsdaFoodCalorieConversionFactor{}
	return nil
}

func usdaFoodCalorieConversionFactorAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodCalorieConversionFactor) error {
	*o = UsdaFoodCalorieConversionFactor{}
	return nil
}

func usdaFoodCalorieConversionFactorBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodCalorieConversionFactor) error {
	*o = UsdaFoodCalorieConversionFactor{}
	return nil
}

func usdaFoodCalorieConversionFactorAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodCalorieConversionFactor) error {
	*o = UsdaFoodCalorieConversionFactor{}
	return nil
}

func usdaFoodCalorieConversionFactorBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodCalorieConversionFactor) error {
	*o = UsdaFoodCalorieConversionFactor{}
	return nil
}

func usdaFoodCalorieConversionFactorAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaFoodCalorieConversionFactor) error {
	*o = UsdaFoodCalorieConversionFactor{}
	return nil
}

func testUsdaFoodCalorieConversionFactorsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UsdaFoodCalorieConversionFactor{}
	o := &UsdaFoodCalorieConversionFactor{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, usdaFoodCalorieConversionFactorDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UsdaFoodCalorieConversionFactor object: %s", err)
	}

	AddUsdaFoodCalorieConversionFactorHook(boil.BeforeInsertHook, usdaFoodCalorieConversionFactorBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	usdaFoodCalorieConversionFactorBeforeInsertHooks = []UsdaFoodCalorieConversionFactorHook{}

	AddUsdaFoodCalorieConversionFactorHook(boil.AfterInsertHook, usdaFoodCalorieConversionFactorAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	usdaFoodCalorieConversionFactorAfterInsertHooks = []UsdaFoodCalorieConversionFactorHook{}

	AddUsdaFoodCalorieConversionFactorHook(boil.AfterSelectHook, usdaFoodCalorieConversionFactorAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	usdaFoodCalorieConversionFactorAfterSelectHooks = []UsdaFoodCalorieConversionFactorHook{}

	AddUsdaFoodCalorieConversionFactorHook(boil.BeforeUpdateHook, usdaFoodCalorieConversionFactorBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	usdaFoodCalorieConversionFactorBeforeUpdateHooks = []UsdaFoodCalorieConversionFactorHook{}

	AddUsdaFoodCalorieConversionFactorHook(boil.AfterUpdateHook, usdaFoodCalorieConversionFactorAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	usdaFoodCalorieConversionFactorAfterUpdateHooks = []UsdaFoodCalorieConversionFactorHook{}

	AddUsdaFoodCalorieConversionFactorHook(boil.BeforeDeleteHook, usdaFoodCalorieConversionFactorBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	usdaFoodCalorieConversionFactorBeforeDeleteHooks = []UsdaFoodCalorieConversionFactorHook{}

	AddUsdaFoodCalorieConversionFactorHook(boil.AfterDeleteHook, usdaFoodCalorieConversionFactorAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	usdaFoodCalorieConversionFactorAfterDeleteHooks = []UsdaFoodCalorieConversionFactorHook{}

	AddUsdaFoodCalorieConversionFactorHook(boil.BeforeUpsertHook, usdaFoodCalorieConversionFactorBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	usdaFoodCalorieConversionFactorBeforeUpsertHooks = []UsdaFoodCalorieConversionFactorHook{}

	AddUsdaFoodCalorieConversionFactorHook(boil.AfterUpsertHook, usdaFoodCalorieConversionFactorAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	usdaFoodCalorieConversionFactorAfterUpsertHooks = []UsdaFoodCalorieConversionFactorHook{}
}

func testUsdaFoodCalorieConversionFactorsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodCalorieConversionFactor{}
	if err = randomize.Struct(seed, o, usdaFoodCalorieConversionFactorDBTypes, true, usdaFoodCalorieConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodCalorieConversionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaFoodCalorieConversionFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUsdaFoodCalorieConversionFactorsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodCalorieConversionFactor{}
	if err = randomize.Struct(seed, o, usdaFoodCalorieConversionFactorDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UsdaFoodCalorieConversionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(usdaFoodCalorieConversionFactorColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UsdaFoodCalorieConversionFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUsdaFoodCalorieConversionFactorsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodCalorieConversionFactor{}
	if err = randomize.Struct(seed, o, usdaFoodCalorieConversionFactorDBTypes, true, usdaFoodCalorieConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodCalorieConversionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsdaFoodCalorieConversionFactorsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodCalorieConversionFactor{}
	if err = randomize.Struct(seed, o, usdaFoodCalorieConversionFactorDBTypes, true, usdaFoodCalorieConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodCalorieConversionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UsdaFoodCalorieConversionFactorSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsdaFoodCalorieConversionFactorsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodCalorieConversionFactor{}
	if err = randomize.Struct(seed, o, usdaFoodCalorieConversionFactorDBTypes, true, usdaFoodCalorieConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodCalorieConversionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UsdaFoodCalorieConversionFactors().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	usdaFoodCalorieConversionFactorDBTypes = map[string]string{`FoodNutrientConversionFactorID`: `integer`, `ProteinValue`: `real`, `FatValue`: `real`, `CarbohydrateValue`: `real`}
	_                                      = bytes.MinRead
)

func testUsdaFoodCalorieConversionFactorsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(usdaFoodCalorieConversionFactorPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(usdaFoodCalorieConversionFactorAllColumns) == len(usdaFoodCalorieConversionFactorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodCalorieConversionFactor{}
	if err = randomize.Struct(seed, o, usdaFoodCalorieConversionFactorDBTypes, true, usdaFoodCalorieConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodCalorieConversionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaFoodCalorieConversionFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, usdaFoodCalorieConversionFactorDBTypes, true, usdaFoodCalorieConversionFactorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodCalorieConversionFactor struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUsdaFoodCalorieConversionFactorsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(usdaFoodCalorieConversionFactorAllColumns) == len(usdaFoodCalorieConversionFactorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UsdaFoodCalorieConversionFactor{}
	if err = randomize.Struct(seed, o, usdaFoodCalorieConversionFactorDBTypes, true, usdaFoodCalorieConversionFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodCalorieConversionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaFoodCalorieConversionFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, usdaFoodCalorieConversionFactorDBTypes, true, usdaFoodCalorieConversionFactorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodCalorieConversionFactor struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(usdaFoodCalorieConversionFactorAllColumns, usdaFoodCalorieConversionFactorPrimaryKeyColumns) {
		fields = usdaFoodCalorieConversionFactorAllColumns
	} else {
		fields = strmangle.SetComplement(
			usdaFoodCalorieConversionFactorAllColumns,
			usdaFoodCalorieConversionFactorPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UsdaFoodCalorieConversionFactorSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUsdaFoodCalorieConversionFactorsUpsert(t *testing.T) {
	t.Parallel()

	if len(usdaFoodCalorieConversionFactorAllColumns) == len(usdaFoodCalorieConversionFactorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UsdaFoodCalorieConversionFactor{}
	if err = randomize.Struct(seed, &o, usdaFoodCalorieConversionFactorDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UsdaFoodCalorieConversionFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UsdaFoodCalorieConversionFactor: %s", err)
	}

	count, err := UsdaFoodCalorieConversionFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, usdaFoodCalorieConversionFactorDBTypes, false, usdaFoodCalorieConversionFactorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodCalorieConversionFactor struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UsdaFoodCalorieConversionFactor: %s", err)
	}

	count, err = UsdaFoodCalorieConversionFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
