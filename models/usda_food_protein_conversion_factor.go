// Code generated by SQLBoiler 4.8.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UsdaFoodProteinConversionFactor is an object representing the database table.
type UsdaFoodProteinConversionFactor struct {
	FoodNutrientConversionFactorID int          `boil:"food_nutrient_conversion_factor_id" json:"food_nutrient_conversion_factor_id" toml:"food_nutrient_conversion_factor_id" yaml:"food_nutrient_conversion_factor_id"`
	Value                          null.Float32 `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`

	R *usdaFoodProteinConversionFactorR `boil:"rel" json:"rel" toml:"rel" yaml:"rel"`
	L usdaFoodProteinConversionFactorL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UsdaFoodProteinConversionFactorColumns = struct {
	FoodNutrientConversionFactorID string
	Value                          string
}{
	FoodNutrientConversionFactorID: "food_nutrient_conversion_factor_id",
	Value:                          "value",
}

var UsdaFoodProteinConversionFactorTableColumns = struct {
	FoodNutrientConversionFactorID string
	Value                          string
}{
	FoodNutrientConversionFactorID: "usda_food_protein_conversion_factor.food_nutrient_conversion_factor_id",
	Value:                          "usda_food_protein_conversion_factor.value",
}

// Generated where

var UsdaFoodProteinConversionFactorWhere = struct {
	FoodNutrientConversionFactorID whereHelperint
	Value                          whereHelpernull_Float32
}{
	FoodNutrientConversionFactorID: whereHelperint{field: "\"usda_food_protein_conversion_factor\".\"food_nutrient_conversion_factor_id\""},
	Value:                          whereHelpernull_Float32{field: "\"usda_food_protein_conversion_factor\".\"value\""},
}

// UsdaFoodProteinConversionFactorRels is where relationship names are stored.
var UsdaFoodProteinConversionFactorRels = struct {
	FoodNutrientConversionFactor string
}{
	FoodNutrientConversionFactor: "FoodNutrientConversionFactor",
}

// usdaFoodProteinConversionFactorR is where relationships are stored.
type usdaFoodProteinConversionFactorR struct {
	FoodNutrientConversionFactor *UsdaFoodNutrientConversionFactor `boil:"FoodNutrientConversionFactor" json:"FoodNutrientConversionFactor" toml:"FoodNutrientConversionFactor" yaml:"FoodNutrientConversionFactor"`
}

// NewStruct creates a new relationship struct
func (*usdaFoodProteinConversionFactorR) NewStruct() *usdaFoodProteinConversionFactorR {
	return &usdaFoodProteinConversionFactorR{}
}

// usdaFoodProteinConversionFactorL is where Load methods for each relationship are stored.
type usdaFoodProteinConversionFactorL struct{}

var (
	usdaFoodProteinConversionFactorAllColumns            = []string{"food_nutrient_conversion_factor_id", "value"}
	usdaFoodProteinConversionFactorColumnsWithoutDefault = []string{"food_nutrient_conversion_factor_id", "value"}
	usdaFoodProteinConversionFactorColumnsWithDefault    = []string{}
	usdaFoodProteinConversionFactorPrimaryKeyColumns     = []string{"food_nutrient_conversion_factor_id"}
)

type (
	// UsdaFoodProteinConversionFactorSlice is an alias for a slice of pointers to UsdaFoodProteinConversionFactor.
	// This should almost always be used instead of []UsdaFoodProteinConversionFactor.
	UsdaFoodProteinConversionFactorSlice []*UsdaFoodProteinConversionFactor
	// UsdaFoodProteinConversionFactorHook is the signature for custom UsdaFoodProteinConversionFactor hook methods
	UsdaFoodProteinConversionFactorHook func(context.Context, boil.ContextExecutor, *UsdaFoodProteinConversionFactor) error

	usdaFoodProteinConversionFactorQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usdaFoodProteinConversionFactorType                 = reflect.TypeOf(&UsdaFoodProteinConversionFactor{})
	usdaFoodProteinConversionFactorMapping              = queries.MakeStructMapping(usdaFoodProteinConversionFactorType)
	usdaFoodProteinConversionFactorPrimaryKeyMapping, _ = queries.BindMapping(usdaFoodProteinConversionFactorType, usdaFoodProteinConversionFactorMapping, usdaFoodProteinConversionFactorPrimaryKeyColumns)
	usdaFoodProteinConversionFactorInsertCacheMut       sync.RWMutex
	usdaFoodProteinConversionFactorInsertCache          = make(map[string]insertCache)
	usdaFoodProteinConversionFactorUpdateCacheMut       sync.RWMutex
	usdaFoodProteinConversionFactorUpdateCache          = make(map[string]updateCache)
	usdaFoodProteinConversionFactorUpsertCacheMut       sync.RWMutex
	usdaFoodProteinConversionFactorUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var usdaFoodProteinConversionFactorBeforeInsertHooks []UsdaFoodProteinConversionFactorHook
var usdaFoodProteinConversionFactorBeforeUpdateHooks []UsdaFoodProteinConversionFactorHook
var usdaFoodProteinConversionFactorBeforeDeleteHooks []UsdaFoodProteinConversionFactorHook
var usdaFoodProteinConversionFactorBeforeUpsertHooks []UsdaFoodProteinConversionFactorHook

var usdaFoodProteinConversionFactorAfterInsertHooks []UsdaFoodProteinConversionFactorHook
var usdaFoodProteinConversionFactorAfterSelectHooks []UsdaFoodProteinConversionFactorHook
var usdaFoodProteinConversionFactorAfterUpdateHooks []UsdaFoodProteinConversionFactorHook
var usdaFoodProteinConversionFactorAfterDeleteHooks []UsdaFoodProteinConversionFactorHook
var usdaFoodProteinConversionFactorAfterUpsertHooks []UsdaFoodProteinConversionFactorHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UsdaFoodProteinConversionFactor) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodProteinConversionFactorBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UsdaFoodProteinConversionFactor) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodProteinConversionFactorBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UsdaFoodProteinConversionFactor) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodProteinConversionFactorBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UsdaFoodProteinConversionFactor) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodProteinConversionFactorBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UsdaFoodProteinConversionFactor) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodProteinConversionFactorAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UsdaFoodProteinConversionFactor) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodProteinConversionFactorAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UsdaFoodProteinConversionFactor) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodProteinConversionFactorAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UsdaFoodProteinConversionFactor) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodProteinConversionFactorAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UsdaFoodProteinConversionFactor) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodProteinConversionFactorAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUsdaFoodProteinConversionFactorHook registers your hook function for all future operations.
func AddUsdaFoodProteinConversionFactorHook(hookPoint boil.HookPoint, usdaFoodProteinConversionFactorHook UsdaFoodProteinConversionFactorHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		usdaFoodProteinConversionFactorBeforeInsertHooks = append(usdaFoodProteinConversionFactorBeforeInsertHooks, usdaFoodProteinConversionFactorHook)
	case boil.BeforeUpdateHook:
		usdaFoodProteinConversionFactorBeforeUpdateHooks = append(usdaFoodProteinConversionFactorBeforeUpdateHooks, usdaFoodProteinConversionFactorHook)
	case boil.BeforeDeleteHook:
		usdaFoodProteinConversionFactorBeforeDeleteHooks = append(usdaFoodProteinConversionFactorBeforeDeleteHooks, usdaFoodProteinConversionFactorHook)
	case boil.BeforeUpsertHook:
		usdaFoodProteinConversionFactorBeforeUpsertHooks = append(usdaFoodProteinConversionFactorBeforeUpsertHooks, usdaFoodProteinConversionFactorHook)
	case boil.AfterInsertHook:
		usdaFoodProteinConversionFactorAfterInsertHooks = append(usdaFoodProteinConversionFactorAfterInsertHooks, usdaFoodProteinConversionFactorHook)
	case boil.AfterSelectHook:
		usdaFoodProteinConversionFactorAfterSelectHooks = append(usdaFoodProteinConversionFactorAfterSelectHooks, usdaFoodProteinConversionFactorHook)
	case boil.AfterUpdateHook:
		usdaFoodProteinConversionFactorAfterUpdateHooks = append(usdaFoodProteinConversionFactorAfterUpdateHooks, usdaFoodProteinConversionFactorHook)
	case boil.AfterDeleteHook:
		usdaFoodProteinConversionFactorAfterDeleteHooks = append(usdaFoodProteinConversionFactorAfterDeleteHooks, usdaFoodProteinConversionFactorHook)
	case boil.AfterUpsertHook:
		usdaFoodProteinConversionFactorAfterUpsertHooks = append(usdaFoodProteinConversionFactorAfterUpsertHooks, usdaFoodProteinConversionFactorHook)
	}
}

// One returns a single usdaFoodProteinConversionFactor record from the query.
func (q usdaFoodProteinConversionFactorQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UsdaFoodProteinConversionFactor, error) {
	o := &UsdaFoodProteinConversionFactor{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for usda_food_protein_conversion_factor")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UsdaFoodProteinConversionFactor records from the query.
func (q usdaFoodProteinConversionFactorQuery) All(ctx context.Context, exec boil.ContextExecutor) (UsdaFoodProteinConversionFactorSlice, error) {
	var o []*UsdaFoodProteinConversionFactor

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UsdaFoodProteinConversionFactor slice")
	}

	if len(usdaFoodProteinConversionFactorAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UsdaFoodProteinConversionFactor records in the query.
func (q usdaFoodProteinConversionFactorQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count usda_food_protein_conversion_factor rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q usdaFoodProteinConversionFactorQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if usda_food_protein_conversion_factor exists")
	}

	return count > 0, nil
}

// FoodNutrientConversionFactor pointed to by the foreign key.
func (o *UsdaFoodProteinConversionFactor) FoodNutrientConversionFactor(mods ...qm.QueryMod) usdaFoodNutrientConversionFactorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FoodNutrientConversionFactorID),
	}

	queryMods = append(queryMods, mods...)

	query := UsdaFoodNutrientConversionFactors(queryMods...)
	queries.SetFrom(query.Query, "\"usda_food_nutrient_conversion_factor\"")

	return query
}

// LoadFoodNutrientConversionFactor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (usdaFoodProteinConversionFactorL) LoadFoodNutrientConversionFactor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsdaFoodProteinConversionFactor interface{}, mods queries.Applicator) error {
	var slice []*UsdaFoodProteinConversionFactor
	var object *UsdaFoodProteinConversionFactor

	if singular {
		object = maybeUsdaFoodProteinConversionFactor.(*UsdaFoodProteinConversionFactor)
	} else {
		slice = *maybeUsdaFoodProteinConversionFactor.(*[]*UsdaFoodProteinConversionFactor)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &usdaFoodProteinConversionFactorR{}
		}
		args = append(args, object.FoodNutrientConversionFactorID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usdaFoodProteinConversionFactorR{}
			}

			for _, a := range args {
				if a == obj.FoodNutrientConversionFactorID {
					continue Outer
				}
			}

			args = append(args, obj.FoodNutrientConversionFactorID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`usda_food_nutrient_conversion_factor`),
		qm.WhereIn(`usda_food_nutrient_conversion_factor.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UsdaFoodNutrientConversionFactor")
	}

	var resultSlice []*UsdaFoodNutrientConversionFactor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UsdaFoodNutrientConversionFactor")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for usda_food_nutrient_conversion_factor")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usda_food_nutrient_conversion_factor")
	}

	if len(usdaFoodProteinConversionFactorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FoodNutrientConversionFactor = foreign
		if foreign.R == nil {
			foreign.R = &usdaFoodNutrientConversionFactorR{}
		}
		foreign.R.FoodNutrientConversionFactorUsdaFoodProteinConversionFactor = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FoodNutrientConversionFactorID == foreign.ID {
				local.R.FoodNutrientConversionFactor = foreign
				if foreign.R == nil {
					foreign.R = &usdaFoodNutrientConversionFactorR{}
				}
				foreign.R.FoodNutrientConversionFactorUsdaFoodProteinConversionFactor = local
				break
			}
		}
	}

	return nil
}

// SetFoodNutrientConversionFactor of the usdaFoodProteinConversionFactor to the related item.
// Sets o.R.FoodNutrientConversionFactor to related.
// Adds o to related.R.FoodNutrientConversionFactorUsdaFoodProteinConversionFactor.
func (o *UsdaFoodProteinConversionFactor) SetFoodNutrientConversionFactor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UsdaFoodNutrientConversionFactor) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"usda_food_protein_conversion_factor\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"food_nutrient_conversion_factor_id"}),
		strmangle.WhereClause("\"", "\"", 2, usdaFoodProteinConversionFactorPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.FoodNutrientConversionFactorID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FoodNutrientConversionFactorID = related.ID
	if o.R == nil {
		o.R = &usdaFoodProteinConversionFactorR{
			FoodNutrientConversionFactor: related,
		}
	} else {
		o.R.FoodNutrientConversionFactor = related
	}

	if related.R == nil {
		related.R = &usdaFoodNutrientConversionFactorR{
			FoodNutrientConversionFactorUsdaFoodProteinConversionFactor: o,
		}
	} else {
		related.R.FoodNutrientConversionFactorUsdaFoodProteinConversionFactor = o
	}

	return nil
}

// UsdaFoodProteinConversionFactors retrieves all the records using an executor.
func UsdaFoodProteinConversionFactors(mods ...qm.QueryMod) usdaFoodProteinConversionFactorQuery {
	mods = append(mods, qm.From("\"usda_food_protein_conversion_factor\""))
	return usdaFoodProteinConversionFactorQuery{NewQuery(mods...)}
}

// FindUsdaFoodProteinConversionFactor retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUsdaFoodProteinConversionFactor(ctx context.Context, exec boil.ContextExecutor, foodNutrientConversionFactorID int, selectCols ...string) (*UsdaFoodProteinConversionFactor, error) {
	usdaFoodProteinConversionFactorObj := &UsdaFoodProteinConversionFactor{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"usda_food_protein_conversion_factor\" where \"food_nutrient_conversion_factor_id\"=$1", sel,
	)

	q := queries.Raw(query, foodNutrientConversionFactorID)

	err := q.Bind(ctx, exec, usdaFoodProteinConversionFactorObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from usda_food_protein_conversion_factor")
	}

	if err = usdaFoodProteinConversionFactorObj.doAfterSelectHooks(ctx, exec); err != nil {
		return usdaFoodProteinConversionFactorObj, err
	}

	return usdaFoodProteinConversionFactorObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UsdaFoodProteinConversionFactor) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no usda_food_protein_conversion_factor provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaFoodProteinConversionFactorColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	usdaFoodProteinConversionFactorInsertCacheMut.RLock()
	cache, cached := usdaFoodProteinConversionFactorInsertCache[key]
	usdaFoodProteinConversionFactorInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			usdaFoodProteinConversionFactorAllColumns,
			usdaFoodProteinConversionFactorColumnsWithDefault,
			usdaFoodProteinConversionFactorColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(usdaFoodProteinConversionFactorType, usdaFoodProteinConversionFactorMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(usdaFoodProteinConversionFactorType, usdaFoodProteinConversionFactorMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"usda_food_protein_conversion_factor\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"usda_food_protein_conversion_factor\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into usda_food_protein_conversion_factor")
	}

	if !cached {
		usdaFoodProteinConversionFactorInsertCacheMut.Lock()
		usdaFoodProteinConversionFactorInsertCache[key] = cache
		usdaFoodProteinConversionFactorInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UsdaFoodProteinConversionFactor.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UsdaFoodProteinConversionFactor) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	usdaFoodProteinConversionFactorUpdateCacheMut.RLock()
	cache, cached := usdaFoodProteinConversionFactorUpdateCache[key]
	usdaFoodProteinConversionFactorUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			usdaFoodProteinConversionFactorAllColumns,
			usdaFoodProteinConversionFactorPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update usda_food_protein_conversion_factor, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"usda_food_protein_conversion_factor\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, usdaFoodProteinConversionFactorPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(usdaFoodProteinConversionFactorType, usdaFoodProteinConversionFactorMapping, append(wl, usdaFoodProteinConversionFactorPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update usda_food_protein_conversion_factor row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for usda_food_protein_conversion_factor")
	}

	if !cached {
		usdaFoodProteinConversionFactorUpdateCacheMut.Lock()
		usdaFoodProteinConversionFactorUpdateCache[key] = cache
		usdaFoodProteinConversionFactorUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q usdaFoodProteinConversionFactorQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for usda_food_protein_conversion_factor")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for usda_food_protein_conversion_factor")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UsdaFoodProteinConversionFactorSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaFoodProteinConversionFactorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"usda_food_protein_conversion_factor\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, usdaFoodProteinConversionFactorPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in usdaFoodProteinConversionFactor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all usdaFoodProteinConversionFactor")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UsdaFoodProteinConversionFactor) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no usda_food_protein_conversion_factor provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaFoodProteinConversionFactorColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	usdaFoodProteinConversionFactorUpsertCacheMut.RLock()
	cache, cached := usdaFoodProteinConversionFactorUpsertCache[key]
	usdaFoodProteinConversionFactorUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			usdaFoodProteinConversionFactorAllColumns,
			usdaFoodProteinConversionFactorColumnsWithDefault,
			usdaFoodProteinConversionFactorColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			usdaFoodProteinConversionFactorAllColumns,
			usdaFoodProteinConversionFactorPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert usda_food_protein_conversion_factor, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(usdaFoodProteinConversionFactorPrimaryKeyColumns))
			copy(conflict, usdaFoodProteinConversionFactorPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"usda_food_protein_conversion_factor\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(usdaFoodProteinConversionFactorType, usdaFoodProteinConversionFactorMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(usdaFoodProteinConversionFactorType, usdaFoodProteinConversionFactorMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert usda_food_protein_conversion_factor")
	}

	if !cached {
		usdaFoodProteinConversionFactorUpsertCacheMut.Lock()
		usdaFoodProteinConversionFactorUpsertCache[key] = cache
		usdaFoodProteinConversionFactorUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UsdaFoodProteinConversionFactor record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UsdaFoodProteinConversionFactor) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UsdaFoodProteinConversionFactor provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), usdaFoodProteinConversionFactorPrimaryKeyMapping)
	sql := "DELETE FROM \"usda_food_protein_conversion_factor\" WHERE \"food_nutrient_conversion_factor_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from usda_food_protein_conversion_factor")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for usda_food_protein_conversion_factor")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q usdaFoodProteinConversionFactorQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no usdaFoodProteinConversionFactorQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from usda_food_protein_conversion_factor")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for usda_food_protein_conversion_factor")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UsdaFoodProteinConversionFactorSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(usdaFoodProteinConversionFactorBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaFoodProteinConversionFactorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"usda_food_protein_conversion_factor\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaFoodProteinConversionFactorPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from usdaFoodProteinConversionFactor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for usda_food_protein_conversion_factor")
	}

	if len(usdaFoodProteinConversionFactorAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UsdaFoodProteinConversionFactor) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUsdaFoodProteinConversionFactor(ctx, exec, o.FoodNutrientConversionFactorID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsdaFoodProteinConversionFactorSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UsdaFoodProteinConversionFactorSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaFoodProteinConversionFactorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"usda_food_protein_conversion_factor\".* FROM \"usda_food_protein_conversion_factor\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaFoodProteinConversionFactorPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UsdaFoodProteinConversionFactorSlice")
	}

	*o = slice

	return nil
}

// UsdaFoodProteinConversionFactorExists checks if the UsdaFoodProteinConversionFactor row exists.
func UsdaFoodProteinConversionFactorExists(ctx context.Context, exec boil.ContextExecutor, foodNutrientConversionFactorID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"usda_food_protein_conversion_factor\" where \"food_nutrient_conversion_factor_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, foodNutrientConversionFactorID)
	}
	row := exec.QueryRowContext(ctx, sql, foodNutrientConversionFactorID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if usda_food_protein_conversion_factor exists")
	}

	return exists, nil
}
