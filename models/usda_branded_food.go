// Code generated by SQLBoiler 4.10.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UsdaBrandedFood is an object representing the database table.
type UsdaBrandedFood struct {
	FDCID                    int          `boil:"fdc_id" json:"fdc_id" toml:"fdc_id" yaml:"fdc_id"`
	BrandOwner               null.String  `boil:"brand_owner" json:"brand_owner,omitempty" toml:"brand_owner" yaml:"brand_owner,omitempty"`
	BrandName                null.String  `boil:"brand_name" json:"brand_name,omitempty" toml:"brand_name" yaml:"brand_name,omitempty"`
	SubbrandName             null.String  `boil:"subbrand_name" json:"subbrand_name,omitempty" toml:"subbrand_name" yaml:"subbrand_name,omitempty"`
	NotASignificantSourceOf  null.String  `boil:"not_a_significant_source_of" json:"not_a_significant_source_of,omitempty" toml:"not_a_significant_source_of" yaml:"not_a_significant_source_of,omitempty"`
	GtinUpc                  null.String  `boil:"gtin_upc" json:"gtin_upc,omitempty" toml:"gtin_upc" yaml:"gtin_upc,omitempty"`
	Ingredients              null.String  `boil:"ingredients" json:"ingredients,omitempty" toml:"ingredients" yaml:"ingredients,omitempty"`
	ServingSize              null.Float32 `boil:"serving_size" json:"serving_size,omitempty" toml:"serving_size" yaml:"serving_size,omitempty"`
	ServingSizeUnit          null.String  `boil:"serving_size_unit" json:"serving_size_unit,omitempty" toml:"serving_size_unit" yaml:"serving_size_unit,omitempty"`
	HouseholdServingFulltext null.String  `boil:"household_serving_fulltext" json:"household_serving_fulltext,omitempty" toml:"household_serving_fulltext" yaml:"household_serving_fulltext,omitempty"`
	BrandedFoodCategory      null.String  `boil:"branded_food_category" json:"branded_food_category,omitempty" toml:"branded_food_category" yaml:"branded_food_category,omitempty"`
	DataSource               null.String  `boil:"data_source" json:"data_source,omitempty" toml:"data_source" yaml:"data_source,omitempty"`
	PackageWeight            null.String  `boil:"package_weight" json:"package_weight,omitempty" toml:"package_weight" yaml:"package_weight,omitempty"`
	ModifiedDate             null.String  `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`
	AvailableDate            null.String  `boil:"available_date" json:"available_date,omitempty" toml:"available_date" yaml:"available_date,omitempty"`
	DiscontinuedDate         null.String  `boil:"discontinued_date" json:"discontinued_date,omitempty" toml:"discontinued_date" yaml:"discontinued_date,omitempty"`
	MarketCountry            null.String  `boil:"market_country" json:"market_country,omitempty" toml:"market_country" yaml:"market_country,omitempty"`

	R *usdaBrandedFoodR `boil:"rel" json:"rel" toml:"rel" yaml:"rel"`
	L usdaBrandedFoodL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UsdaBrandedFoodColumns = struct {
	FDCID                    string
	BrandOwner               string
	BrandName                string
	SubbrandName             string
	NotASignificantSourceOf  string
	GtinUpc                  string
	Ingredients              string
	ServingSize              string
	ServingSizeUnit          string
	HouseholdServingFulltext string
	BrandedFoodCategory      string
	DataSource               string
	PackageWeight            string
	ModifiedDate             string
	AvailableDate            string
	DiscontinuedDate         string
	MarketCountry            string
}{
	FDCID:                    "fdc_id",
	BrandOwner:               "brand_owner",
	BrandName:                "brand_name",
	SubbrandName:             "subbrand_name",
	NotASignificantSourceOf:  "not_a_significant_source_of",
	GtinUpc:                  "gtin_upc",
	Ingredients:              "ingredients",
	ServingSize:              "serving_size",
	ServingSizeUnit:          "serving_size_unit",
	HouseholdServingFulltext: "household_serving_fulltext",
	BrandedFoodCategory:      "branded_food_category",
	DataSource:               "data_source",
	PackageWeight:            "package_weight",
	ModifiedDate:             "modified_date",
	AvailableDate:            "available_date",
	DiscontinuedDate:         "discontinued_date",
	MarketCountry:            "market_country",
}

var UsdaBrandedFoodTableColumns = struct {
	FDCID                    string
	BrandOwner               string
	BrandName                string
	SubbrandName             string
	NotASignificantSourceOf  string
	GtinUpc                  string
	Ingredients              string
	ServingSize              string
	ServingSizeUnit          string
	HouseholdServingFulltext string
	BrandedFoodCategory      string
	DataSource               string
	PackageWeight            string
	ModifiedDate             string
	AvailableDate            string
	DiscontinuedDate         string
	MarketCountry            string
}{
	FDCID:                    "usda_branded_food.fdc_id",
	BrandOwner:               "usda_branded_food.brand_owner",
	BrandName:                "usda_branded_food.brand_name",
	SubbrandName:             "usda_branded_food.subbrand_name",
	NotASignificantSourceOf:  "usda_branded_food.not_a_significant_source_of",
	GtinUpc:                  "usda_branded_food.gtin_upc",
	Ingredients:              "usda_branded_food.ingredients",
	ServingSize:              "usda_branded_food.serving_size",
	ServingSizeUnit:          "usda_branded_food.serving_size_unit",
	HouseholdServingFulltext: "usda_branded_food.household_serving_fulltext",
	BrandedFoodCategory:      "usda_branded_food.branded_food_category",
	DataSource:               "usda_branded_food.data_source",
	PackageWeight:            "usda_branded_food.package_weight",
	ModifiedDate:             "usda_branded_food.modified_date",
	AvailableDate:            "usda_branded_food.available_date",
	DiscontinuedDate:         "usda_branded_food.discontinued_date",
	MarketCountry:            "usda_branded_food.market_country",
}

// Generated where

type whereHelpernull_Float32 struct{ field string }

func (w whereHelpernull_Float32) EQ(x null.Float32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float32) NEQ(x null.Float32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float32) LT(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float32) LTE(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float32) GT(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float32) GTE(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Float32) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float32) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var UsdaBrandedFoodWhere = struct {
	FDCID                    whereHelperint
	BrandOwner               whereHelpernull_String
	BrandName                whereHelpernull_String
	SubbrandName             whereHelpernull_String
	NotASignificantSourceOf  whereHelpernull_String
	GtinUpc                  whereHelpernull_String
	Ingredients              whereHelpernull_String
	ServingSize              whereHelpernull_Float32
	ServingSizeUnit          whereHelpernull_String
	HouseholdServingFulltext whereHelpernull_String
	BrandedFoodCategory      whereHelpernull_String
	DataSource               whereHelpernull_String
	PackageWeight            whereHelpernull_String
	ModifiedDate             whereHelpernull_String
	AvailableDate            whereHelpernull_String
	DiscontinuedDate         whereHelpernull_String
	MarketCountry            whereHelpernull_String
}{
	FDCID:                    whereHelperint{field: "\"usda_branded_food\".\"fdc_id\""},
	BrandOwner:               whereHelpernull_String{field: "\"usda_branded_food\".\"brand_owner\""},
	BrandName:                whereHelpernull_String{field: "\"usda_branded_food\".\"brand_name\""},
	SubbrandName:             whereHelpernull_String{field: "\"usda_branded_food\".\"subbrand_name\""},
	NotASignificantSourceOf:  whereHelpernull_String{field: "\"usda_branded_food\".\"not_a_significant_source_of\""},
	GtinUpc:                  whereHelpernull_String{field: "\"usda_branded_food\".\"gtin_upc\""},
	Ingredients:              whereHelpernull_String{field: "\"usda_branded_food\".\"ingredients\""},
	ServingSize:              whereHelpernull_Float32{field: "\"usda_branded_food\".\"serving_size\""},
	ServingSizeUnit:          whereHelpernull_String{field: "\"usda_branded_food\".\"serving_size_unit\""},
	HouseholdServingFulltext: whereHelpernull_String{field: "\"usda_branded_food\".\"household_serving_fulltext\""},
	BrandedFoodCategory:      whereHelpernull_String{field: "\"usda_branded_food\".\"branded_food_category\""},
	DataSource:               whereHelpernull_String{field: "\"usda_branded_food\".\"data_source\""},
	PackageWeight:            whereHelpernull_String{field: "\"usda_branded_food\".\"package_weight\""},
	ModifiedDate:             whereHelpernull_String{field: "\"usda_branded_food\".\"modified_date\""},
	AvailableDate:            whereHelpernull_String{field: "\"usda_branded_food\".\"available_date\""},
	DiscontinuedDate:         whereHelpernull_String{field: "\"usda_branded_food\".\"discontinued_date\""},
	MarketCountry:            whereHelpernull_String{field: "\"usda_branded_food\".\"market_country\""},
}

// UsdaBrandedFoodRels is where relationship names are stored.
var UsdaBrandedFoodRels = struct {
	FDC string
}{
	FDC: "FDC",
}

// usdaBrandedFoodR is where relationships are stored.
type usdaBrandedFoodR struct {
	FDC *UsdaFood `boil:"FDC" json:"FDC" toml:"FDC" yaml:"FDC"`
}

// NewStruct creates a new relationship struct
func (*usdaBrandedFoodR) NewStruct() *usdaBrandedFoodR {
	return &usdaBrandedFoodR{}
}

// usdaBrandedFoodL is where Load methods for each relationship are stored.
type usdaBrandedFoodL struct{}

var (
	usdaBrandedFoodAllColumns            = []string{"fdc_id", "brand_owner", "brand_name", "subbrand_name", "not_a_significant_source_of", "gtin_upc", "ingredients", "serving_size", "serving_size_unit", "household_serving_fulltext", "branded_food_category", "data_source", "package_weight", "modified_date", "available_date", "discontinued_date", "market_country"}
	usdaBrandedFoodColumnsWithoutDefault = []string{"fdc_id"}
	usdaBrandedFoodColumnsWithDefault    = []string{"brand_owner", "brand_name", "subbrand_name", "not_a_significant_source_of", "gtin_upc", "ingredients", "serving_size", "serving_size_unit", "household_serving_fulltext", "branded_food_category", "data_source", "package_weight", "modified_date", "available_date", "discontinued_date", "market_country"}
	usdaBrandedFoodPrimaryKeyColumns     = []string{"fdc_id"}
	usdaBrandedFoodGeneratedColumns      = []string{}
)

type (
	// UsdaBrandedFoodSlice is an alias for a slice of pointers to UsdaBrandedFood.
	// This should almost always be used instead of []UsdaBrandedFood.
	UsdaBrandedFoodSlice []*UsdaBrandedFood
	// UsdaBrandedFoodHook is the signature for custom UsdaBrandedFood hook methods
	UsdaBrandedFoodHook func(context.Context, boil.ContextExecutor, *UsdaBrandedFood) error

	usdaBrandedFoodQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usdaBrandedFoodType                 = reflect.TypeOf(&UsdaBrandedFood{})
	usdaBrandedFoodMapping              = queries.MakeStructMapping(usdaBrandedFoodType)
	usdaBrandedFoodPrimaryKeyMapping, _ = queries.BindMapping(usdaBrandedFoodType, usdaBrandedFoodMapping, usdaBrandedFoodPrimaryKeyColumns)
	usdaBrandedFoodInsertCacheMut       sync.RWMutex
	usdaBrandedFoodInsertCache          = make(map[string]insertCache)
	usdaBrandedFoodUpdateCacheMut       sync.RWMutex
	usdaBrandedFoodUpdateCache          = make(map[string]updateCache)
	usdaBrandedFoodUpsertCacheMut       sync.RWMutex
	usdaBrandedFoodUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var usdaBrandedFoodAfterSelectHooks []UsdaBrandedFoodHook

var usdaBrandedFoodBeforeInsertHooks []UsdaBrandedFoodHook
var usdaBrandedFoodAfterInsertHooks []UsdaBrandedFoodHook

var usdaBrandedFoodBeforeUpdateHooks []UsdaBrandedFoodHook
var usdaBrandedFoodAfterUpdateHooks []UsdaBrandedFoodHook

var usdaBrandedFoodBeforeDeleteHooks []UsdaBrandedFoodHook
var usdaBrandedFoodAfterDeleteHooks []UsdaBrandedFoodHook

var usdaBrandedFoodBeforeUpsertHooks []UsdaBrandedFoodHook
var usdaBrandedFoodAfterUpsertHooks []UsdaBrandedFoodHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UsdaBrandedFood) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaBrandedFoodAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UsdaBrandedFood) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaBrandedFoodBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UsdaBrandedFood) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaBrandedFoodAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UsdaBrandedFood) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaBrandedFoodBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UsdaBrandedFood) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaBrandedFoodAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UsdaBrandedFood) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaBrandedFoodBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UsdaBrandedFood) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaBrandedFoodAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UsdaBrandedFood) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaBrandedFoodBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UsdaBrandedFood) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaBrandedFoodAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUsdaBrandedFoodHook registers your hook function for all future operations.
func AddUsdaBrandedFoodHook(hookPoint boil.HookPoint, usdaBrandedFoodHook UsdaBrandedFoodHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		usdaBrandedFoodAfterSelectHooks = append(usdaBrandedFoodAfterSelectHooks, usdaBrandedFoodHook)
	case boil.BeforeInsertHook:
		usdaBrandedFoodBeforeInsertHooks = append(usdaBrandedFoodBeforeInsertHooks, usdaBrandedFoodHook)
	case boil.AfterInsertHook:
		usdaBrandedFoodAfterInsertHooks = append(usdaBrandedFoodAfterInsertHooks, usdaBrandedFoodHook)
	case boil.BeforeUpdateHook:
		usdaBrandedFoodBeforeUpdateHooks = append(usdaBrandedFoodBeforeUpdateHooks, usdaBrandedFoodHook)
	case boil.AfterUpdateHook:
		usdaBrandedFoodAfterUpdateHooks = append(usdaBrandedFoodAfterUpdateHooks, usdaBrandedFoodHook)
	case boil.BeforeDeleteHook:
		usdaBrandedFoodBeforeDeleteHooks = append(usdaBrandedFoodBeforeDeleteHooks, usdaBrandedFoodHook)
	case boil.AfterDeleteHook:
		usdaBrandedFoodAfterDeleteHooks = append(usdaBrandedFoodAfterDeleteHooks, usdaBrandedFoodHook)
	case boil.BeforeUpsertHook:
		usdaBrandedFoodBeforeUpsertHooks = append(usdaBrandedFoodBeforeUpsertHooks, usdaBrandedFoodHook)
	case boil.AfterUpsertHook:
		usdaBrandedFoodAfterUpsertHooks = append(usdaBrandedFoodAfterUpsertHooks, usdaBrandedFoodHook)
	}
}

// One returns a single usdaBrandedFood record from the query.
func (q usdaBrandedFoodQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UsdaBrandedFood, error) {
	o := &UsdaBrandedFood{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for usda_branded_food")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UsdaBrandedFood records from the query.
func (q usdaBrandedFoodQuery) All(ctx context.Context, exec boil.ContextExecutor) (UsdaBrandedFoodSlice, error) {
	var o []*UsdaBrandedFood

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UsdaBrandedFood slice")
	}

	if len(usdaBrandedFoodAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UsdaBrandedFood records in the query.
func (q usdaBrandedFoodQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count usda_branded_food rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q usdaBrandedFoodQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if usda_branded_food exists")
	}

	return count > 0, nil
}

// FDC pointed to by the foreign key.
func (o *UsdaBrandedFood) FDC(mods ...qm.QueryMod) usdaFoodQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"fdc_id\" = ?", o.FDCID),
	}

	queryMods = append(queryMods, mods...)

	return UsdaFoods(queryMods...)
}

// LoadFDC allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (usdaBrandedFoodL) LoadFDC(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsdaBrandedFood interface{}, mods queries.Applicator) error {
	var slice []*UsdaBrandedFood
	var object *UsdaBrandedFood

	if singular {
		object = maybeUsdaBrandedFood.(*UsdaBrandedFood)
	} else {
		slice = *maybeUsdaBrandedFood.(*[]*UsdaBrandedFood)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &usdaBrandedFoodR{}
		}
		args = append(args, object.FDCID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usdaBrandedFoodR{}
			}

			for _, a := range args {
				if a == obj.FDCID {
					continue Outer
				}
			}

			args = append(args, obj.FDCID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`usda_food`),
		qm.WhereIn(`usda_food.fdc_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UsdaFood")
	}

	var resultSlice []*UsdaFood
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UsdaFood")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for usda_food")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usda_food")
	}

	if len(usdaBrandedFoodAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FDC = foreign
		if foreign.R == nil {
			foreign.R = &usdaFoodR{}
		}
		foreign.R.FDCUsdaBrandedFood = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FDCID == foreign.FDCID {
				local.R.FDC = foreign
				if foreign.R == nil {
					foreign.R = &usdaFoodR{}
				}
				foreign.R.FDCUsdaBrandedFood = local
				break
			}
		}
	}

	return nil
}

// SetFDC of the usdaBrandedFood to the related item.
// Sets o.R.FDC to related.
// Adds o to related.R.FDCUsdaBrandedFood.
func (o *UsdaBrandedFood) SetFDC(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UsdaFood) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"usda_branded_food\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"fdc_id"}),
		strmangle.WhereClause("\"", "\"", 2, usdaBrandedFoodPrimaryKeyColumns),
	)
	values := []interface{}{related.FDCID, o.FDCID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FDCID = related.FDCID
	if o.R == nil {
		o.R = &usdaBrandedFoodR{
			FDC: related,
		}
	} else {
		o.R.FDC = related
	}

	if related.R == nil {
		related.R = &usdaFoodR{
			FDCUsdaBrandedFood: o,
		}
	} else {
		related.R.FDCUsdaBrandedFood = o
	}

	return nil
}

// UsdaBrandedFoods retrieves all the records using an executor.
func UsdaBrandedFoods(mods ...qm.QueryMod) usdaBrandedFoodQuery {
	mods = append(mods, qm.From("\"usda_branded_food\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"usda_branded_food\".*"})
	}

	return usdaBrandedFoodQuery{q}
}

// FindUsdaBrandedFood retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUsdaBrandedFood(ctx context.Context, exec boil.ContextExecutor, fDCID int, selectCols ...string) (*UsdaBrandedFood, error) {
	usdaBrandedFoodObj := &UsdaBrandedFood{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"usda_branded_food\" where \"fdc_id\"=$1", sel,
	)

	q := queries.Raw(query, fDCID)

	err := q.Bind(ctx, exec, usdaBrandedFoodObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from usda_branded_food")
	}

	if err = usdaBrandedFoodObj.doAfterSelectHooks(ctx, exec); err != nil {
		return usdaBrandedFoodObj, err
	}

	return usdaBrandedFoodObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UsdaBrandedFood) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no usda_branded_food provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaBrandedFoodColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	usdaBrandedFoodInsertCacheMut.RLock()
	cache, cached := usdaBrandedFoodInsertCache[key]
	usdaBrandedFoodInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			usdaBrandedFoodAllColumns,
			usdaBrandedFoodColumnsWithDefault,
			usdaBrandedFoodColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(usdaBrandedFoodType, usdaBrandedFoodMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(usdaBrandedFoodType, usdaBrandedFoodMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"usda_branded_food\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"usda_branded_food\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into usda_branded_food")
	}

	if !cached {
		usdaBrandedFoodInsertCacheMut.Lock()
		usdaBrandedFoodInsertCache[key] = cache
		usdaBrandedFoodInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UsdaBrandedFood.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UsdaBrandedFood) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	usdaBrandedFoodUpdateCacheMut.RLock()
	cache, cached := usdaBrandedFoodUpdateCache[key]
	usdaBrandedFoodUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			usdaBrandedFoodAllColumns,
			usdaBrandedFoodPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update usda_branded_food, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"usda_branded_food\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, usdaBrandedFoodPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(usdaBrandedFoodType, usdaBrandedFoodMapping, append(wl, usdaBrandedFoodPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update usda_branded_food row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for usda_branded_food")
	}

	if !cached {
		usdaBrandedFoodUpdateCacheMut.Lock()
		usdaBrandedFoodUpdateCache[key] = cache
		usdaBrandedFoodUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q usdaBrandedFoodQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for usda_branded_food")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for usda_branded_food")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UsdaBrandedFoodSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaBrandedFoodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"usda_branded_food\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, usdaBrandedFoodPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in usdaBrandedFood slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all usdaBrandedFood")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UsdaBrandedFood) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no usda_branded_food provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaBrandedFoodColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	usdaBrandedFoodUpsertCacheMut.RLock()
	cache, cached := usdaBrandedFoodUpsertCache[key]
	usdaBrandedFoodUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			usdaBrandedFoodAllColumns,
			usdaBrandedFoodColumnsWithDefault,
			usdaBrandedFoodColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			usdaBrandedFoodAllColumns,
			usdaBrandedFoodPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert usda_branded_food, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(usdaBrandedFoodPrimaryKeyColumns))
			copy(conflict, usdaBrandedFoodPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"usda_branded_food\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(usdaBrandedFoodType, usdaBrandedFoodMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(usdaBrandedFoodType, usdaBrandedFoodMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert usda_branded_food")
	}

	if !cached {
		usdaBrandedFoodUpsertCacheMut.Lock()
		usdaBrandedFoodUpsertCache[key] = cache
		usdaBrandedFoodUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UsdaBrandedFood record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UsdaBrandedFood) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UsdaBrandedFood provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), usdaBrandedFoodPrimaryKeyMapping)
	sql := "DELETE FROM \"usda_branded_food\" WHERE \"fdc_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from usda_branded_food")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for usda_branded_food")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q usdaBrandedFoodQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no usdaBrandedFoodQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from usda_branded_food")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for usda_branded_food")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UsdaBrandedFoodSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(usdaBrandedFoodBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaBrandedFoodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"usda_branded_food\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaBrandedFoodPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from usdaBrandedFood slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for usda_branded_food")
	}

	if len(usdaBrandedFoodAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UsdaBrandedFood) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUsdaBrandedFood(ctx, exec, o.FDCID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsdaBrandedFoodSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UsdaBrandedFoodSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaBrandedFoodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"usda_branded_food\".* FROM \"usda_branded_food\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaBrandedFoodPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UsdaBrandedFoodSlice")
	}

	*o = slice

	return nil
}

// UsdaBrandedFoodExists checks if the UsdaBrandedFood row exists.
func UsdaBrandedFoodExists(ctx context.Context, exec boil.ContextExecutor, fDCID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"usda_branded_food\" where \"fdc_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, fDCID)
	}
	row := exec.QueryRowContext(ctx, sql, fDCID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if usda_branded_food exists")
	}

	return exists, nil
}
