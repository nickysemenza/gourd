// Code generated by SQLBoiler 4.8.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUsdaSurveyFNDDSFoods(t *testing.T) {
	t.Parallel()

	query := UsdaSurveyFNDDSFoods()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUsdaSurveyFNDDSFoodsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSurveyFNDDSFood{}
	if err = randomize.Struct(seed, o, usdaSurveyFNDDSFoodDBTypes, true, usdaSurveyFNDDSFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSurveyFNDDSFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaSurveyFNDDSFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaSurveyFNDDSFoodsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSurveyFNDDSFood{}
	if err = randomize.Struct(seed, o, usdaSurveyFNDDSFoodDBTypes, true, usdaSurveyFNDDSFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSurveyFNDDSFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UsdaSurveyFNDDSFoods().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaSurveyFNDDSFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaSurveyFNDDSFoodsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSurveyFNDDSFood{}
	if err = randomize.Struct(seed, o, usdaSurveyFNDDSFoodDBTypes, true, usdaSurveyFNDDSFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSurveyFNDDSFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UsdaSurveyFNDDSFoodSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaSurveyFNDDSFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaSurveyFNDDSFoodsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSurveyFNDDSFood{}
	if err = randomize.Struct(seed, o, usdaSurveyFNDDSFoodDBTypes, true, usdaSurveyFNDDSFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSurveyFNDDSFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UsdaSurveyFNDDSFoodExists(ctx, tx, o.FDCID)
	if err != nil {
		t.Errorf("Unable to check if UsdaSurveyFNDDSFood exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UsdaSurveyFNDDSFoodExists to return true, but got false.")
	}
}

func testUsdaSurveyFNDDSFoodsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSurveyFNDDSFood{}
	if err = randomize.Struct(seed, o, usdaSurveyFNDDSFoodDBTypes, true, usdaSurveyFNDDSFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSurveyFNDDSFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	usdaSurveyFNDDSFoodFound, err := FindUsdaSurveyFNDDSFood(ctx, tx, o.FDCID)
	if err != nil {
		t.Error(err)
	}

	if usdaSurveyFNDDSFoodFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUsdaSurveyFNDDSFoodsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSurveyFNDDSFood{}
	if err = randomize.Struct(seed, o, usdaSurveyFNDDSFoodDBTypes, true, usdaSurveyFNDDSFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSurveyFNDDSFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UsdaSurveyFNDDSFoods().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUsdaSurveyFNDDSFoodsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSurveyFNDDSFood{}
	if err = randomize.Struct(seed, o, usdaSurveyFNDDSFoodDBTypes, true, usdaSurveyFNDDSFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSurveyFNDDSFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UsdaSurveyFNDDSFoods().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUsdaSurveyFNDDSFoodsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	usdaSurveyFNDDSFoodOne := &UsdaSurveyFNDDSFood{}
	usdaSurveyFNDDSFoodTwo := &UsdaSurveyFNDDSFood{}
	if err = randomize.Struct(seed, usdaSurveyFNDDSFoodOne, usdaSurveyFNDDSFoodDBTypes, false, usdaSurveyFNDDSFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSurveyFNDDSFood struct: %s", err)
	}
	if err = randomize.Struct(seed, usdaSurveyFNDDSFoodTwo, usdaSurveyFNDDSFoodDBTypes, false, usdaSurveyFNDDSFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSurveyFNDDSFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = usdaSurveyFNDDSFoodOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = usdaSurveyFNDDSFoodTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UsdaSurveyFNDDSFoods().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUsdaSurveyFNDDSFoodsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	usdaSurveyFNDDSFoodOne := &UsdaSurveyFNDDSFood{}
	usdaSurveyFNDDSFoodTwo := &UsdaSurveyFNDDSFood{}
	if err = randomize.Struct(seed, usdaSurveyFNDDSFoodOne, usdaSurveyFNDDSFoodDBTypes, false, usdaSurveyFNDDSFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSurveyFNDDSFood struct: %s", err)
	}
	if err = randomize.Struct(seed, usdaSurveyFNDDSFoodTwo, usdaSurveyFNDDSFoodDBTypes, false, usdaSurveyFNDDSFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSurveyFNDDSFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = usdaSurveyFNDDSFoodOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = usdaSurveyFNDDSFoodTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaSurveyFNDDSFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func usdaSurveyFNDDSFoodBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaSurveyFNDDSFood) error {
	*o = UsdaSurveyFNDDSFood{}
	return nil
}

func usdaSurveyFNDDSFoodAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaSurveyFNDDSFood) error {
	*o = UsdaSurveyFNDDSFood{}
	return nil
}

func usdaSurveyFNDDSFoodAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UsdaSurveyFNDDSFood) error {
	*o = UsdaSurveyFNDDSFood{}
	return nil
}

func usdaSurveyFNDDSFoodBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UsdaSurveyFNDDSFood) error {
	*o = UsdaSurveyFNDDSFood{}
	return nil
}

func usdaSurveyFNDDSFoodAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UsdaSurveyFNDDSFood) error {
	*o = UsdaSurveyFNDDSFood{}
	return nil
}

func usdaSurveyFNDDSFoodBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UsdaSurveyFNDDSFood) error {
	*o = UsdaSurveyFNDDSFood{}
	return nil
}

func usdaSurveyFNDDSFoodAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UsdaSurveyFNDDSFood) error {
	*o = UsdaSurveyFNDDSFood{}
	return nil
}

func usdaSurveyFNDDSFoodBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaSurveyFNDDSFood) error {
	*o = UsdaSurveyFNDDSFood{}
	return nil
}

func usdaSurveyFNDDSFoodAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaSurveyFNDDSFood) error {
	*o = UsdaSurveyFNDDSFood{}
	return nil
}

func testUsdaSurveyFNDDSFoodsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UsdaSurveyFNDDSFood{}
	o := &UsdaSurveyFNDDSFood{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, usdaSurveyFNDDSFoodDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UsdaSurveyFNDDSFood object: %s", err)
	}

	AddUsdaSurveyFNDDSFoodHook(boil.BeforeInsertHook, usdaSurveyFNDDSFoodBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	usdaSurveyFNDDSFoodBeforeInsertHooks = []UsdaSurveyFNDDSFoodHook{}

	AddUsdaSurveyFNDDSFoodHook(boil.AfterInsertHook, usdaSurveyFNDDSFoodAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	usdaSurveyFNDDSFoodAfterInsertHooks = []UsdaSurveyFNDDSFoodHook{}

	AddUsdaSurveyFNDDSFoodHook(boil.AfterSelectHook, usdaSurveyFNDDSFoodAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	usdaSurveyFNDDSFoodAfterSelectHooks = []UsdaSurveyFNDDSFoodHook{}

	AddUsdaSurveyFNDDSFoodHook(boil.BeforeUpdateHook, usdaSurveyFNDDSFoodBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	usdaSurveyFNDDSFoodBeforeUpdateHooks = []UsdaSurveyFNDDSFoodHook{}

	AddUsdaSurveyFNDDSFoodHook(boil.AfterUpdateHook, usdaSurveyFNDDSFoodAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	usdaSurveyFNDDSFoodAfterUpdateHooks = []UsdaSurveyFNDDSFoodHook{}

	AddUsdaSurveyFNDDSFoodHook(boil.BeforeDeleteHook, usdaSurveyFNDDSFoodBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	usdaSurveyFNDDSFoodBeforeDeleteHooks = []UsdaSurveyFNDDSFoodHook{}

	AddUsdaSurveyFNDDSFoodHook(boil.AfterDeleteHook, usdaSurveyFNDDSFoodAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	usdaSurveyFNDDSFoodAfterDeleteHooks = []UsdaSurveyFNDDSFoodHook{}

	AddUsdaSurveyFNDDSFoodHook(boil.BeforeUpsertHook, usdaSurveyFNDDSFoodBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	usdaSurveyFNDDSFoodBeforeUpsertHooks = []UsdaSurveyFNDDSFoodHook{}

	AddUsdaSurveyFNDDSFoodHook(boil.AfterUpsertHook, usdaSurveyFNDDSFoodAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	usdaSurveyFNDDSFoodAfterUpsertHooks = []UsdaSurveyFNDDSFoodHook{}
}

func testUsdaSurveyFNDDSFoodsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSurveyFNDDSFood{}
	if err = randomize.Struct(seed, o, usdaSurveyFNDDSFoodDBTypes, true, usdaSurveyFNDDSFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSurveyFNDDSFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaSurveyFNDDSFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUsdaSurveyFNDDSFoodsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSurveyFNDDSFood{}
	if err = randomize.Struct(seed, o, usdaSurveyFNDDSFoodDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UsdaSurveyFNDDSFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(usdaSurveyFNDDSFoodColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UsdaSurveyFNDDSFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUsdaSurveyFNDDSFoodToOneUsdaFoodUsingFDC(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UsdaSurveyFNDDSFood
	var foreign UsdaFood

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, usdaSurveyFNDDSFoodDBTypes, false, usdaSurveyFNDDSFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSurveyFNDDSFood struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, usdaFoodDBTypes, false, usdaFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFood struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.FDCID = foreign.FDCID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.FDC().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.FDCID != foreign.FDCID {
		t.Errorf("want: %v, got %v", foreign.FDCID, check.FDCID)
	}

	slice := UsdaSurveyFNDDSFoodSlice{&local}
	if err = local.L.LoadFDC(ctx, tx, false, (*[]*UsdaSurveyFNDDSFood)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FDC == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.FDC = nil
	if err = local.L.LoadFDC(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FDC == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUsdaSurveyFNDDSFoodToOneUsdaWweiaFoodCategoryUsingWweiaCategoryCodeUsdaWweiaFoodCategory(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UsdaSurveyFNDDSFood
	var foreign UsdaWweiaFoodCategory

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, usdaSurveyFNDDSFoodDBTypes, true, usdaSurveyFNDDSFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSurveyFNDDSFood struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, usdaWweiaFoodCategoryDBTypes, false, usdaWweiaFoodCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaWweiaFoodCategory struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.WweiaCategoryCode, foreign.WweiaFoodCategoryCode)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.WweiaCategoryCodeUsdaWweiaFoodCategory().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.WweiaFoodCategoryCode, foreign.WweiaFoodCategoryCode) {
		t.Errorf("want: %v, got %v", foreign.WweiaFoodCategoryCode, check.WweiaFoodCategoryCode)
	}

	slice := UsdaSurveyFNDDSFoodSlice{&local}
	if err = local.L.LoadWweiaCategoryCodeUsdaWweiaFoodCategory(ctx, tx, false, (*[]*UsdaSurveyFNDDSFood)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.WweiaCategoryCodeUsdaWweiaFoodCategory == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.WweiaCategoryCodeUsdaWweiaFoodCategory = nil
	if err = local.L.LoadWweiaCategoryCodeUsdaWweiaFoodCategory(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.WweiaCategoryCodeUsdaWweiaFoodCategory == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUsdaSurveyFNDDSFoodToOneSetOpUsdaFoodUsingFDC(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaSurveyFNDDSFood
	var b, c UsdaFood

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaSurveyFNDDSFoodDBTypes, false, strmangle.SetComplement(usdaSurveyFNDDSFoodPrimaryKeyColumns, usdaSurveyFNDDSFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, usdaFoodDBTypes, false, strmangle.SetComplement(usdaFoodPrimaryKeyColumns, usdaFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UsdaFood{&b, &c} {
		err = a.SetFDC(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.FDC != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FDCUsdaSurveyFNDDSFood != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.FDCID != x.FDCID {
			t.Error("foreign key was wrong value", a.FDCID)
		}

		if exists, err := UsdaSurveyFNDDSFoodExists(ctx, tx, a.FDCID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testUsdaSurveyFNDDSFoodToOneSetOpUsdaWweiaFoodCategoryUsingWweiaCategoryCodeUsdaWweiaFoodCategory(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaSurveyFNDDSFood
	var b, c UsdaWweiaFoodCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaSurveyFNDDSFoodDBTypes, false, strmangle.SetComplement(usdaSurveyFNDDSFoodPrimaryKeyColumns, usdaSurveyFNDDSFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, usdaWweiaFoodCategoryDBTypes, false, strmangle.SetComplement(usdaWweiaFoodCategoryPrimaryKeyColumns, usdaWweiaFoodCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, usdaWweiaFoodCategoryDBTypes, false, strmangle.SetComplement(usdaWweiaFoodCategoryPrimaryKeyColumns, usdaWweiaFoodCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UsdaWweiaFoodCategory{&b, &c} {
		err = a.SetWweiaCategoryCodeUsdaWweiaFoodCategory(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.WweiaCategoryCodeUsdaWweiaFoodCategory != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.WweiaCategoryCodeUsdaSurveyFNDDSFoods[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.WweiaCategoryCode, x.WweiaFoodCategoryCode) {
			t.Error("foreign key was wrong value", a.WweiaCategoryCode)
		}

		zero := reflect.Zero(reflect.TypeOf(a.WweiaCategoryCode))
		reflect.Indirect(reflect.ValueOf(&a.WweiaCategoryCode)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.WweiaCategoryCode, x.WweiaFoodCategoryCode) {
			t.Error("foreign key was wrong value", a.WweiaCategoryCode, x.WweiaFoodCategoryCode)
		}
	}
}

func testUsdaSurveyFNDDSFoodToOneRemoveOpUsdaWweiaFoodCategoryUsingWweiaCategoryCodeUsdaWweiaFoodCategory(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaSurveyFNDDSFood
	var b UsdaWweiaFoodCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaSurveyFNDDSFoodDBTypes, false, strmangle.SetComplement(usdaSurveyFNDDSFoodPrimaryKeyColumns, usdaSurveyFNDDSFoodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, usdaWweiaFoodCategoryDBTypes, false, strmangle.SetComplement(usdaWweiaFoodCategoryPrimaryKeyColumns, usdaWweiaFoodCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetWweiaCategoryCodeUsdaWweiaFoodCategory(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveWweiaCategoryCodeUsdaWweiaFoodCategory(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.WweiaCategoryCodeUsdaWweiaFoodCategory().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.WweiaCategoryCodeUsdaWweiaFoodCategory != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.WweiaCategoryCode) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.WweiaCategoryCodeUsdaSurveyFNDDSFoods) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testUsdaSurveyFNDDSFoodsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSurveyFNDDSFood{}
	if err = randomize.Struct(seed, o, usdaSurveyFNDDSFoodDBTypes, true, usdaSurveyFNDDSFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSurveyFNDDSFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsdaSurveyFNDDSFoodsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSurveyFNDDSFood{}
	if err = randomize.Struct(seed, o, usdaSurveyFNDDSFoodDBTypes, true, usdaSurveyFNDDSFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSurveyFNDDSFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UsdaSurveyFNDDSFoodSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsdaSurveyFNDDSFoodsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSurveyFNDDSFood{}
	if err = randomize.Struct(seed, o, usdaSurveyFNDDSFoodDBTypes, true, usdaSurveyFNDDSFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSurveyFNDDSFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UsdaSurveyFNDDSFoods().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	usdaSurveyFNDDSFoodDBTypes = map[string]string{`FDCID`: `integer`, `FoodCode`: `integer`, `WweiaCategoryCode`: `integer`, `StartDate`: `text`, `EndDate`: `text`}
	_                          = bytes.MinRead
)

func testUsdaSurveyFNDDSFoodsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(usdaSurveyFNDDSFoodPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(usdaSurveyFNDDSFoodAllColumns) == len(usdaSurveyFNDDSFoodPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSurveyFNDDSFood{}
	if err = randomize.Struct(seed, o, usdaSurveyFNDDSFoodDBTypes, true, usdaSurveyFNDDSFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSurveyFNDDSFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaSurveyFNDDSFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, usdaSurveyFNDDSFoodDBTypes, true, usdaSurveyFNDDSFoodPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaSurveyFNDDSFood struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUsdaSurveyFNDDSFoodsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(usdaSurveyFNDDSFoodAllColumns) == len(usdaSurveyFNDDSFoodPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSurveyFNDDSFood{}
	if err = randomize.Struct(seed, o, usdaSurveyFNDDSFoodDBTypes, true, usdaSurveyFNDDSFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSurveyFNDDSFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaSurveyFNDDSFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, usdaSurveyFNDDSFoodDBTypes, true, usdaSurveyFNDDSFoodPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaSurveyFNDDSFood struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(usdaSurveyFNDDSFoodAllColumns, usdaSurveyFNDDSFoodPrimaryKeyColumns) {
		fields = usdaSurveyFNDDSFoodAllColumns
	} else {
		fields = strmangle.SetComplement(
			usdaSurveyFNDDSFoodAllColumns,
			usdaSurveyFNDDSFoodPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UsdaSurveyFNDDSFoodSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUsdaSurveyFNDDSFoodsUpsert(t *testing.T) {
	t.Parallel()

	if len(usdaSurveyFNDDSFoodAllColumns) == len(usdaSurveyFNDDSFoodPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UsdaSurveyFNDDSFood{}
	if err = randomize.Struct(seed, &o, usdaSurveyFNDDSFoodDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UsdaSurveyFNDDSFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UsdaSurveyFNDDSFood: %s", err)
	}

	count, err := UsdaSurveyFNDDSFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, usdaSurveyFNDDSFoodDBTypes, false, usdaSurveyFNDDSFoodPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaSurveyFNDDSFood struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UsdaSurveyFNDDSFood: %s", err)
	}

	count, err = UsdaSurveyFNDDSFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
