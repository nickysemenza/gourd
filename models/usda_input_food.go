// Code generated by SQLBoiler 4.10.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UsdaInputFood is an object representing the database table.
type UsdaInputFood struct {
	ID                 int          `boil:"id" json:"id" toml:"id" yaml:"id"`
	FDCID              null.Int     `boil:"fdc_id" json:"fdc_id,omitempty" toml:"fdc_id" yaml:"fdc_id,omitempty"`
	FDCIDOfInputFood   null.Int     `boil:"fdc_id_of_input_food" json:"fdc_id_of_input_food,omitempty" toml:"fdc_id_of_input_food" yaml:"fdc_id_of_input_food,omitempty"`
	SeqNum             null.Int     `boil:"seq_num" json:"seq_num,omitempty" toml:"seq_num" yaml:"seq_num,omitempty"`
	Amount             null.Float32 `boil:"amount" json:"amount,omitempty" toml:"amount" yaml:"amount,omitempty"`
	SRCode             null.Int     `boil:"sr_code" json:"sr_code,omitempty" toml:"sr_code" yaml:"sr_code,omitempty"`
	SRDescription      null.String  `boil:"sr_description" json:"sr_description,omitempty" toml:"sr_description" yaml:"sr_description,omitempty"`
	Unit               null.String  `boil:"unit" json:"unit,omitempty" toml:"unit" yaml:"unit,omitempty"`
	PortionCode        null.Int     `boil:"portion_code" json:"portion_code,omitempty" toml:"portion_code" yaml:"portion_code,omitempty"`
	PortionDescription null.String  `boil:"portion_description" json:"portion_description,omitempty" toml:"portion_description" yaml:"portion_description,omitempty"`
	GramWeight         null.Float32 `boil:"gram_weight" json:"gram_weight,omitempty" toml:"gram_weight" yaml:"gram_weight,omitempty"`
	RetentionCode      null.Int     `boil:"retention_code" json:"retention_code,omitempty" toml:"retention_code" yaml:"retention_code,omitempty"`
	SurveyFlag         null.Int     `boil:"survey_flag" json:"survey_flag,omitempty" toml:"survey_flag" yaml:"survey_flag,omitempty"`

	R *usdaInputFoodR `boil:"rel" json:"rel" toml:"rel" yaml:"rel"`
	L usdaInputFoodL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UsdaInputFoodColumns = struct {
	ID                 string
	FDCID              string
	FDCIDOfInputFood   string
	SeqNum             string
	Amount             string
	SRCode             string
	SRDescription      string
	Unit               string
	PortionCode        string
	PortionDescription string
	GramWeight         string
	RetentionCode      string
	SurveyFlag         string
}{
	ID:                 "id",
	FDCID:              "fdc_id",
	FDCIDOfInputFood:   "fdc_id_of_input_food",
	SeqNum:             "seq_num",
	Amount:             "amount",
	SRCode:             "sr_code",
	SRDescription:      "sr_description",
	Unit:               "unit",
	PortionCode:        "portion_code",
	PortionDescription: "portion_description",
	GramWeight:         "gram_weight",
	RetentionCode:      "retention_code",
	SurveyFlag:         "survey_flag",
}

var UsdaInputFoodTableColumns = struct {
	ID                 string
	FDCID              string
	FDCIDOfInputFood   string
	SeqNum             string
	Amount             string
	SRCode             string
	SRDescription      string
	Unit               string
	PortionCode        string
	PortionDescription string
	GramWeight         string
	RetentionCode      string
	SurveyFlag         string
}{
	ID:                 "usda_input_food.id",
	FDCID:              "usda_input_food.fdc_id",
	FDCIDOfInputFood:   "usda_input_food.fdc_id_of_input_food",
	SeqNum:             "usda_input_food.seq_num",
	Amount:             "usda_input_food.amount",
	SRCode:             "usda_input_food.sr_code",
	SRDescription:      "usda_input_food.sr_description",
	Unit:               "usda_input_food.unit",
	PortionCode:        "usda_input_food.portion_code",
	PortionDescription: "usda_input_food.portion_description",
	GramWeight:         "usda_input_food.gram_weight",
	RetentionCode:      "usda_input_food.retention_code",
	SurveyFlag:         "usda_input_food.survey_flag",
}

// Generated where

var UsdaInputFoodWhere = struct {
	ID                 whereHelperint
	FDCID              whereHelpernull_Int
	FDCIDOfInputFood   whereHelpernull_Int
	SeqNum             whereHelpernull_Int
	Amount             whereHelpernull_Float32
	SRCode             whereHelpernull_Int
	SRDescription      whereHelpernull_String
	Unit               whereHelpernull_String
	PortionCode        whereHelpernull_Int
	PortionDescription whereHelpernull_String
	GramWeight         whereHelpernull_Float32
	RetentionCode      whereHelpernull_Int
	SurveyFlag         whereHelpernull_Int
}{
	ID:                 whereHelperint{field: "\"usda_input_food\".\"id\""},
	FDCID:              whereHelpernull_Int{field: "\"usda_input_food\".\"fdc_id\""},
	FDCIDOfInputFood:   whereHelpernull_Int{field: "\"usda_input_food\".\"fdc_id_of_input_food\""},
	SeqNum:             whereHelpernull_Int{field: "\"usda_input_food\".\"seq_num\""},
	Amount:             whereHelpernull_Float32{field: "\"usda_input_food\".\"amount\""},
	SRCode:             whereHelpernull_Int{field: "\"usda_input_food\".\"sr_code\""},
	SRDescription:      whereHelpernull_String{field: "\"usda_input_food\".\"sr_description\""},
	Unit:               whereHelpernull_String{field: "\"usda_input_food\".\"unit\""},
	PortionCode:        whereHelpernull_Int{field: "\"usda_input_food\".\"portion_code\""},
	PortionDescription: whereHelpernull_String{field: "\"usda_input_food\".\"portion_description\""},
	GramWeight:         whereHelpernull_Float32{field: "\"usda_input_food\".\"gram_weight\""},
	RetentionCode:      whereHelpernull_Int{field: "\"usda_input_food\".\"retention_code\""},
	SurveyFlag:         whereHelpernull_Int{field: "\"usda_input_food\".\"survey_flag\""},
}

// UsdaInputFoodRels is where relationship names are stored.
var UsdaInputFoodRels = struct {
	FDC                      string
	FDCIDOfInputFoodUsdaFood string
}{
	FDC:                      "FDC",
	FDCIDOfInputFoodUsdaFood: "FDCIDOfInputFoodUsdaFood",
}

// usdaInputFoodR is where relationships are stored.
type usdaInputFoodR struct {
	FDC                      *UsdaFood `boil:"FDC" json:"FDC" toml:"FDC" yaml:"FDC"`
	FDCIDOfInputFoodUsdaFood *UsdaFood `boil:"FDCIDOfInputFoodUsdaFood" json:"FDCIDOfInputFoodUsdaFood" toml:"FDCIDOfInputFoodUsdaFood" yaml:"FDCIDOfInputFoodUsdaFood"`
}

// NewStruct creates a new relationship struct
func (*usdaInputFoodR) NewStruct() *usdaInputFoodR {
	return &usdaInputFoodR{}
}

// usdaInputFoodL is where Load methods for each relationship are stored.
type usdaInputFoodL struct{}

var (
	usdaInputFoodAllColumns            = []string{"id", "fdc_id", "fdc_id_of_input_food", "seq_num", "amount", "sr_code", "sr_description", "unit", "portion_code", "portion_description", "gram_weight", "retention_code", "survey_flag"}
	usdaInputFoodColumnsWithoutDefault = []string{"id"}
	usdaInputFoodColumnsWithDefault    = []string{"fdc_id", "fdc_id_of_input_food", "seq_num", "amount", "sr_code", "sr_description", "unit", "portion_code", "portion_description", "gram_weight", "retention_code", "survey_flag"}
	usdaInputFoodPrimaryKeyColumns     = []string{"id"}
	usdaInputFoodGeneratedColumns      = []string{}
)

type (
	// UsdaInputFoodSlice is an alias for a slice of pointers to UsdaInputFood.
	// This should almost always be used instead of []UsdaInputFood.
	UsdaInputFoodSlice []*UsdaInputFood
	// UsdaInputFoodHook is the signature for custom UsdaInputFood hook methods
	UsdaInputFoodHook func(context.Context, boil.ContextExecutor, *UsdaInputFood) error

	usdaInputFoodQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usdaInputFoodType                 = reflect.TypeOf(&UsdaInputFood{})
	usdaInputFoodMapping              = queries.MakeStructMapping(usdaInputFoodType)
	usdaInputFoodPrimaryKeyMapping, _ = queries.BindMapping(usdaInputFoodType, usdaInputFoodMapping, usdaInputFoodPrimaryKeyColumns)
	usdaInputFoodInsertCacheMut       sync.RWMutex
	usdaInputFoodInsertCache          = make(map[string]insertCache)
	usdaInputFoodUpdateCacheMut       sync.RWMutex
	usdaInputFoodUpdateCache          = make(map[string]updateCache)
	usdaInputFoodUpsertCacheMut       sync.RWMutex
	usdaInputFoodUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var usdaInputFoodAfterSelectHooks []UsdaInputFoodHook

var usdaInputFoodBeforeInsertHooks []UsdaInputFoodHook
var usdaInputFoodAfterInsertHooks []UsdaInputFoodHook

var usdaInputFoodBeforeUpdateHooks []UsdaInputFoodHook
var usdaInputFoodAfterUpdateHooks []UsdaInputFoodHook

var usdaInputFoodBeforeDeleteHooks []UsdaInputFoodHook
var usdaInputFoodAfterDeleteHooks []UsdaInputFoodHook

var usdaInputFoodBeforeUpsertHooks []UsdaInputFoodHook
var usdaInputFoodAfterUpsertHooks []UsdaInputFoodHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UsdaInputFood) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaInputFoodAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UsdaInputFood) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaInputFoodBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UsdaInputFood) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaInputFoodAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UsdaInputFood) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaInputFoodBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UsdaInputFood) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaInputFoodAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UsdaInputFood) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaInputFoodBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UsdaInputFood) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaInputFoodAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UsdaInputFood) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaInputFoodBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UsdaInputFood) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaInputFoodAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUsdaInputFoodHook registers your hook function for all future operations.
func AddUsdaInputFoodHook(hookPoint boil.HookPoint, usdaInputFoodHook UsdaInputFoodHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		usdaInputFoodAfterSelectHooks = append(usdaInputFoodAfterSelectHooks, usdaInputFoodHook)
	case boil.BeforeInsertHook:
		usdaInputFoodBeforeInsertHooks = append(usdaInputFoodBeforeInsertHooks, usdaInputFoodHook)
	case boil.AfterInsertHook:
		usdaInputFoodAfterInsertHooks = append(usdaInputFoodAfterInsertHooks, usdaInputFoodHook)
	case boil.BeforeUpdateHook:
		usdaInputFoodBeforeUpdateHooks = append(usdaInputFoodBeforeUpdateHooks, usdaInputFoodHook)
	case boil.AfterUpdateHook:
		usdaInputFoodAfterUpdateHooks = append(usdaInputFoodAfterUpdateHooks, usdaInputFoodHook)
	case boil.BeforeDeleteHook:
		usdaInputFoodBeforeDeleteHooks = append(usdaInputFoodBeforeDeleteHooks, usdaInputFoodHook)
	case boil.AfterDeleteHook:
		usdaInputFoodAfterDeleteHooks = append(usdaInputFoodAfterDeleteHooks, usdaInputFoodHook)
	case boil.BeforeUpsertHook:
		usdaInputFoodBeforeUpsertHooks = append(usdaInputFoodBeforeUpsertHooks, usdaInputFoodHook)
	case boil.AfterUpsertHook:
		usdaInputFoodAfterUpsertHooks = append(usdaInputFoodAfterUpsertHooks, usdaInputFoodHook)
	}
}

// One returns a single usdaInputFood record from the query.
func (q usdaInputFoodQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UsdaInputFood, error) {
	o := &UsdaInputFood{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for usda_input_food")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UsdaInputFood records from the query.
func (q usdaInputFoodQuery) All(ctx context.Context, exec boil.ContextExecutor) (UsdaInputFoodSlice, error) {
	var o []*UsdaInputFood

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UsdaInputFood slice")
	}

	if len(usdaInputFoodAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UsdaInputFood records in the query.
func (q usdaInputFoodQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count usda_input_food rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q usdaInputFoodQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if usda_input_food exists")
	}

	return count > 0, nil
}

// FDC pointed to by the foreign key.
func (o *UsdaInputFood) FDC(mods ...qm.QueryMod) usdaFoodQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"fdc_id\" = ?", o.FDCID),
	}

	queryMods = append(queryMods, mods...)

	return UsdaFoods(queryMods...)
}

// FDCIDOfInputFoodUsdaFood pointed to by the foreign key.
func (o *UsdaInputFood) FDCIDOfInputFoodUsdaFood(mods ...qm.QueryMod) usdaFoodQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"fdc_id\" = ?", o.FDCIDOfInputFood),
	}

	queryMods = append(queryMods, mods...)

	return UsdaFoods(queryMods...)
}

// LoadFDC allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (usdaInputFoodL) LoadFDC(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsdaInputFood interface{}, mods queries.Applicator) error {
	var slice []*UsdaInputFood
	var object *UsdaInputFood

	if singular {
		object = maybeUsdaInputFood.(*UsdaInputFood)
	} else {
		slice = *maybeUsdaInputFood.(*[]*UsdaInputFood)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &usdaInputFoodR{}
		}
		if !queries.IsNil(object.FDCID) {
			args = append(args, object.FDCID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usdaInputFoodR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.FDCID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.FDCID) {
				args = append(args, obj.FDCID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`usda_food`),
		qm.WhereIn(`usda_food.fdc_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UsdaFood")
	}

	var resultSlice []*UsdaFood
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UsdaFood")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for usda_food")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usda_food")
	}

	if len(usdaInputFoodAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FDC = foreign
		if foreign.R == nil {
			foreign.R = &usdaFoodR{}
		}
		foreign.R.FDCUsdaInputFoods = append(foreign.R.FDCUsdaInputFoods, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.FDCID, foreign.FDCID) {
				local.R.FDC = foreign
				if foreign.R == nil {
					foreign.R = &usdaFoodR{}
				}
				foreign.R.FDCUsdaInputFoods = append(foreign.R.FDCUsdaInputFoods, local)
				break
			}
		}
	}

	return nil
}

// LoadFDCIDOfInputFoodUsdaFood allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (usdaInputFoodL) LoadFDCIDOfInputFoodUsdaFood(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsdaInputFood interface{}, mods queries.Applicator) error {
	var slice []*UsdaInputFood
	var object *UsdaInputFood

	if singular {
		object = maybeUsdaInputFood.(*UsdaInputFood)
	} else {
		slice = *maybeUsdaInputFood.(*[]*UsdaInputFood)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &usdaInputFoodR{}
		}
		if !queries.IsNil(object.FDCIDOfInputFood) {
			args = append(args, object.FDCIDOfInputFood)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usdaInputFoodR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.FDCIDOfInputFood) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.FDCIDOfInputFood) {
				args = append(args, obj.FDCIDOfInputFood)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`usda_food`),
		qm.WhereIn(`usda_food.fdc_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UsdaFood")
	}

	var resultSlice []*UsdaFood
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UsdaFood")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for usda_food")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usda_food")
	}

	if len(usdaInputFoodAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FDCIDOfInputFoodUsdaFood = foreign
		if foreign.R == nil {
			foreign.R = &usdaFoodR{}
		}
		foreign.R.FDCIDOfInputFoodUsdaInputFoods = append(foreign.R.FDCIDOfInputFoodUsdaInputFoods, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.FDCIDOfInputFood, foreign.FDCID) {
				local.R.FDCIDOfInputFoodUsdaFood = foreign
				if foreign.R == nil {
					foreign.R = &usdaFoodR{}
				}
				foreign.R.FDCIDOfInputFoodUsdaInputFoods = append(foreign.R.FDCIDOfInputFoodUsdaInputFoods, local)
				break
			}
		}
	}

	return nil
}

// SetFDC of the usdaInputFood to the related item.
// Sets o.R.FDC to related.
// Adds o to related.R.FDCUsdaInputFoods.
func (o *UsdaInputFood) SetFDC(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UsdaFood) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"usda_input_food\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"fdc_id"}),
		strmangle.WhereClause("\"", "\"", 2, usdaInputFoodPrimaryKeyColumns),
	)
	values := []interface{}{related.FDCID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.FDCID, related.FDCID)
	if o.R == nil {
		o.R = &usdaInputFoodR{
			FDC: related,
		}
	} else {
		o.R.FDC = related
	}

	if related.R == nil {
		related.R = &usdaFoodR{
			FDCUsdaInputFoods: UsdaInputFoodSlice{o},
		}
	} else {
		related.R.FDCUsdaInputFoods = append(related.R.FDCUsdaInputFoods, o)
	}

	return nil
}

// RemoveFDC relationship.
// Sets o.R.FDC to nil.
// Removes o from all passed in related items' relationships struct.
func (o *UsdaInputFood) RemoveFDC(ctx context.Context, exec boil.ContextExecutor, related *UsdaFood) error {
	var err error

	queries.SetScanner(&o.FDCID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("fdc_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.FDC = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.FDCUsdaInputFoods {
		if queries.Equal(o.FDCID, ri.FDCID) {
			continue
		}

		ln := len(related.R.FDCUsdaInputFoods)
		if ln > 1 && i < ln-1 {
			related.R.FDCUsdaInputFoods[i] = related.R.FDCUsdaInputFoods[ln-1]
		}
		related.R.FDCUsdaInputFoods = related.R.FDCUsdaInputFoods[:ln-1]
		break
	}
	return nil
}

// SetFDCIDOfInputFoodUsdaFood of the usdaInputFood to the related item.
// Sets o.R.FDCIDOfInputFoodUsdaFood to related.
// Adds o to related.R.FDCIDOfInputFoodUsdaInputFoods.
func (o *UsdaInputFood) SetFDCIDOfInputFoodUsdaFood(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UsdaFood) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"usda_input_food\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"fdc_id_of_input_food"}),
		strmangle.WhereClause("\"", "\"", 2, usdaInputFoodPrimaryKeyColumns),
	)
	values := []interface{}{related.FDCID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.FDCIDOfInputFood, related.FDCID)
	if o.R == nil {
		o.R = &usdaInputFoodR{
			FDCIDOfInputFoodUsdaFood: related,
		}
	} else {
		o.R.FDCIDOfInputFoodUsdaFood = related
	}

	if related.R == nil {
		related.R = &usdaFoodR{
			FDCIDOfInputFoodUsdaInputFoods: UsdaInputFoodSlice{o},
		}
	} else {
		related.R.FDCIDOfInputFoodUsdaInputFoods = append(related.R.FDCIDOfInputFoodUsdaInputFoods, o)
	}

	return nil
}

// RemoveFDCIDOfInputFoodUsdaFood relationship.
// Sets o.R.FDCIDOfInputFoodUsdaFood to nil.
// Removes o from all passed in related items' relationships struct.
func (o *UsdaInputFood) RemoveFDCIDOfInputFoodUsdaFood(ctx context.Context, exec boil.ContextExecutor, related *UsdaFood) error {
	var err error

	queries.SetScanner(&o.FDCIDOfInputFood, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("fdc_id_of_input_food")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.FDCIDOfInputFoodUsdaFood = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.FDCIDOfInputFoodUsdaInputFoods {
		if queries.Equal(o.FDCIDOfInputFood, ri.FDCIDOfInputFood) {
			continue
		}

		ln := len(related.R.FDCIDOfInputFoodUsdaInputFoods)
		if ln > 1 && i < ln-1 {
			related.R.FDCIDOfInputFoodUsdaInputFoods[i] = related.R.FDCIDOfInputFoodUsdaInputFoods[ln-1]
		}
		related.R.FDCIDOfInputFoodUsdaInputFoods = related.R.FDCIDOfInputFoodUsdaInputFoods[:ln-1]
		break
	}
	return nil
}

// UsdaInputFoods retrieves all the records using an executor.
func UsdaInputFoods(mods ...qm.QueryMod) usdaInputFoodQuery {
	mods = append(mods, qm.From("\"usda_input_food\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"usda_input_food\".*"})
	}

	return usdaInputFoodQuery{q}
}

// FindUsdaInputFood retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUsdaInputFood(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UsdaInputFood, error) {
	usdaInputFoodObj := &UsdaInputFood{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"usda_input_food\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, usdaInputFoodObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from usda_input_food")
	}

	if err = usdaInputFoodObj.doAfterSelectHooks(ctx, exec); err != nil {
		return usdaInputFoodObj, err
	}

	return usdaInputFoodObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UsdaInputFood) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no usda_input_food provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaInputFoodColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	usdaInputFoodInsertCacheMut.RLock()
	cache, cached := usdaInputFoodInsertCache[key]
	usdaInputFoodInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			usdaInputFoodAllColumns,
			usdaInputFoodColumnsWithDefault,
			usdaInputFoodColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(usdaInputFoodType, usdaInputFoodMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(usdaInputFoodType, usdaInputFoodMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"usda_input_food\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"usda_input_food\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into usda_input_food")
	}

	if !cached {
		usdaInputFoodInsertCacheMut.Lock()
		usdaInputFoodInsertCache[key] = cache
		usdaInputFoodInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UsdaInputFood.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UsdaInputFood) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	usdaInputFoodUpdateCacheMut.RLock()
	cache, cached := usdaInputFoodUpdateCache[key]
	usdaInputFoodUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			usdaInputFoodAllColumns,
			usdaInputFoodPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update usda_input_food, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"usda_input_food\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, usdaInputFoodPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(usdaInputFoodType, usdaInputFoodMapping, append(wl, usdaInputFoodPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update usda_input_food row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for usda_input_food")
	}

	if !cached {
		usdaInputFoodUpdateCacheMut.Lock()
		usdaInputFoodUpdateCache[key] = cache
		usdaInputFoodUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q usdaInputFoodQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for usda_input_food")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for usda_input_food")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UsdaInputFoodSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaInputFoodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"usda_input_food\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, usdaInputFoodPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in usdaInputFood slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all usdaInputFood")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UsdaInputFood) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no usda_input_food provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaInputFoodColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	usdaInputFoodUpsertCacheMut.RLock()
	cache, cached := usdaInputFoodUpsertCache[key]
	usdaInputFoodUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			usdaInputFoodAllColumns,
			usdaInputFoodColumnsWithDefault,
			usdaInputFoodColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			usdaInputFoodAllColumns,
			usdaInputFoodPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert usda_input_food, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(usdaInputFoodPrimaryKeyColumns))
			copy(conflict, usdaInputFoodPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"usda_input_food\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(usdaInputFoodType, usdaInputFoodMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(usdaInputFoodType, usdaInputFoodMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert usda_input_food")
	}

	if !cached {
		usdaInputFoodUpsertCacheMut.Lock()
		usdaInputFoodUpsertCache[key] = cache
		usdaInputFoodUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UsdaInputFood record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UsdaInputFood) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UsdaInputFood provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), usdaInputFoodPrimaryKeyMapping)
	sql := "DELETE FROM \"usda_input_food\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from usda_input_food")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for usda_input_food")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q usdaInputFoodQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no usdaInputFoodQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from usda_input_food")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for usda_input_food")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UsdaInputFoodSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(usdaInputFoodBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaInputFoodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"usda_input_food\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaInputFoodPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from usdaInputFood slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for usda_input_food")
	}

	if len(usdaInputFoodAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UsdaInputFood) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUsdaInputFood(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsdaInputFoodSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UsdaInputFoodSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaInputFoodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"usda_input_food\".* FROM \"usda_input_food\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaInputFoodPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UsdaInputFoodSlice")
	}

	*o = slice

	return nil
}

// UsdaInputFoodExists checks if the UsdaInputFood row exists.
func UsdaInputFoodExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"usda_input_food\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if usda_input_food exists")
	}

	return exists, nil
}
