// Code generated by SQLBoiler 4.8.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testNotionRecipes(t *testing.T) {
	t.Parallel()

	query := NotionRecipes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testNotionRecipesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotionRecipe{}
	if err = randomize.Struct(seed, o, notionRecipeDBTypes, true, notionRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionRecipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NotionRecipes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNotionRecipesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotionRecipe{}
	if err = randomize.Struct(seed, o, notionRecipeDBTypes, true, notionRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionRecipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := NotionRecipes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NotionRecipes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNotionRecipesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotionRecipe{}
	if err = randomize.Struct(seed, o, notionRecipeDBTypes, true, notionRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionRecipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NotionRecipeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NotionRecipes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNotionRecipesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotionRecipe{}
	if err = randomize.Struct(seed, o, notionRecipeDBTypes, true, notionRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionRecipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := NotionRecipeExists(ctx, tx, o.PageID)
	if err != nil {
		t.Errorf("Unable to check if NotionRecipe exists: %s", err)
	}
	if !e {
		t.Errorf("Expected NotionRecipeExists to return true, but got false.")
	}
}

func testNotionRecipesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotionRecipe{}
	if err = randomize.Struct(seed, o, notionRecipeDBTypes, true, notionRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionRecipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	notionRecipeFound, err := FindNotionRecipe(ctx, tx, o.PageID)
	if err != nil {
		t.Error(err)
	}

	if notionRecipeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testNotionRecipesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotionRecipe{}
	if err = randomize.Struct(seed, o, notionRecipeDBTypes, true, notionRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionRecipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = NotionRecipes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testNotionRecipesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotionRecipe{}
	if err = randomize.Struct(seed, o, notionRecipeDBTypes, true, notionRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionRecipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := NotionRecipes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testNotionRecipesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	notionRecipeOne := &NotionRecipe{}
	notionRecipeTwo := &NotionRecipe{}
	if err = randomize.Struct(seed, notionRecipeOne, notionRecipeDBTypes, false, notionRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionRecipe struct: %s", err)
	}
	if err = randomize.Struct(seed, notionRecipeTwo, notionRecipeDBTypes, false, notionRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionRecipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = notionRecipeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = notionRecipeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NotionRecipes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testNotionRecipesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	notionRecipeOne := &NotionRecipe{}
	notionRecipeTwo := &NotionRecipe{}
	if err = randomize.Struct(seed, notionRecipeOne, notionRecipeDBTypes, false, notionRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionRecipe struct: %s", err)
	}
	if err = randomize.Struct(seed, notionRecipeTwo, notionRecipeDBTypes, false, notionRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionRecipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = notionRecipeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = notionRecipeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NotionRecipes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func notionRecipeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *NotionRecipe) error {
	*o = NotionRecipe{}
	return nil
}

func notionRecipeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *NotionRecipe) error {
	*o = NotionRecipe{}
	return nil
}

func notionRecipeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *NotionRecipe) error {
	*o = NotionRecipe{}
	return nil
}

func notionRecipeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *NotionRecipe) error {
	*o = NotionRecipe{}
	return nil
}

func notionRecipeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *NotionRecipe) error {
	*o = NotionRecipe{}
	return nil
}

func notionRecipeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *NotionRecipe) error {
	*o = NotionRecipe{}
	return nil
}

func notionRecipeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *NotionRecipe) error {
	*o = NotionRecipe{}
	return nil
}

func notionRecipeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *NotionRecipe) error {
	*o = NotionRecipe{}
	return nil
}

func notionRecipeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *NotionRecipe) error {
	*o = NotionRecipe{}
	return nil
}

func testNotionRecipesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &NotionRecipe{}
	o := &NotionRecipe{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, notionRecipeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize NotionRecipe object: %s", err)
	}

	AddNotionRecipeHook(boil.BeforeInsertHook, notionRecipeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	notionRecipeBeforeInsertHooks = []NotionRecipeHook{}

	AddNotionRecipeHook(boil.AfterInsertHook, notionRecipeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	notionRecipeAfterInsertHooks = []NotionRecipeHook{}

	AddNotionRecipeHook(boil.AfterSelectHook, notionRecipeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	notionRecipeAfterSelectHooks = []NotionRecipeHook{}

	AddNotionRecipeHook(boil.BeforeUpdateHook, notionRecipeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	notionRecipeBeforeUpdateHooks = []NotionRecipeHook{}

	AddNotionRecipeHook(boil.AfterUpdateHook, notionRecipeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	notionRecipeAfterUpdateHooks = []NotionRecipeHook{}

	AddNotionRecipeHook(boil.BeforeDeleteHook, notionRecipeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	notionRecipeBeforeDeleteHooks = []NotionRecipeHook{}

	AddNotionRecipeHook(boil.AfterDeleteHook, notionRecipeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	notionRecipeAfterDeleteHooks = []NotionRecipeHook{}

	AddNotionRecipeHook(boil.BeforeUpsertHook, notionRecipeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	notionRecipeBeforeUpsertHooks = []NotionRecipeHook{}

	AddNotionRecipeHook(boil.AfterUpsertHook, notionRecipeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	notionRecipeAfterUpsertHooks = []NotionRecipeHook{}
}

func testNotionRecipesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotionRecipe{}
	if err = randomize.Struct(seed, o, notionRecipeDBTypes, true, notionRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionRecipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NotionRecipes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNotionRecipesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotionRecipe{}
	if err = randomize.Struct(seed, o, notionRecipeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize NotionRecipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(notionRecipeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := NotionRecipes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNotionRecipeToManyPageNotionImages(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a NotionRecipe
	var b, c NotionImage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, notionRecipeDBTypes, true, notionRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionRecipe struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, notionImageDBTypes, false, notionImageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, notionImageDBTypes, false, notionImageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PageID = a.PageID
	c.PageID = a.PageID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PageNotionImages().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PageID == b.PageID {
			bFound = true
		}
		if v.PageID == c.PageID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := NotionRecipeSlice{&a}
	if err = a.L.LoadPageNotionImages(ctx, tx, false, (*[]*NotionRecipe)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PageNotionImages); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PageNotionImages = nil
	if err = a.L.LoadPageNotionImages(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PageNotionImages); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testNotionRecipeToManyMeals(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a NotionRecipe
	var b, c Meal

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, notionRecipeDBTypes, true, notionRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionRecipe struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, mealDBTypes, false, mealColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mealDBTypes, false, mealColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"notion_meal\" (\"notion_recipe\", \"meal\") values ($1, $2)", a.PageID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"notion_meal\" (\"notion_recipe\", \"meal\") values ($1, $2)", a.PageID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.Meals().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := NotionRecipeSlice{&a}
	if err = a.L.LoadMeals(ctx, tx, false, (*[]*NotionRecipe)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Meals); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Meals = nil
	if err = a.L.LoadMeals(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Meals); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testNotionRecipeToManyAddOpPageNotionImages(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a NotionRecipe
	var b, c, d, e NotionImage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, notionRecipeDBTypes, false, strmangle.SetComplement(notionRecipePrimaryKeyColumns, notionRecipeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*NotionImage{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, notionImageDBTypes, false, strmangle.SetComplement(notionImagePrimaryKeyColumns, notionImageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*NotionImage{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPageNotionImages(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.PageID != first.PageID {
			t.Error("foreign key was wrong value", a.PageID, first.PageID)
		}
		if a.PageID != second.PageID {
			t.Error("foreign key was wrong value", a.PageID, second.PageID)
		}

		if first.R.Page != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Page != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PageNotionImages[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PageNotionImages[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PageNotionImages().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testNotionRecipeToManyAddOpMeals(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a NotionRecipe
	var b, c, d, e Meal

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, notionRecipeDBTypes, false, strmangle.SetComplement(notionRecipePrimaryKeyColumns, notionRecipeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Meal{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, mealDBTypes, false, strmangle.SetComplement(mealPrimaryKeyColumns, mealColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Meal{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMeals(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.NotionRecipes[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.NotionRecipes[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Meals[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Meals[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Meals().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testNotionRecipeToManySetOpMeals(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a NotionRecipe
	var b, c, d, e Meal

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, notionRecipeDBTypes, false, strmangle.SetComplement(notionRecipePrimaryKeyColumns, notionRecipeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Meal{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, mealDBTypes, false, strmangle.SetComplement(mealPrimaryKeyColumns, mealColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetMeals(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Meals().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetMeals(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Meals().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.NotionRecipes) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.NotionRecipes) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.NotionRecipes[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.NotionRecipes[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Meals[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Meals[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testNotionRecipeToManyRemoveOpMeals(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a NotionRecipe
	var b, c, d, e Meal

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, notionRecipeDBTypes, false, strmangle.SetComplement(notionRecipePrimaryKeyColumns, notionRecipeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Meal{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, mealDBTypes, false, strmangle.SetComplement(mealPrimaryKeyColumns, mealColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddMeals(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Meals().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveMeals(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Meals().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.NotionRecipes) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.NotionRecipes) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.NotionRecipes[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.NotionRecipes[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Meals) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Meals[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Meals[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testNotionRecipeToOneRecipeUsingNotionRecipeRecipe(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local NotionRecipe
	var foreign Recipe

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, notionRecipeDBTypes, true, notionRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionRecipe struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, recipeDBTypes, false, recipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Recipe struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Recipe, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.NotionRecipeRecipe().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := NotionRecipeSlice{&local}
	if err = local.L.LoadNotionRecipeRecipe(ctx, tx, false, (*[]*NotionRecipe)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.NotionRecipeRecipe == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.NotionRecipeRecipe = nil
	if err = local.L.LoadNotionRecipeRecipe(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.NotionRecipeRecipe == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testNotionRecipeToOneSetOpRecipeUsingNotionRecipeRecipe(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a NotionRecipe
	var b, c Recipe

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, notionRecipeDBTypes, false, strmangle.SetComplement(notionRecipePrimaryKeyColumns, notionRecipeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, recipeDBTypes, false, strmangle.SetComplement(recipePrimaryKeyColumns, recipeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, recipeDBTypes, false, strmangle.SetComplement(recipePrimaryKeyColumns, recipeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Recipe{&b, &c} {
		err = a.SetNotionRecipeRecipe(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.NotionRecipeRecipe != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.NotionRecipes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Recipe, x.ID) {
			t.Error("foreign key was wrong value", a.Recipe)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Recipe))
		reflect.Indirect(reflect.ValueOf(&a.Recipe)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Recipe, x.ID) {
			t.Error("foreign key was wrong value", a.Recipe, x.ID)
		}
	}
}

func testNotionRecipeToOneRemoveOpRecipeUsingNotionRecipeRecipe(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a NotionRecipe
	var b Recipe

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, notionRecipeDBTypes, false, strmangle.SetComplement(notionRecipePrimaryKeyColumns, notionRecipeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, recipeDBTypes, false, strmangle.SetComplement(recipePrimaryKeyColumns, recipeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetNotionRecipeRecipe(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveNotionRecipeRecipe(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.NotionRecipeRecipe().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.NotionRecipeRecipe != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Recipe) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.NotionRecipes) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testNotionRecipesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotionRecipe{}
	if err = randomize.Struct(seed, o, notionRecipeDBTypes, true, notionRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionRecipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNotionRecipesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotionRecipe{}
	if err = randomize.Struct(seed, o, notionRecipeDBTypes, true, notionRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionRecipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NotionRecipeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNotionRecipesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotionRecipe{}
	if err = randomize.Struct(seed, o, notionRecipeDBTypes, true, notionRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionRecipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NotionRecipes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	notionRecipeDBTypes = map[string]string{`PageID`: `text`, `PageTitle`: `text`, `Meta`: `json`, `LastSeen`: `timestamp without time zone`, `Recipe`: `text`, `AteAt`: `timestamp without time zone`}
	_                   = bytes.MinRead
)

func testNotionRecipesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(notionRecipePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(notionRecipeAllColumns) == len(notionRecipePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NotionRecipe{}
	if err = randomize.Struct(seed, o, notionRecipeDBTypes, true, notionRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionRecipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NotionRecipes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, notionRecipeDBTypes, true, notionRecipePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NotionRecipe struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testNotionRecipesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(notionRecipeAllColumns) == len(notionRecipePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NotionRecipe{}
	if err = randomize.Struct(seed, o, notionRecipeDBTypes, true, notionRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotionRecipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NotionRecipes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, notionRecipeDBTypes, true, notionRecipePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NotionRecipe struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(notionRecipeAllColumns, notionRecipePrimaryKeyColumns) {
		fields = notionRecipeAllColumns
	} else {
		fields = strmangle.SetComplement(
			notionRecipeAllColumns,
			notionRecipePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := NotionRecipeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testNotionRecipesUpsert(t *testing.T) {
	t.Parallel()

	if len(notionRecipeAllColumns) == len(notionRecipePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := NotionRecipe{}
	if err = randomize.Struct(seed, &o, notionRecipeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize NotionRecipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert NotionRecipe: %s", err)
	}

	count, err := NotionRecipes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, notionRecipeDBTypes, false, notionRecipePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NotionRecipe struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert NotionRecipe: %s", err)
	}

	count, err = NotionRecipes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
