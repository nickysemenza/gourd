// Code generated by SQLBoiler 4.8.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMealRecipes(t *testing.T) {
	t.Parallel()

	query := MealRecipes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMealRecipesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealRecipe{}
	if err = randomize.Struct(seed, o, mealRecipeDBTypes, true, mealRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealRecipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MealRecipes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMealRecipesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealRecipe{}
	if err = randomize.Struct(seed, o, mealRecipeDBTypes, true, mealRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealRecipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MealRecipes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MealRecipes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMealRecipesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealRecipe{}
	if err = randomize.Struct(seed, o, mealRecipeDBTypes, true, mealRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealRecipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MealRecipeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MealRecipes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMealRecipesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealRecipe{}
	if err = randomize.Struct(seed, o, mealRecipeDBTypes, true, mealRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealRecipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MealRecipeExists(ctx, tx, o.MealID, o.RecipeID)
	if err != nil {
		t.Errorf("Unable to check if MealRecipe exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MealRecipeExists to return true, but got false.")
	}
}

func testMealRecipesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealRecipe{}
	if err = randomize.Struct(seed, o, mealRecipeDBTypes, true, mealRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealRecipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	mealRecipeFound, err := FindMealRecipe(ctx, tx, o.MealID, o.RecipeID)
	if err != nil {
		t.Error(err)
	}

	if mealRecipeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMealRecipesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealRecipe{}
	if err = randomize.Struct(seed, o, mealRecipeDBTypes, true, mealRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealRecipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MealRecipes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMealRecipesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealRecipe{}
	if err = randomize.Struct(seed, o, mealRecipeDBTypes, true, mealRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealRecipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MealRecipes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMealRecipesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	mealRecipeOne := &MealRecipe{}
	mealRecipeTwo := &MealRecipe{}
	if err = randomize.Struct(seed, mealRecipeOne, mealRecipeDBTypes, false, mealRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealRecipe struct: %s", err)
	}
	if err = randomize.Struct(seed, mealRecipeTwo, mealRecipeDBTypes, false, mealRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealRecipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mealRecipeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mealRecipeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MealRecipes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMealRecipesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	mealRecipeOne := &MealRecipe{}
	mealRecipeTwo := &MealRecipe{}
	if err = randomize.Struct(seed, mealRecipeOne, mealRecipeDBTypes, false, mealRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealRecipe struct: %s", err)
	}
	if err = randomize.Struct(seed, mealRecipeTwo, mealRecipeDBTypes, false, mealRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealRecipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mealRecipeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mealRecipeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MealRecipes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func mealRecipeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *MealRecipe) error {
	*o = MealRecipe{}
	return nil
}

func mealRecipeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *MealRecipe) error {
	*o = MealRecipe{}
	return nil
}

func mealRecipeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *MealRecipe) error {
	*o = MealRecipe{}
	return nil
}

func mealRecipeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MealRecipe) error {
	*o = MealRecipe{}
	return nil
}

func mealRecipeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MealRecipe) error {
	*o = MealRecipe{}
	return nil
}

func mealRecipeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MealRecipe) error {
	*o = MealRecipe{}
	return nil
}

func mealRecipeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MealRecipe) error {
	*o = MealRecipe{}
	return nil
}

func mealRecipeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MealRecipe) error {
	*o = MealRecipe{}
	return nil
}

func mealRecipeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MealRecipe) error {
	*o = MealRecipe{}
	return nil
}

func testMealRecipesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &MealRecipe{}
	o := &MealRecipe{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, mealRecipeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MealRecipe object: %s", err)
	}

	AddMealRecipeHook(boil.BeforeInsertHook, mealRecipeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	mealRecipeBeforeInsertHooks = []MealRecipeHook{}

	AddMealRecipeHook(boil.AfterInsertHook, mealRecipeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	mealRecipeAfterInsertHooks = []MealRecipeHook{}

	AddMealRecipeHook(boil.AfterSelectHook, mealRecipeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	mealRecipeAfterSelectHooks = []MealRecipeHook{}

	AddMealRecipeHook(boil.BeforeUpdateHook, mealRecipeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	mealRecipeBeforeUpdateHooks = []MealRecipeHook{}

	AddMealRecipeHook(boil.AfterUpdateHook, mealRecipeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	mealRecipeAfterUpdateHooks = []MealRecipeHook{}

	AddMealRecipeHook(boil.BeforeDeleteHook, mealRecipeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	mealRecipeBeforeDeleteHooks = []MealRecipeHook{}

	AddMealRecipeHook(boil.AfterDeleteHook, mealRecipeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	mealRecipeAfterDeleteHooks = []MealRecipeHook{}

	AddMealRecipeHook(boil.BeforeUpsertHook, mealRecipeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	mealRecipeBeforeUpsertHooks = []MealRecipeHook{}

	AddMealRecipeHook(boil.AfterUpsertHook, mealRecipeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	mealRecipeAfterUpsertHooks = []MealRecipeHook{}
}

func testMealRecipesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealRecipe{}
	if err = randomize.Struct(seed, o, mealRecipeDBTypes, true, mealRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealRecipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MealRecipes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMealRecipesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealRecipe{}
	if err = randomize.Struct(seed, o, mealRecipeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MealRecipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(mealRecipeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MealRecipes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMealRecipeToOneMealUsingMeal(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local MealRecipe
	var foreign Meal

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, mealRecipeDBTypes, false, mealRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealRecipe struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mealDBTypes, false, mealColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Meal struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.MealID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Meal().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MealRecipeSlice{&local}
	if err = local.L.LoadMeal(ctx, tx, false, (*[]*MealRecipe)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Meal == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Meal = nil
	if err = local.L.LoadMeal(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Meal == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testMealRecipeToOneRecipeUsingRecipe(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local MealRecipe
	var foreign Recipe

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, mealRecipeDBTypes, false, mealRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealRecipe struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, recipeDBTypes, false, recipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Recipe struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.RecipeID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Recipe().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MealRecipeSlice{&local}
	if err = local.L.LoadRecipe(ctx, tx, false, (*[]*MealRecipe)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Recipe == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Recipe = nil
	if err = local.L.LoadRecipe(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Recipe == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testMealRecipeToOneSetOpMealUsingMeal(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MealRecipe
	var b, c Meal

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mealRecipeDBTypes, false, strmangle.SetComplement(mealRecipePrimaryKeyColumns, mealRecipeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mealDBTypes, false, strmangle.SetComplement(mealPrimaryKeyColumns, mealColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mealDBTypes, false, strmangle.SetComplement(mealPrimaryKeyColumns, mealColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Meal{&b, &c} {
		err = a.SetMeal(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Meal != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MealRecipes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.MealID != x.ID {
			t.Error("foreign key was wrong value", a.MealID)
		}

		if exists, err := MealRecipeExists(ctx, tx, a.MealID, a.RecipeID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testMealRecipeToOneSetOpRecipeUsingRecipe(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MealRecipe
	var b, c Recipe

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mealRecipeDBTypes, false, strmangle.SetComplement(mealRecipePrimaryKeyColumns, mealRecipeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, recipeDBTypes, false, strmangle.SetComplement(recipePrimaryKeyColumns, recipeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, recipeDBTypes, false, strmangle.SetComplement(recipePrimaryKeyColumns, recipeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Recipe{&b, &c} {
		err = a.SetRecipe(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Recipe != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MealRecipes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RecipeID != x.ID {
			t.Error("foreign key was wrong value", a.RecipeID)
		}

		if exists, err := MealRecipeExists(ctx, tx, a.MealID, a.RecipeID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testMealRecipesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealRecipe{}
	if err = randomize.Struct(seed, o, mealRecipeDBTypes, true, mealRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealRecipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMealRecipesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealRecipe{}
	if err = randomize.Struct(seed, o, mealRecipeDBTypes, true, mealRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealRecipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MealRecipeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMealRecipesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MealRecipe{}
	if err = randomize.Struct(seed, o, mealRecipeDBTypes, true, mealRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealRecipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MealRecipes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	mealRecipeDBTypes = map[string]string{`MealID`: `text`, `RecipeID`: `text`, `Multiplier`: `numeric`}
	_                 = bytes.MinRead
)

func testMealRecipesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(mealRecipePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(mealRecipeAllColumns) == len(mealRecipePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MealRecipe{}
	if err = randomize.Struct(seed, o, mealRecipeDBTypes, true, mealRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealRecipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MealRecipes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mealRecipeDBTypes, true, mealRecipePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MealRecipe struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMealRecipesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(mealRecipeAllColumns) == len(mealRecipePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MealRecipe{}
	if err = randomize.Struct(seed, o, mealRecipeDBTypes, true, mealRecipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MealRecipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MealRecipes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mealRecipeDBTypes, true, mealRecipePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MealRecipe struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(mealRecipeAllColumns, mealRecipePrimaryKeyColumns) {
		fields = mealRecipeAllColumns
	} else {
		fields = strmangle.SetComplement(
			mealRecipeAllColumns,
			mealRecipePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MealRecipeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMealRecipesUpsert(t *testing.T) {
	t.Parallel()

	if len(mealRecipeAllColumns) == len(mealRecipePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MealRecipe{}
	if err = randomize.Struct(seed, &o, mealRecipeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MealRecipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MealRecipe: %s", err)
	}

	count, err := MealRecipes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, mealRecipeDBTypes, false, mealRecipePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MealRecipe struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MealRecipe: %s", err)
	}

	count, err = MealRecipes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
