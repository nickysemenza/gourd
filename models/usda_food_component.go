// Code generated by SQLBoiler 4.8.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UsdaFoodComponent is an object representing the database table.
type UsdaFoodComponent struct {
	ID              int          `boil:"id" json:"id" toml:"id" yaml:"id"`
	FDCID           null.Int     `boil:"fdc_id" json:"fdc_id,omitempty" toml:"fdc_id" yaml:"fdc_id,omitempty"`
	Name            null.String  `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	PCTWeight       null.Float32 `boil:"pct_weight" json:"pct_weight,omitempty" toml:"pct_weight" yaml:"pct_weight,omitempty"`
	IsRefuse        null.String  `boil:"is_refuse" json:"is_refuse,omitempty" toml:"is_refuse" yaml:"is_refuse,omitempty"`
	GramWeight      null.Float32 `boil:"gram_weight" json:"gram_weight,omitempty" toml:"gram_weight" yaml:"gram_weight,omitempty"`
	DataPoints      null.Int     `boil:"data_points" json:"data_points,omitempty" toml:"data_points" yaml:"data_points,omitempty"`
	MinYearAcquired null.String  `boil:"min_year_acquired" json:"min_year_acquired,omitempty" toml:"min_year_acquired" yaml:"min_year_acquired,omitempty"`

	R *usdaFoodComponentR `boil:"rel" json:"rel" toml:"rel" yaml:"rel"`
	L usdaFoodComponentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UsdaFoodComponentColumns = struct {
	ID              string
	FDCID           string
	Name            string
	PCTWeight       string
	IsRefuse        string
	GramWeight      string
	DataPoints      string
	MinYearAcquired string
}{
	ID:              "id",
	FDCID:           "fdc_id",
	Name:            "name",
	PCTWeight:       "pct_weight",
	IsRefuse:        "is_refuse",
	GramWeight:      "gram_weight",
	DataPoints:      "data_points",
	MinYearAcquired: "min_year_acquired",
}

var UsdaFoodComponentTableColumns = struct {
	ID              string
	FDCID           string
	Name            string
	PCTWeight       string
	IsRefuse        string
	GramWeight      string
	DataPoints      string
	MinYearAcquired string
}{
	ID:              "usda_food_component.id",
	FDCID:           "usda_food_component.fdc_id",
	Name:            "usda_food_component.name",
	PCTWeight:       "usda_food_component.pct_weight",
	IsRefuse:        "usda_food_component.is_refuse",
	GramWeight:      "usda_food_component.gram_weight",
	DataPoints:      "usda_food_component.data_points",
	MinYearAcquired: "usda_food_component.min_year_acquired",
}

// Generated where

var UsdaFoodComponentWhere = struct {
	ID              whereHelperint
	FDCID           whereHelpernull_Int
	Name            whereHelpernull_String
	PCTWeight       whereHelpernull_Float32
	IsRefuse        whereHelpernull_String
	GramWeight      whereHelpernull_Float32
	DataPoints      whereHelpernull_Int
	MinYearAcquired whereHelpernull_String
}{
	ID:              whereHelperint{field: "\"usda_food_component\".\"id\""},
	FDCID:           whereHelpernull_Int{field: "\"usda_food_component\".\"fdc_id\""},
	Name:            whereHelpernull_String{field: "\"usda_food_component\".\"name\""},
	PCTWeight:       whereHelpernull_Float32{field: "\"usda_food_component\".\"pct_weight\""},
	IsRefuse:        whereHelpernull_String{field: "\"usda_food_component\".\"is_refuse\""},
	GramWeight:      whereHelpernull_Float32{field: "\"usda_food_component\".\"gram_weight\""},
	DataPoints:      whereHelpernull_Int{field: "\"usda_food_component\".\"data_points\""},
	MinYearAcquired: whereHelpernull_String{field: "\"usda_food_component\".\"min_year_acquired\""},
}

// UsdaFoodComponentRels is where relationship names are stored.
var UsdaFoodComponentRels = struct {
	FDC string
}{
	FDC: "FDC",
}

// usdaFoodComponentR is where relationships are stored.
type usdaFoodComponentR struct {
	FDC *UsdaFood `boil:"FDC" json:"FDC" toml:"FDC" yaml:"FDC"`
}

// NewStruct creates a new relationship struct
func (*usdaFoodComponentR) NewStruct() *usdaFoodComponentR {
	return &usdaFoodComponentR{}
}

// usdaFoodComponentL is where Load methods for each relationship are stored.
type usdaFoodComponentL struct{}

var (
	usdaFoodComponentAllColumns            = []string{"id", "fdc_id", "name", "pct_weight", "is_refuse", "gram_weight", "data_points", "min_year_acquired"}
	usdaFoodComponentColumnsWithoutDefault = []string{"id", "fdc_id", "name", "pct_weight", "is_refuse", "gram_weight", "data_points", "min_year_acquired"}
	usdaFoodComponentColumnsWithDefault    = []string{}
	usdaFoodComponentPrimaryKeyColumns     = []string{"id"}
)

type (
	// UsdaFoodComponentSlice is an alias for a slice of pointers to UsdaFoodComponent.
	// This should almost always be used instead of []UsdaFoodComponent.
	UsdaFoodComponentSlice []*UsdaFoodComponent
	// UsdaFoodComponentHook is the signature for custom UsdaFoodComponent hook methods
	UsdaFoodComponentHook func(context.Context, boil.ContextExecutor, *UsdaFoodComponent) error

	usdaFoodComponentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usdaFoodComponentType                 = reflect.TypeOf(&UsdaFoodComponent{})
	usdaFoodComponentMapping              = queries.MakeStructMapping(usdaFoodComponentType)
	usdaFoodComponentPrimaryKeyMapping, _ = queries.BindMapping(usdaFoodComponentType, usdaFoodComponentMapping, usdaFoodComponentPrimaryKeyColumns)
	usdaFoodComponentInsertCacheMut       sync.RWMutex
	usdaFoodComponentInsertCache          = make(map[string]insertCache)
	usdaFoodComponentUpdateCacheMut       sync.RWMutex
	usdaFoodComponentUpdateCache          = make(map[string]updateCache)
	usdaFoodComponentUpsertCacheMut       sync.RWMutex
	usdaFoodComponentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var usdaFoodComponentBeforeInsertHooks []UsdaFoodComponentHook
var usdaFoodComponentBeforeUpdateHooks []UsdaFoodComponentHook
var usdaFoodComponentBeforeDeleteHooks []UsdaFoodComponentHook
var usdaFoodComponentBeforeUpsertHooks []UsdaFoodComponentHook

var usdaFoodComponentAfterInsertHooks []UsdaFoodComponentHook
var usdaFoodComponentAfterSelectHooks []UsdaFoodComponentHook
var usdaFoodComponentAfterUpdateHooks []UsdaFoodComponentHook
var usdaFoodComponentAfterDeleteHooks []UsdaFoodComponentHook
var usdaFoodComponentAfterUpsertHooks []UsdaFoodComponentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UsdaFoodComponent) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodComponentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UsdaFoodComponent) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodComponentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UsdaFoodComponent) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodComponentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UsdaFoodComponent) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodComponentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UsdaFoodComponent) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodComponentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UsdaFoodComponent) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodComponentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UsdaFoodComponent) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodComponentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UsdaFoodComponent) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodComponentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UsdaFoodComponent) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodComponentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUsdaFoodComponentHook registers your hook function for all future operations.
func AddUsdaFoodComponentHook(hookPoint boil.HookPoint, usdaFoodComponentHook UsdaFoodComponentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		usdaFoodComponentBeforeInsertHooks = append(usdaFoodComponentBeforeInsertHooks, usdaFoodComponentHook)
	case boil.BeforeUpdateHook:
		usdaFoodComponentBeforeUpdateHooks = append(usdaFoodComponentBeforeUpdateHooks, usdaFoodComponentHook)
	case boil.BeforeDeleteHook:
		usdaFoodComponentBeforeDeleteHooks = append(usdaFoodComponentBeforeDeleteHooks, usdaFoodComponentHook)
	case boil.BeforeUpsertHook:
		usdaFoodComponentBeforeUpsertHooks = append(usdaFoodComponentBeforeUpsertHooks, usdaFoodComponentHook)
	case boil.AfterInsertHook:
		usdaFoodComponentAfterInsertHooks = append(usdaFoodComponentAfterInsertHooks, usdaFoodComponentHook)
	case boil.AfterSelectHook:
		usdaFoodComponentAfterSelectHooks = append(usdaFoodComponentAfterSelectHooks, usdaFoodComponentHook)
	case boil.AfterUpdateHook:
		usdaFoodComponentAfterUpdateHooks = append(usdaFoodComponentAfterUpdateHooks, usdaFoodComponentHook)
	case boil.AfterDeleteHook:
		usdaFoodComponentAfterDeleteHooks = append(usdaFoodComponentAfterDeleteHooks, usdaFoodComponentHook)
	case boil.AfterUpsertHook:
		usdaFoodComponentAfterUpsertHooks = append(usdaFoodComponentAfterUpsertHooks, usdaFoodComponentHook)
	}
}

// One returns a single usdaFoodComponent record from the query.
func (q usdaFoodComponentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UsdaFoodComponent, error) {
	o := &UsdaFoodComponent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for usda_food_component")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UsdaFoodComponent records from the query.
func (q usdaFoodComponentQuery) All(ctx context.Context, exec boil.ContextExecutor) (UsdaFoodComponentSlice, error) {
	var o []*UsdaFoodComponent

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UsdaFoodComponent slice")
	}

	if len(usdaFoodComponentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UsdaFoodComponent records in the query.
func (q usdaFoodComponentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count usda_food_component rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q usdaFoodComponentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if usda_food_component exists")
	}

	return count > 0, nil
}

// FDC pointed to by the foreign key.
func (o *UsdaFoodComponent) FDC(mods ...qm.QueryMod) usdaFoodQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"fdc_id\" = ?", o.FDCID),
	}

	queryMods = append(queryMods, mods...)

	query := UsdaFoods(queryMods...)
	queries.SetFrom(query.Query, "\"usda_food\"")

	return query
}

// LoadFDC allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (usdaFoodComponentL) LoadFDC(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsdaFoodComponent interface{}, mods queries.Applicator) error {
	var slice []*UsdaFoodComponent
	var object *UsdaFoodComponent

	if singular {
		object = maybeUsdaFoodComponent.(*UsdaFoodComponent)
	} else {
		slice = *maybeUsdaFoodComponent.(*[]*UsdaFoodComponent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &usdaFoodComponentR{}
		}
		if !queries.IsNil(object.FDCID) {
			args = append(args, object.FDCID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usdaFoodComponentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.FDCID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.FDCID) {
				args = append(args, obj.FDCID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`usda_food`),
		qm.WhereIn(`usda_food.fdc_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UsdaFood")
	}

	var resultSlice []*UsdaFood
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UsdaFood")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for usda_food")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usda_food")
	}

	if len(usdaFoodComponentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FDC = foreign
		if foreign.R == nil {
			foreign.R = &usdaFoodR{}
		}
		foreign.R.FDCUsdaFoodComponents = append(foreign.R.FDCUsdaFoodComponents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.FDCID, foreign.FDCID) {
				local.R.FDC = foreign
				if foreign.R == nil {
					foreign.R = &usdaFoodR{}
				}
				foreign.R.FDCUsdaFoodComponents = append(foreign.R.FDCUsdaFoodComponents, local)
				break
			}
		}
	}

	return nil
}

// SetFDC of the usdaFoodComponent to the related item.
// Sets o.R.FDC to related.
// Adds o to related.R.FDCUsdaFoodComponents.
func (o *UsdaFoodComponent) SetFDC(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UsdaFood) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"usda_food_component\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"fdc_id"}),
		strmangle.WhereClause("\"", "\"", 2, usdaFoodComponentPrimaryKeyColumns),
	)
	values := []interface{}{related.FDCID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.FDCID, related.FDCID)
	if o.R == nil {
		o.R = &usdaFoodComponentR{
			FDC: related,
		}
	} else {
		o.R.FDC = related
	}

	if related.R == nil {
		related.R = &usdaFoodR{
			FDCUsdaFoodComponents: UsdaFoodComponentSlice{o},
		}
	} else {
		related.R.FDCUsdaFoodComponents = append(related.R.FDCUsdaFoodComponents, o)
	}

	return nil
}

// RemoveFDC relationship.
// Sets o.R.FDC to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *UsdaFoodComponent) RemoveFDC(ctx context.Context, exec boil.ContextExecutor, related *UsdaFood) error {
	var err error

	queries.SetScanner(&o.FDCID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("fdc_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.FDC = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.FDCUsdaFoodComponents {
		if queries.Equal(o.FDCID, ri.FDCID) {
			continue
		}

		ln := len(related.R.FDCUsdaFoodComponents)
		if ln > 1 && i < ln-1 {
			related.R.FDCUsdaFoodComponents[i] = related.R.FDCUsdaFoodComponents[ln-1]
		}
		related.R.FDCUsdaFoodComponents = related.R.FDCUsdaFoodComponents[:ln-1]
		break
	}
	return nil
}

// UsdaFoodComponents retrieves all the records using an executor.
func UsdaFoodComponents(mods ...qm.QueryMod) usdaFoodComponentQuery {
	mods = append(mods, qm.From("\"usda_food_component\""))
	return usdaFoodComponentQuery{NewQuery(mods...)}
}

// FindUsdaFoodComponent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUsdaFoodComponent(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UsdaFoodComponent, error) {
	usdaFoodComponentObj := &UsdaFoodComponent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"usda_food_component\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, usdaFoodComponentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from usda_food_component")
	}

	if err = usdaFoodComponentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return usdaFoodComponentObj, err
	}

	return usdaFoodComponentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UsdaFoodComponent) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no usda_food_component provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaFoodComponentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	usdaFoodComponentInsertCacheMut.RLock()
	cache, cached := usdaFoodComponentInsertCache[key]
	usdaFoodComponentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			usdaFoodComponentAllColumns,
			usdaFoodComponentColumnsWithDefault,
			usdaFoodComponentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(usdaFoodComponentType, usdaFoodComponentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(usdaFoodComponentType, usdaFoodComponentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"usda_food_component\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"usda_food_component\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into usda_food_component")
	}

	if !cached {
		usdaFoodComponentInsertCacheMut.Lock()
		usdaFoodComponentInsertCache[key] = cache
		usdaFoodComponentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UsdaFoodComponent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UsdaFoodComponent) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	usdaFoodComponentUpdateCacheMut.RLock()
	cache, cached := usdaFoodComponentUpdateCache[key]
	usdaFoodComponentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			usdaFoodComponentAllColumns,
			usdaFoodComponentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update usda_food_component, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"usda_food_component\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, usdaFoodComponentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(usdaFoodComponentType, usdaFoodComponentMapping, append(wl, usdaFoodComponentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update usda_food_component row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for usda_food_component")
	}

	if !cached {
		usdaFoodComponentUpdateCacheMut.Lock()
		usdaFoodComponentUpdateCache[key] = cache
		usdaFoodComponentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q usdaFoodComponentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for usda_food_component")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for usda_food_component")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UsdaFoodComponentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaFoodComponentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"usda_food_component\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, usdaFoodComponentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in usdaFoodComponent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all usdaFoodComponent")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UsdaFoodComponent) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no usda_food_component provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaFoodComponentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	usdaFoodComponentUpsertCacheMut.RLock()
	cache, cached := usdaFoodComponentUpsertCache[key]
	usdaFoodComponentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			usdaFoodComponentAllColumns,
			usdaFoodComponentColumnsWithDefault,
			usdaFoodComponentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			usdaFoodComponentAllColumns,
			usdaFoodComponentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert usda_food_component, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(usdaFoodComponentPrimaryKeyColumns))
			copy(conflict, usdaFoodComponentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"usda_food_component\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(usdaFoodComponentType, usdaFoodComponentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(usdaFoodComponentType, usdaFoodComponentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert usda_food_component")
	}

	if !cached {
		usdaFoodComponentUpsertCacheMut.Lock()
		usdaFoodComponentUpsertCache[key] = cache
		usdaFoodComponentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UsdaFoodComponent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UsdaFoodComponent) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UsdaFoodComponent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), usdaFoodComponentPrimaryKeyMapping)
	sql := "DELETE FROM \"usda_food_component\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from usda_food_component")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for usda_food_component")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q usdaFoodComponentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no usdaFoodComponentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from usda_food_component")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for usda_food_component")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UsdaFoodComponentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(usdaFoodComponentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaFoodComponentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"usda_food_component\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaFoodComponentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from usdaFoodComponent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for usda_food_component")
	}

	if len(usdaFoodComponentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UsdaFoodComponent) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUsdaFoodComponent(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsdaFoodComponentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UsdaFoodComponentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaFoodComponentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"usda_food_component\".* FROM \"usda_food_component\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaFoodComponentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UsdaFoodComponentSlice")
	}

	*o = slice

	return nil
}

// UsdaFoodComponentExists checks if the UsdaFoodComponent row exists.
func UsdaFoodComponentExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"usda_food_component\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if usda_food_component exists")
	}

	return exists, nil
}
