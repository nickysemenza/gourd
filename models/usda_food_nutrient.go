// Code generated by SQLBoiler 4.10.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UsdaFoodNutrient is an object representing the database table.
type UsdaFoodNutrient struct {
	ID              int          `boil:"id" json:"id" toml:"id" yaml:"id"`
	FDCID           null.Int     `boil:"fdc_id" json:"fdc_id,omitempty" toml:"fdc_id" yaml:"fdc_id,omitempty"`
	NutrientID      null.Int     `boil:"nutrient_id" json:"nutrient_id,omitempty" toml:"nutrient_id" yaml:"nutrient_id,omitempty"`
	Amount          null.Float32 `boil:"amount" json:"amount,omitempty" toml:"amount" yaml:"amount,omitempty"`
	DataPoints      null.Int     `boil:"data_points" json:"data_points,omitempty" toml:"data_points" yaml:"data_points,omitempty"`
	DerivationID    null.Int     `boil:"derivation_id" json:"derivation_id,omitempty" toml:"derivation_id" yaml:"derivation_id,omitempty"`
	Min             null.Float32 `boil:"min" json:"min,omitempty" toml:"min" yaml:"min,omitempty"`
	Max             null.Float32 `boil:"max" json:"max,omitempty" toml:"max" yaml:"max,omitempty"`
	Median          null.Float32 `boil:"median" json:"median,omitempty" toml:"median" yaml:"median,omitempty"`
	Loq             null.Float32 `boil:"loq" json:"loq,omitempty" toml:"loq" yaml:"loq,omitempty"`
	Footnote        null.String  `boil:"footnote" json:"footnote,omitempty" toml:"footnote" yaml:"footnote,omitempty"`
	MinYearAcquired null.String  `boil:"min_year_acquired" json:"min_year_acquired,omitempty" toml:"min_year_acquired" yaml:"min_year_acquired,omitempty"`

	R *usdaFoodNutrientR `boil:"rel" json:"rel" toml:"rel" yaml:"rel"`
	L usdaFoodNutrientL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UsdaFoodNutrientColumns = struct {
	ID              string
	FDCID           string
	NutrientID      string
	Amount          string
	DataPoints      string
	DerivationID    string
	Min             string
	Max             string
	Median          string
	Loq             string
	Footnote        string
	MinYearAcquired string
}{
	ID:              "id",
	FDCID:           "fdc_id",
	NutrientID:      "nutrient_id",
	Amount:          "amount",
	DataPoints:      "data_points",
	DerivationID:    "derivation_id",
	Min:             "min",
	Max:             "max",
	Median:          "median",
	Loq:             "loq",
	Footnote:        "footnote",
	MinYearAcquired: "min_year_acquired",
}

var UsdaFoodNutrientTableColumns = struct {
	ID              string
	FDCID           string
	NutrientID      string
	Amount          string
	DataPoints      string
	DerivationID    string
	Min             string
	Max             string
	Median          string
	Loq             string
	Footnote        string
	MinYearAcquired string
}{
	ID:              "usda_food_nutrient.id",
	FDCID:           "usda_food_nutrient.fdc_id",
	NutrientID:      "usda_food_nutrient.nutrient_id",
	Amount:          "usda_food_nutrient.amount",
	DataPoints:      "usda_food_nutrient.data_points",
	DerivationID:    "usda_food_nutrient.derivation_id",
	Min:             "usda_food_nutrient.min",
	Max:             "usda_food_nutrient.max",
	Median:          "usda_food_nutrient.median",
	Loq:             "usda_food_nutrient.loq",
	Footnote:        "usda_food_nutrient.footnote",
	MinYearAcquired: "usda_food_nutrient.min_year_acquired",
}

// Generated where

var UsdaFoodNutrientWhere = struct {
	ID              whereHelperint
	FDCID           whereHelpernull_Int
	NutrientID      whereHelpernull_Int
	Amount          whereHelpernull_Float32
	DataPoints      whereHelpernull_Int
	DerivationID    whereHelpernull_Int
	Min             whereHelpernull_Float32
	Max             whereHelpernull_Float32
	Median          whereHelpernull_Float32
	Loq             whereHelpernull_Float32
	Footnote        whereHelpernull_String
	MinYearAcquired whereHelpernull_String
}{
	ID:              whereHelperint{field: "\"usda_food_nutrient\".\"id\""},
	FDCID:           whereHelpernull_Int{field: "\"usda_food_nutrient\".\"fdc_id\""},
	NutrientID:      whereHelpernull_Int{field: "\"usda_food_nutrient\".\"nutrient_id\""},
	Amount:          whereHelpernull_Float32{field: "\"usda_food_nutrient\".\"amount\""},
	DataPoints:      whereHelpernull_Int{field: "\"usda_food_nutrient\".\"data_points\""},
	DerivationID:    whereHelpernull_Int{field: "\"usda_food_nutrient\".\"derivation_id\""},
	Min:             whereHelpernull_Float32{field: "\"usda_food_nutrient\".\"min\""},
	Max:             whereHelpernull_Float32{field: "\"usda_food_nutrient\".\"max\""},
	Median:          whereHelpernull_Float32{field: "\"usda_food_nutrient\".\"median\""},
	Loq:             whereHelpernull_Float32{field: "\"usda_food_nutrient\".\"loq\""},
	Footnote:        whereHelpernull_String{field: "\"usda_food_nutrient\".\"footnote\""},
	MinYearAcquired: whereHelpernull_String{field: "\"usda_food_nutrient\".\"min_year_acquired\""},
}

// UsdaFoodNutrientRels is where relationship names are stored.
var UsdaFoodNutrientRels = struct {
	Derivation                      string
	FDC                             string
	Nutrient                        string
	FoodNutrientUsdaSubSampleResult string
}{
	Derivation:                      "Derivation",
	FDC:                             "FDC",
	Nutrient:                        "Nutrient",
	FoodNutrientUsdaSubSampleResult: "FoodNutrientUsdaSubSampleResult",
}

// usdaFoodNutrientR is where relationships are stored.
type usdaFoodNutrientR struct {
	Derivation                      *UsdaFoodNutrientDerivation `boil:"Derivation" json:"Derivation" toml:"Derivation" yaml:"Derivation"`
	FDC                             *UsdaFood                   `boil:"FDC" json:"FDC" toml:"FDC" yaml:"FDC"`
	Nutrient                        *UsdaNutrient               `boil:"Nutrient" json:"Nutrient" toml:"Nutrient" yaml:"Nutrient"`
	FoodNutrientUsdaSubSampleResult *UsdaSubSampleResult        `boil:"FoodNutrientUsdaSubSampleResult" json:"FoodNutrientUsdaSubSampleResult" toml:"FoodNutrientUsdaSubSampleResult" yaml:"FoodNutrientUsdaSubSampleResult"`
}

// NewStruct creates a new relationship struct
func (*usdaFoodNutrientR) NewStruct() *usdaFoodNutrientR {
	return &usdaFoodNutrientR{}
}

// usdaFoodNutrientL is where Load methods for each relationship are stored.
type usdaFoodNutrientL struct{}

var (
	usdaFoodNutrientAllColumns            = []string{"id", "fdc_id", "nutrient_id", "amount", "data_points", "derivation_id", "min", "max", "median", "loq", "footnote", "min_year_acquired"}
	usdaFoodNutrientColumnsWithoutDefault = []string{"id"}
	usdaFoodNutrientColumnsWithDefault    = []string{"fdc_id", "nutrient_id", "amount", "data_points", "derivation_id", "min", "max", "median", "loq", "footnote", "min_year_acquired"}
	usdaFoodNutrientPrimaryKeyColumns     = []string{"id"}
	usdaFoodNutrientGeneratedColumns      = []string{}
)

type (
	// UsdaFoodNutrientSlice is an alias for a slice of pointers to UsdaFoodNutrient.
	// This should almost always be used instead of []UsdaFoodNutrient.
	UsdaFoodNutrientSlice []*UsdaFoodNutrient
	// UsdaFoodNutrientHook is the signature for custom UsdaFoodNutrient hook methods
	UsdaFoodNutrientHook func(context.Context, boil.ContextExecutor, *UsdaFoodNutrient) error

	usdaFoodNutrientQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usdaFoodNutrientType                 = reflect.TypeOf(&UsdaFoodNutrient{})
	usdaFoodNutrientMapping              = queries.MakeStructMapping(usdaFoodNutrientType)
	usdaFoodNutrientPrimaryKeyMapping, _ = queries.BindMapping(usdaFoodNutrientType, usdaFoodNutrientMapping, usdaFoodNutrientPrimaryKeyColumns)
	usdaFoodNutrientInsertCacheMut       sync.RWMutex
	usdaFoodNutrientInsertCache          = make(map[string]insertCache)
	usdaFoodNutrientUpdateCacheMut       sync.RWMutex
	usdaFoodNutrientUpdateCache          = make(map[string]updateCache)
	usdaFoodNutrientUpsertCacheMut       sync.RWMutex
	usdaFoodNutrientUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var usdaFoodNutrientAfterSelectHooks []UsdaFoodNutrientHook

var usdaFoodNutrientBeforeInsertHooks []UsdaFoodNutrientHook
var usdaFoodNutrientAfterInsertHooks []UsdaFoodNutrientHook

var usdaFoodNutrientBeforeUpdateHooks []UsdaFoodNutrientHook
var usdaFoodNutrientAfterUpdateHooks []UsdaFoodNutrientHook

var usdaFoodNutrientBeforeDeleteHooks []UsdaFoodNutrientHook
var usdaFoodNutrientAfterDeleteHooks []UsdaFoodNutrientHook

var usdaFoodNutrientBeforeUpsertHooks []UsdaFoodNutrientHook
var usdaFoodNutrientAfterUpsertHooks []UsdaFoodNutrientHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UsdaFoodNutrient) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UsdaFoodNutrient) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UsdaFoodNutrient) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UsdaFoodNutrient) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UsdaFoodNutrient) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UsdaFoodNutrient) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UsdaFoodNutrient) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UsdaFoodNutrient) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UsdaFoodNutrient) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usdaFoodNutrientAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUsdaFoodNutrientHook registers your hook function for all future operations.
func AddUsdaFoodNutrientHook(hookPoint boil.HookPoint, usdaFoodNutrientHook UsdaFoodNutrientHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		usdaFoodNutrientAfterSelectHooks = append(usdaFoodNutrientAfterSelectHooks, usdaFoodNutrientHook)
	case boil.BeforeInsertHook:
		usdaFoodNutrientBeforeInsertHooks = append(usdaFoodNutrientBeforeInsertHooks, usdaFoodNutrientHook)
	case boil.AfterInsertHook:
		usdaFoodNutrientAfterInsertHooks = append(usdaFoodNutrientAfterInsertHooks, usdaFoodNutrientHook)
	case boil.BeforeUpdateHook:
		usdaFoodNutrientBeforeUpdateHooks = append(usdaFoodNutrientBeforeUpdateHooks, usdaFoodNutrientHook)
	case boil.AfterUpdateHook:
		usdaFoodNutrientAfterUpdateHooks = append(usdaFoodNutrientAfterUpdateHooks, usdaFoodNutrientHook)
	case boil.BeforeDeleteHook:
		usdaFoodNutrientBeforeDeleteHooks = append(usdaFoodNutrientBeforeDeleteHooks, usdaFoodNutrientHook)
	case boil.AfterDeleteHook:
		usdaFoodNutrientAfterDeleteHooks = append(usdaFoodNutrientAfterDeleteHooks, usdaFoodNutrientHook)
	case boil.BeforeUpsertHook:
		usdaFoodNutrientBeforeUpsertHooks = append(usdaFoodNutrientBeforeUpsertHooks, usdaFoodNutrientHook)
	case boil.AfterUpsertHook:
		usdaFoodNutrientAfterUpsertHooks = append(usdaFoodNutrientAfterUpsertHooks, usdaFoodNutrientHook)
	}
}

// One returns a single usdaFoodNutrient record from the query.
func (q usdaFoodNutrientQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UsdaFoodNutrient, error) {
	o := &UsdaFoodNutrient{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for usda_food_nutrient")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UsdaFoodNutrient records from the query.
func (q usdaFoodNutrientQuery) All(ctx context.Context, exec boil.ContextExecutor) (UsdaFoodNutrientSlice, error) {
	var o []*UsdaFoodNutrient

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UsdaFoodNutrient slice")
	}

	if len(usdaFoodNutrientAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UsdaFoodNutrient records in the query.
func (q usdaFoodNutrientQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count usda_food_nutrient rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q usdaFoodNutrientQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if usda_food_nutrient exists")
	}

	return count > 0, nil
}

// Derivation pointed to by the foreign key.
func (o *UsdaFoodNutrient) Derivation(mods ...qm.QueryMod) usdaFoodNutrientDerivationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DerivationID),
	}

	queryMods = append(queryMods, mods...)

	return UsdaFoodNutrientDerivations(queryMods...)
}

// FDC pointed to by the foreign key.
func (o *UsdaFoodNutrient) FDC(mods ...qm.QueryMod) usdaFoodQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"fdc_id\" = ?", o.FDCID),
	}

	queryMods = append(queryMods, mods...)

	return UsdaFoods(queryMods...)
}

// Nutrient pointed to by the foreign key.
func (o *UsdaFoodNutrient) Nutrient(mods ...qm.QueryMod) usdaNutrientQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.NutrientID),
	}

	queryMods = append(queryMods, mods...)

	return UsdaNutrients(queryMods...)
}

// FoodNutrientUsdaSubSampleResult pointed to by the foreign key.
func (o *UsdaFoodNutrient) FoodNutrientUsdaSubSampleResult(mods ...qm.QueryMod) usdaSubSampleResultQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"food_nutrient_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return UsdaSubSampleResults(queryMods...)
}

// LoadDerivation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (usdaFoodNutrientL) LoadDerivation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsdaFoodNutrient interface{}, mods queries.Applicator) error {
	var slice []*UsdaFoodNutrient
	var object *UsdaFoodNutrient

	if singular {
		object = maybeUsdaFoodNutrient.(*UsdaFoodNutrient)
	} else {
		slice = *maybeUsdaFoodNutrient.(*[]*UsdaFoodNutrient)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &usdaFoodNutrientR{}
		}
		if !queries.IsNil(object.DerivationID) {
			args = append(args, object.DerivationID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usdaFoodNutrientR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DerivationID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.DerivationID) {
				args = append(args, obj.DerivationID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`usda_food_nutrient_derivation`),
		qm.WhereIn(`usda_food_nutrient_derivation.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UsdaFoodNutrientDerivation")
	}

	var resultSlice []*UsdaFoodNutrientDerivation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UsdaFoodNutrientDerivation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for usda_food_nutrient_derivation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usda_food_nutrient_derivation")
	}

	if len(usdaFoodNutrientAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Derivation = foreign
		if foreign.R == nil {
			foreign.R = &usdaFoodNutrientDerivationR{}
		}
		foreign.R.DerivationUsdaFoodNutrients = append(foreign.R.DerivationUsdaFoodNutrients, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DerivationID, foreign.ID) {
				local.R.Derivation = foreign
				if foreign.R == nil {
					foreign.R = &usdaFoodNutrientDerivationR{}
				}
				foreign.R.DerivationUsdaFoodNutrients = append(foreign.R.DerivationUsdaFoodNutrients, local)
				break
			}
		}
	}

	return nil
}

// LoadFDC allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (usdaFoodNutrientL) LoadFDC(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsdaFoodNutrient interface{}, mods queries.Applicator) error {
	var slice []*UsdaFoodNutrient
	var object *UsdaFoodNutrient

	if singular {
		object = maybeUsdaFoodNutrient.(*UsdaFoodNutrient)
	} else {
		slice = *maybeUsdaFoodNutrient.(*[]*UsdaFoodNutrient)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &usdaFoodNutrientR{}
		}
		if !queries.IsNil(object.FDCID) {
			args = append(args, object.FDCID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usdaFoodNutrientR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.FDCID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.FDCID) {
				args = append(args, obj.FDCID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`usda_food`),
		qm.WhereIn(`usda_food.fdc_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UsdaFood")
	}

	var resultSlice []*UsdaFood
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UsdaFood")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for usda_food")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usda_food")
	}

	if len(usdaFoodNutrientAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FDC = foreign
		if foreign.R == nil {
			foreign.R = &usdaFoodR{}
		}
		foreign.R.FDCUsdaFoodNutrients = append(foreign.R.FDCUsdaFoodNutrients, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.FDCID, foreign.FDCID) {
				local.R.FDC = foreign
				if foreign.R == nil {
					foreign.R = &usdaFoodR{}
				}
				foreign.R.FDCUsdaFoodNutrients = append(foreign.R.FDCUsdaFoodNutrients, local)
				break
			}
		}
	}

	return nil
}

// LoadNutrient allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (usdaFoodNutrientL) LoadNutrient(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsdaFoodNutrient interface{}, mods queries.Applicator) error {
	var slice []*UsdaFoodNutrient
	var object *UsdaFoodNutrient

	if singular {
		object = maybeUsdaFoodNutrient.(*UsdaFoodNutrient)
	} else {
		slice = *maybeUsdaFoodNutrient.(*[]*UsdaFoodNutrient)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &usdaFoodNutrientR{}
		}
		if !queries.IsNil(object.NutrientID) {
			args = append(args, object.NutrientID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usdaFoodNutrientR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.NutrientID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.NutrientID) {
				args = append(args, obj.NutrientID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`usda_nutrient`),
		qm.WhereIn(`usda_nutrient.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UsdaNutrient")
	}

	var resultSlice []*UsdaNutrient
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UsdaNutrient")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for usda_nutrient")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usda_nutrient")
	}

	if len(usdaFoodNutrientAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Nutrient = foreign
		if foreign.R == nil {
			foreign.R = &usdaNutrientR{}
		}
		foreign.R.NutrientUsdaFoodNutrients = append(foreign.R.NutrientUsdaFoodNutrients, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.NutrientID, foreign.ID) {
				local.R.Nutrient = foreign
				if foreign.R == nil {
					foreign.R = &usdaNutrientR{}
				}
				foreign.R.NutrientUsdaFoodNutrients = append(foreign.R.NutrientUsdaFoodNutrients, local)
				break
			}
		}
	}

	return nil
}

// LoadFoodNutrientUsdaSubSampleResult allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (usdaFoodNutrientL) LoadFoodNutrientUsdaSubSampleResult(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsdaFoodNutrient interface{}, mods queries.Applicator) error {
	var slice []*UsdaFoodNutrient
	var object *UsdaFoodNutrient

	if singular {
		object = maybeUsdaFoodNutrient.(*UsdaFoodNutrient)
	} else {
		slice = *maybeUsdaFoodNutrient.(*[]*UsdaFoodNutrient)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &usdaFoodNutrientR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usdaFoodNutrientR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`usda_sub_sample_result`),
		qm.WhereIn(`usda_sub_sample_result.food_nutrient_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UsdaSubSampleResult")
	}

	var resultSlice []*UsdaSubSampleResult
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UsdaSubSampleResult")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for usda_sub_sample_result")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for usda_sub_sample_result")
	}

	if len(usdaFoodNutrientAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FoodNutrientUsdaSubSampleResult = foreign
		if foreign.R == nil {
			foreign.R = &usdaSubSampleResultR{}
		}
		foreign.R.FoodNutrient = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.FoodNutrientID {
				local.R.FoodNutrientUsdaSubSampleResult = foreign
				if foreign.R == nil {
					foreign.R = &usdaSubSampleResultR{}
				}
				foreign.R.FoodNutrient = local
				break
			}
		}
	}

	return nil
}

// SetDerivation of the usdaFoodNutrient to the related item.
// Sets o.R.Derivation to related.
// Adds o to related.R.DerivationUsdaFoodNutrients.
func (o *UsdaFoodNutrient) SetDerivation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UsdaFoodNutrientDerivation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"usda_food_nutrient\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"derivation_id"}),
		strmangle.WhereClause("\"", "\"", 2, usdaFoodNutrientPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DerivationID, related.ID)
	if o.R == nil {
		o.R = &usdaFoodNutrientR{
			Derivation: related,
		}
	} else {
		o.R.Derivation = related
	}

	if related.R == nil {
		related.R = &usdaFoodNutrientDerivationR{
			DerivationUsdaFoodNutrients: UsdaFoodNutrientSlice{o},
		}
	} else {
		related.R.DerivationUsdaFoodNutrients = append(related.R.DerivationUsdaFoodNutrients, o)
	}

	return nil
}

// RemoveDerivation relationship.
// Sets o.R.Derivation to nil.
// Removes o from all passed in related items' relationships struct.
func (o *UsdaFoodNutrient) RemoveDerivation(ctx context.Context, exec boil.ContextExecutor, related *UsdaFoodNutrientDerivation) error {
	var err error

	queries.SetScanner(&o.DerivationID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("derivation_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Derivation = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.DerivationUsdaFoodNutrients {
		if queries.Equal(o.DerivationID, ri.DerivationID) {
			continue
		}

		ln := len(related.R.DerivationUsdaFoodNutrients)
		if ln > 1 && i < ln-1 {
			related.R.DerivationUsdaFoodNutrients[i] = related.R.DerivationUsdaFoodNutrients[ln-1]
		}
		related.R.DerivationUsdaFoodNutrients = related.R.DerivationUsdaFoodNutrients[:ln-1]
		break
	}
	return nil
}

// SetFDC of the usdaFoodNutrient to the related item.
// Sets o.R.FDC to related.
// Adds o to related.R.FDCUsdaFoodNutrients.
func (o *UsdaFoodNutrient) SetFDC(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UsdaFood) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"usda_food_nutrient\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"fdc_id"}),
		strmangle.WhereClause("\"", "\"", 2, usdaFoodNutrientPrimaryKeyColumns),
	)
	values := []interface{}{related.FDCID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.FDCID, related.FDCID)
	if o.R == nil {
		o.R = &usdaFoodNutrientR{
			FDC: related,
		}
	} else {
		o.R.FDC = related
	}

	if related.R == nil {
		related.R = &usdaFoodR{
			FDCUsdaFoodNutrients: UsdaFoodNutrientSlice{o},
		}
	} else {
		related.R.FDCUsdaFoodNutrients = append(related.R.FDCUsdaFoodNutrients, o)
	}

	return nil
}

// RemoveFDC relationship.
// Sets o.R.FDC to nil.
// Removes o from all passed in related items' relationships struct.
func (o *UsdaFoodNutrient) RemoveFDC(ctx context.Context, exec boil.ContextExecutor, related *UsdaFood) error {
	var err error

	queries.SetScanner(&o.FDCID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("fdc_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.FDC = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.FDCUsdaFoodNutrients {
		if queries.Equal(o.FDCID, ri.FDCID) {
			continue
		}

		ln := len(related.R.FDCUsdaFoodNutrients)
		if ln > 1 && i < ln-1 {
			related.R.FDCUsdaFoodNutrients[i] = related.R.FDCUsdaFoodNutrients[ln-1]
		}
		related.R.FDCUsdaFoodNutrients = related.R.FDCUsdaFoodNutrients[:ln-1]
		break
	}
	return nil
}

// SetNutrient of the usdaFoodNutrient to the related item.
// Sets o.R.Nutrient to related.
// Adds o to related.R.NutrientUsdaFoodNutrients.
func (o *UsdaFoodNutrient) SetNutrient(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UsdaNutrient) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"usda_food_nutrient\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"nutrient_id"}),
		strmangle.WhereClause("\"", "\"", 2, usdaFoodNutrientPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.NutrientID, related.ID)
	if o.R == nil {
		o.R = &usdaFoodNutrientR{
			Nutrient: related,
		}
	} else {
		o.R.Nutrient = related
	}

	if related.R == nil {
		related.R = &usdaNutrientR{
			NutrientUsdaFoodNutrients: UsdaFoodNutrientSlice{o},
		}
	} else {
		related.R.NutrientUsdaFoodNutrients = append(related.R.NutrientUsdaFoodNutrients, o)
	}

	return nil
}

// RemoveNutrient relationship.
// Sets o.R.Nutrient to nil.
// Removes o from all passed in related items' relationships struct.
func (o *UsdaFoodNutrient) RemoveNutrient(ctx context.Context, exec boil.ContextExecutor, related *UsdaNutrient) error {
	var err error

	queries.SetScanner(&o.NutrientID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("nutrient_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Nutrient = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.NutrientUsdaFoodNutrients {
		if queries.Equal(o.NutrientID, ri.NutrientID) {
			continue
		}

		ln := len(related.R.NutrientUsdaFoodNutrients)
		if ln > 1 && i < ln-1 {
			related.R.NutrientUsdaFoodNutrients[i] = related.R.NutrientUsdaFoodNutrients[ln-1]
		}
		related.R.NutrientUsdaFoodNutrients = related.R.NutrientUsdaFoodNutrients[:ln-1]
		break
	}
	return nil
}

// SetFoodNutrientUsdaSubSampleResult of the usdaFoodNutrient to the related item.
// Sets o.R.FoodNutrientUsdaSubSampleResult to related.
// Adds o to related.R.FoodNutrient.
func (o *UsdaFoodNutrient) SetFoodNutrientUsdaSubSampleResult(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UsdaSubSampleResult) error {
	var err error

	if insert {
		related.FoodNutrientID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"usda_sub_sample_result\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"food_nutrient_id"}),
			strmangle.WhereClause("\"", "\"", 2, usdaSubSampleResultPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.FoodNutrientID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.FoodNutrientID = o.ID
	}

	if o.R == nil {
		o.R = &usdaFoodNutrientR{
			FoodNutrientUsdaSubSampleResult: related,
		}
	} else {
		o.R.FoodNutrientUsdaSubSampleResult = related
	}

	if related.R == nil {
		related.R = &usdaSubSampleResultR{
			FoodNutrient: o,
		}
	} else {
		related.R.FoodNutrient = o
	}
	return nil
}

// UsdaFoodNutrients retrieves all the records using an executor.
func UsdaFoodNutrients(mods ...qm.QueryMod) usdaFoodNutrientQuery {
	mods = append(mods, qm.From("\"usda_food_nutrient\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"usda_food_nutrient\".*"})
	}

	return usdaFoodNutrientQuery{q}
}

// FindUsdaFoodNutrient retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUsdaFoodNutrient(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UsdaFoodNutrient, error) {
	usdaFoodNutrientObj := &UsdaFoodNutrient{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"usda_food_nutrient\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, usdaFoodNutrientObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from usda_food_nutrient")
	}

	if err = usdaFoodNutrientObj.doAfterSelectHooks(ctx, exec); err != nil {
		return usdaFoodNutrientObj, err
	}

	return usdaFoodNutrientObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UsdaFoodNutrient) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no usda_food_nutrient provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaFoodNutrientColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	usdaFoodNutrientInsertCacheMut.RLock()
	cache, cached := usdaFoodNutrientInsertCache[key]
	usdaFoodNutrientInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			usdaFoodNutrientAllColumns,
			usdaFoodNutrientColumnsWithDefault,
			usdaFoodNutrientColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(usdaFoodNutrientType, usdaFoodNutrientMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(usdaFoodNutrientType, usdaFoodNutrientMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"usda_food_nutrient\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"usda_food_nutrient\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into usda_food_nutrient")
	}

	if !cached {
		usdaFoodNutrientInsertCacheMut.Lock()
		usdaFoodNutrientInsertCache[key] = cache
		usdaFoodNutrientInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UsdaFoodNutrient.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UsdaFoodNutrient) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	usdaFoodNutrientUpdateCacheMut.RLock()
	cache, cached := usdaFoodNutrientUpdateCache[key]
	usdaFoodNutrientUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			usdaFoodNutrientAllColumns,
			usdaFoodNutrientPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update usda_food_nutrient, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"usda_food_nutrient\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, usdaFoodNutrientPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(usdaFoodNutrientType, usdaFoodNutrientMapping, append(wl, usdaFoodNutrientPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update usda_food_nutrient row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for usda_food_nutrient")
	}

	if !cached {
		usdaFoodNutrientUpdateCacheMut.Lock()
		usdaFoodNutrientUpdateCache[key] = cache
		usdaFoodNutrientUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q usdaFoodNutrientQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for usda_food_nutrient")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for usda_food_nutrient")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UsdaFoodNutrientSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaFoodNutrientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"usda_food_nutrient\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, usdaFoodNutrientPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in usdaFoodNutrient slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all usdaFoodNutrient")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UsdaFoodNutrient) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no usda_food_nutrient provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usdaFoodNutrientColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	usdaFoodNutrientUpsertCacheMut.RLock()
	cache, cached := usdaFoodNutrientUpsertCache[key]
	usdaFoodNutrientUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			usdaFoodNutrientAllColumns,
			usdaFoodNutrientColumnsWithDefault,
			usdaFoodNutrientColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			usdaFoodNutrientAllColumns,
			usdaFoodNutrientPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert usda_food_nutrient, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(usdaFoodNutrientPrimaryKeyColumns))
			copy(conflict, usdaFoodNutrientPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"usda_food_nutrient\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(usdaFoodNutrientType, usdaFoodNutrientMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(usdaFoodNutrientType, usdaFoodNutrientMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert usda_food_nutrient")
	}

	if !cached {
		usdaFoodNutrientUpsertCacheMut.Lock()
		usdaFoodNutrientUpsertCache[key] = cache
		usdaFoodNutrientUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UsdaFoodNutrient record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UsdaFoodNutrient) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UsdaFoodNutrient provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), usdaFoodNutrientPrimaryKeyMapping)
	sql := "DELETE FROM \"usda_food_nutrient\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from usda_food_nutrient")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for usda_food_nutrient")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q usdaFoodNutrientQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no usdaFoodNutrientQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from usda_food_nutrient")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for usda_food_nutrient")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UsdaFoodNutrientSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(usdaFoodNutrientBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaFoodNutrientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"usda_food_nutrient\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaFoodNutrientPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from usdaFoodNutrient slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for usda_food_nutrient")
	}

	if len(usdaFoodNutrientAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UsdaFoodNutrient) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUsdaFoodNutrient(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsdaFoodNutrientSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UsdaFoodNutrientSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usdaFoodNutrientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"usda_food_nutrient\".* FROM \"usda_food_nutrient\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usdaFoodNutrientPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UsdaFoodNutrientSlice")
	}

	*o = slice

	return nil
}

// UsdaFoodNutrientExists checks if the UsdaFoodNutrient row exists.
func UsdaFoodNutrientExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"usda_food_nutrient\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if usda_food_nutrient exists")
	}

	return exists, nil
}
