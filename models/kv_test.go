// Code generated by SQLBoiler 4.8.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testKVS(t *testing.T) {
	t.Parallel()

	query := KVS()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testKVSDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &KV{}
	if err = randomize.Struct(seed, o, kvDBTypes, true, kvColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize KV struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := KVS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testKVSQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &KV{}
	if err = randomize.Struct(seed, o, kvDBTypes, true, kvColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize KV struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := KVS().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := KVS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testKVSSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &KV{}
	if err = randomize.Struct(seed, o, kvDBTypes, true, kvColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize KV struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := KVSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := KVS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testKVSExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &KV{}
	if err = randomize.Struct(seed, o, kvDBTypes, true, kvColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize KV struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := KVExists(ctx, tx, o.Key)
	if err != nil {
		t.Errorf("Unable to check if KV exists: %s", err)
	}
	if !e {
		t.Errorf("Expected KVExists to return true, but got false.")
	}
}

func testKVSFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &KV{}
	if err = randomize.Struct(seed, o, kvDBTypes, true, kvColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize KV struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	kvFound, err := FindKV(ctx, tx, o.Key)
	if err != nil {
		t.Error(err)
	}

	if kvFound == nil {
		t.Error("want a record, got nil")
	}
}

func testKVSBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &KV{}
	if err = randomize.Struct(seed, o, kvDBTypes, true, kvColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize KV struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = KVS().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testKVSOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &KV{}
	if err = randomize.Struct(seed, o, kvDBTypes, true, kvColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize KV struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := KVS().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testKVSAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	kvOne := &KV{}
	kvTwo := &KV{}
	if err = randomize.Struct(seed, kvOne, kvDBTypes, false, kvColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize KV struct: %s", err)
	}
	if err = randomize.Struct(seed, kvTwo, kvDBTypes, false, kvColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize KV struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = kvOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = kvTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := KVS().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testKVSCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	kvOne := &KV{}
	kvTwo := &KV{}
	if err = randomize.Struct(seed, kvOne, kvDBTypes, false, kvColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize KV struct: %s", err)
	}
	if err = randomize.Struct(seed, kvTwo, kvDBTypes, false, kvColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize KV struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = kvOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = kvTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := KVS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func kvBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *KV) error {
	*o = KV{}
	return nil
}

func kvAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *KV) error {
	*o = KV{}
	return nil
}

func kvAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *KV) error {
	*o = KV{}
	return nil
}

func kvBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *KV) error {
	*o = KV{}
	return nil
}

func kvAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *KV) error {
	*o = KV{}
	return nil
}

func kvBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *KV) error {
	*o = KV{}
	return nil
}

func kvAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *KV) error {
	*o = KV{}
	return nil
}

func kvBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *KV) error {
	*o = KV{}
	return nil
}

func kvAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *KV) error {
	*o = KV{}
	return nil
}

func testKVSHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &KV{}
	o := &KV{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, kvDBTypes, false); err != nil {
		t.Errorf("Unable to randomize KV object: %s", err)
	}

	AddKVHook(boil.BeforeInsertHook, kvBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	kvBeforeInsertHooks = []KVHook{}

	AddKVHook(boil.AfterInsertHook, kvAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	kvAfterInsertHooks = []KVHook{}

	AddKVHook(boil.AfterSelectHook, kvAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	kvAfterSelectHooks = []KVHook{}

	AddKVHook(boil.BeforeUpdateHook, kvBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	kvBeforeUpdateHooks = []KVHook{}

	AddKVHook(boil.AfterUpdateHook, kvAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	kvAfterUpdateHooks = []KVHook{}

	AddKVHook(boil.BeforeDeleteHook, kvBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	kvBeforeDeleteHooks = []KVHook{}

	AddKVHook(boil.AfterDeleteHook, kvAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	kvAfterDeleteHooks = []KVHook{}

	AddKVHook(boil.BeforeUpsertHook, kvBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	kvBeforeUpsertHooks = []KVHook{}

	AddKVHook(boil.AfterUpsertHook, kvAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	kvAfterUpsertHooks = []KVHook{}
}

func testKVSInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &KV{}
	if err = randomize.Struct(seed, o, kvDBTypes, true, kvColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize KV struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := KVS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testKVSInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &KV{}
	if err = randomize.Struct(seed, o, kvDBTypes, true); err != nil {
		t.Errorf("Unable to randomize KV struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(kvColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := KVS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testKVSReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &KV{}
	if err = randomize.Struct(seed, o, kvDBTypes, true, kvColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize KV struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testKVSReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &KV{}
	if err = randomize.Struct(seed, o, kvDBTypes, true, kvColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize KV struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := KVSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testKVSSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &KV{}
	if err = randomize.Struct(seed, o, kvDBTypes, true, kvColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize KV struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := KVS().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	kvDBTypes = map[string]string{`Key`: `text`, `Value`: `jsonb`}
	_         = bytes.MinRead
)

func testKVSUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(kvPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(kvAllColumns) == len(kvPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &KV{}
	if err = randomize.Struct(seed, o, kvDBTypes, true, kvColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize KV struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := KVS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, kvDBTypes, true, kvPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize KV struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testKVSSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(kvAllColumns) == len(kvPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &KV{}
	if err = randomize.Struct(seed, o, kvDBTypes, true, kvColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize KV struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := KVS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, kvDBTypes, true, kvPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize KV struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(kvAllColumns, kvPrimaryKeyColumns) {
		fields = kvAllColumns
	} else {
		fields = strmangle.SetComplement(
			kvAllColumns,
			kvPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := KVSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testKVSUpsert(t *testing.T) {
	t.Parallel()

	if len(kvAllColumns) == len(kvPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := KV{}
	if err = randomize.Struct(seed, &o, kvDBTypes, true); err != nil {
		t.Errorf("Unable to randomize KV struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert KV: %s", err)
	}

	count, err := KVS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, kvDBTypes, false, kvPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize KV struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert KV: %s", err)
	}

	count, err = KVS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
