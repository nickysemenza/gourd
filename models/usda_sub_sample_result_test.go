// Code generated by SQLBoiler 4.8.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUsdaSubSampleResults(t *testing.T) {
	t.Parallel()

	query := UsdaSubSampleResults()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUsdaSubSampleResultsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSubSampleResult{}
	if err = randomize.Struct(seed, o, usdaSubSampleResultDBTypes, true, usdaSubSampleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSubSampleResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaSubSampleResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaSubSampleResultsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSubSampleResult{}
	if err = randomize.Struct(seed, o, usdaSubSampleResultDBTypes, true, usdaSubSampleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSubSampleResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UsdaSubSampleResults().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaSubSampleResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaSubSampleResultsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSubSampleResult{}
	if err = randomize.Struct(seed, o, usdaSubSampleResultDBTypes, true, usdaSubSampleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSubSampleResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UsdaSubSampleResultSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsdaSubSampleResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsdaSubSampleResultsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSubSampleResult{}
	if err = randomize.Struct(seed, o, usdaSubSampleResultDBTypes, true, usdaSubSampleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSubSampleResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UsdaSubSampleResultExists(ctx, tx, o.FoodNutrientID)
	if err != nil {
		t.Errorf("Unable to check if UsdaSubSampleResult exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UsdaSubSampleResultExists to return true, but got false.")
	}
}

func testUsdaSubSampleResultsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSubSampleResult{}
	if err = randomize.Struct(seed, o, usdaSubSampleResultDBTypes, true, usdaSubSampleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSubSampleResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	usdaSubSampleResultFound, err := FindUsdaSubSampleResult(ctx, tx, o.FoodNutrientID)
	if err != nil {
		t.Error(err)
	}

	if usdaSubSampleResultFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUsdaSubSampleResultsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSubSampleResult{}
	if err = randomize.Struct(seed, o, usdaSubSampleResultDBTypes, true, usdaSubSampleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSubSampleResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UsdaSubSampleResults().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUsdaSubSampleResultsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSubSampleResult{}
	if err = randomize.Struct(seed, o, usdaSubSampleResultDBTypes, true, usdaSubSampleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSubSampleResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UsdaSubSampleResults().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUsdaSubSampleResultsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	usdaSubSampleResultOne := &UsdaSubSampleResult{}
	usdaSubSampleResultTwo := &UsdaSubSampleResult{}
	if err = randomize.Struct(seed, usdaSubSampleResultOne, usdaSubSampleResultDBTypes, false, usdaSubSampleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSubSampleResult struct: %s", err)
	}
	if err = randomize.Struct(seed, usdaSubSampleResultTwo, usdaSubSampleResultDBTypes, false, usdaSubSampleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSubSampleResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = usdaSubSampleResultOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = usdaSubSampleResultTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UsdaSubSampleResults().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUsdaSubSampleResultsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	usdaSubSampleResultOne := &UsdaSubSampleResult{}
	usdaSubSampleResultTwo := &UsdaSubSampleResult{}
	if err = randomize.Struct(seed, usdaSubSampleResultOne, usdaSubSampleResultDBTypes, false, usdaSubSampleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSubSampleResult struct: %s", err)
	}
	if err = randomize.Struct(seed, usdaSubSampleResultTwo, usdaSubSampleResultDBTypes, false, usdaSubSampleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSubSampleResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = usdaSubSampleResultOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = usdaSubSampleResultTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaSubSampleResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func usdaSubSampleResultBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaSubSampleResult) error {
	*o = UsdaSubSampleResult{}
	return nil
}

func usdaSubSampleResultAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaSubSampleResult) error {
	*o = UsdaSubSampleResult{}
	return nil
}

func usdaSubSampleResultAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UsdaSubSampleResult) error {
	*o = UsdaSubSampleResult{}
	return nil
}

func usdaSubSampleResultBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UsdaSubSampleResult) error {
	*o = UsdaSubSampleResult{}
	return nil
}

func usdaSubSampleResultAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UsdaSubSampleResult) error {
	*o = UsdaSubSampleResult{}
	return nil
}

func usdaSubSampleResultBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UsdaSubSampleResult) error {
	*o = UsdaSubSampleResult{}
	return nil
}

func usdaSubSampleResultAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UsdaSubSampleResult) error {
	*o = UsdaSubSampleResult{}
	return nil
}

func usdaSubSampleResultBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaSubSampleResult) error {
	*o = UsdaSubSampleResult{}
	return nil
}

func usdaSubSampleResultAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UsdaSubSampleResult) error {
	*o = UsdaSubSampleResult{}
	return nil
}

func testUsdaSubSampleResultsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UsdaSubSampleResult{}
	o := &UsdaSubSampleResult{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, usdaSubSampleResultDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UsdaSubSampleResult object: %s", err)
	}

	AddUsdaSubSampleResultHook(boil.BeforeInsertHook, usdaSubSampleResultBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	usdaSubSampleResultBeforeInsertHooks = []UsdaSubSampleResultHook{}

	AddUsdaSubSampleResultHook(boil.AfterInsertHook, usdaSubSampleResultAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	usdaSubSampleResultAfterInsertHooks = []UsdaSubSampleResultHook{}

	AddUsdaSubSampleResultHook(boil.AfterSelectHook, usdaSubSampleResultAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	usdaSubSampleResultAfterSelectHooks = []UsdaSubSampleResultHook{}

	AddUsdaSubSampleResultHook(boil.BeforeUpdateHook, usdaSubSampleResultBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	usdaSubSampleResultBeforeUpdateHooks = []UsdaSubSampleResultHook{}

	AddUsdaSubSampleResultHook(boil.AfterUpdateHook, usdaSubSampleResultAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	usdaSubSampleResultAfterUpdateHooks = []UsdaSubSampleResultHook{}

	AddUsdaSubSampleResultHook(boil.BeforeDeleteHook, usdaSubSampleResultBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	usdaSubSampleResultBeforeDeleteHooks = []UsdaSubSampleResultHook{}

	AddUsdaSubSampleResultHook(boil.AfterDeleteHook, usdaSubSampleResultAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	usdaSubSampleResultAfterDeleteHooks = []UsdaSubSampleResultHook{}

	AddUsdaSubSampleResultHook(boil.BeforeUpsertHook, usdaSubSampleResultBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	usdaSubSampleResultBeforeUpsertHooks = []UsdaSubSampleResultHook{}

	AddUsdaSubSampleResultHook(boil.AfterUpsertHook, usdaSubSampleResultAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	usdaSubSampleResultAfterUpsertHooks = []UsdaSubSampleResultHook{}
}

func testUsdaSubSampleResultsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSubSampleResult{}
	if err = randomize.Struct(seed, o, usdaSubSampleResultDBTypes, true, usdaSubSampleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSubSampleResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaSubSampleResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUsdaSubSampleResultsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSubSampleResult{}
	if err = randomize.Struct(seed, o, usdaSubSampleResultDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UsdaSubSampleResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(usdaSubSampleResultColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UsdaSubSampleResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUsdaSubSampleResultToOneUsdaFoodNutrientUsingFoodNutrient(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UsdaSubSampleResult
	var foreign UsdaFoodNutrient

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, usdaSubSampleResultDBTypes, false, usdaSubSampleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSubSampleResult struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, usdaFoodNutrientDBTypes, false, usdaFoodNutrientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaFoodNutrient struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.FoodNutrientID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.FoodNutrient().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UsdaSubSampleResultSlice{&local}
	if err = local.L.LoadFoodNutrient(ctx, tx, false, (*[]*UsdaSubSampleResult)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FoodNutrient == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.FoodNutrient = nil
	if err = local.L.LoadFoodNutrient(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FoodNutrient == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUsdaSubSampleResultToOneUsdaLabMethodUsingLabMethod(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UsdaSubSampleResult
	var foreign UsdaLabMethod

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, usdaSubSampleResultDBTypes, true, usdaSubSampleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSubSampleResult struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, usdaLabMethodDBTypes, false, usdaLabMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaLabMethod struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.LabMethodID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.LabMethod().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UsdaSubSampleResultSlice{&local}
	if err = local.L.LoadLabMethod(ctx, tx, false, (*[]*UsdaSubSampleResult)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.LabMethod == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.LabMethod = nil
	if err = local.L.LoadLabMethod(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.LabMethod == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUsdaSubSampleResultToOneSetOpUsdaFoodNutrientUsingFoodNutrient(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaSubSampleResult
	var b, c UsdaFoodNutrient

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaSubSampleResultDBTypes, false, strmangle.SetComplement(usdaSubSampleResultPrimaryKeyColumns, usdaSubSampleResultColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, usdaFoodNutrientDBTypes, false, strmangle.SetComplement(usdaFoodNutrientPrimaryKeyColumns, usdaFoodNutrientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, usdaFoodNutrientDBTypes, false, strmangle.SetComplement(usdaFoodNutrientPrimaryKeyColumns, usdaFoodNutrientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UsdaFoodNutrient{&b, &c} {
		err = a.SetFoodNutrient(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.FoodNutrient != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FoodNutrientUsdaSubSampleResult != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.FoodNutrientID != x.ID {
			t.Error("foreign key was wrong value", a.FoodNutrientID)
		}

		if exists, err := UsdaSubSampleResultExists(ctx, tx, a.FoodNutrientID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testUsdaSubSampleResultToOneSetOpUsdaLabMethodUsingLabMethod(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaSubSampleResult
	var b, c UsdaLabMethod

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaSubSampleResultDBTypes, false, strmangle.SetComplement(usdaSubSampleResultPrimaryKeyColumns, usdaSubSampleResultColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, usdaLabMethodDBTypes, false, strmangle.SetComplement(usdaLabMethodPrimaryKeyColumns, usdaLabMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, usdaLabMethodDBTypes, false, strmangle.SetComplement(usdaLabMethodPrimaryKeyColumns, usdaLabMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UsdaLabMethod{&b, &c} {
		err = a.SetLabMethod(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.LabMethod != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.LabMethodUsdaSubSampleResults[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.LabMethodID, x.ID) {
			t.Error("foreign key was wrong value", a.LabMethodID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.LabMethodID))
		reflect.Indirect(reflect.ValueOf(&a.LabMethodID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.LabMethodID, x.ID) {
			t.Error("foreign key was wrong value", a.LabMethodID, x.ID)
		}
	}
}

func testUsdaSubSampleResultToOneRemoveOpUsdaLabMethodUsingLabMethod(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsdaSubSampleResult
	var b UsdaLabMethod

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usdaSubSampleResultDBTypes, false, strmangle.SetComplement(usdaSubSampleResultPrimaryKeyColumns, usdaSubSampleResultColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, usdaLabMethodDBTypes, false, strmangle.SetComplement(usdaLabMethodPrimaryKeyColumns, usdaLabMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetLabMethod(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveLabMethod(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.LabMethod().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.LabMethod != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.LabMethodID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.LabMethodUsdaSubSampleResults) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testUsdaSubSampleResultsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSubSampleResult{}
	if err = randomize.Struct(seed, o, usdaSubSampleResultDBTypes, true, usdaSubSampleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSubSampleResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsdaSubSampleResultsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSubSampleResult{}
	if err = randomize.Struct(seed, o, usdaSubSampleResultDBTypes, true, usdaSubSampleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSubSampleResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UsdaSubSampleResultSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsdaSubSampleResultsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSubSampleResult{}
	if err = randomize.Struct(seed, o, usdaSubSampleResultDBTypes, true, usdaSubSampleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSubSampleResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UsdaSubSampleResults().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	usdaSubSampleResultDBTypes = map[string]string{`FoodNutrientID`: `integer`, `AdjustedAmount`: `real`, `LabMethodID`: `integer`, `NutrientName`: `text`}
	_                          = bytes.MinRead
)

func testUsdaSubSampleResultsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(usdaSubSampleResultPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(usdaSubSampleResultAllColumns) == len(usdaSubSampleResultPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSubSampleResult{}
	if err = randomize.Struct(seed, o, usdaSubSampleResultDBTypes, true, usdaSubSampleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSubSampleResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaSubSampleResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, usdaSubSampleResultDBTypes, true, usdaSubSampleResultPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaSubSampleResult struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUsdaSubSampleResultsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(usdaSubSampleResultAllColumns) == len(usdaSubSampleResultPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UsdaSubSampleResult{}
	if err = randomize.Struct(seed, o, usdaSubSampleResultDBTypes, true, usdaSubSampleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsdaSubSampleResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsdaSubSampleResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, usdaSubSampleResultDBTypes, true, usdaSubSampleResultPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaSubSampleResult struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(usdaSubSampleResultAllColumns, usdaSubSampleResultPrimaryKeyColumns) {
		fields = usdaSubSampleResultAllColumns
	} else {
		fields = strmangle.SetComplement(
			usdaSubSampleResultAllColumns,
			usdaSubSampleResultPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UsdaSubSampleResultSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUsdaSubSampleResultsUpsert(t *testing.T) {
	t.Parallel()

	if len(usdaSubSampleResultAllColumns) == len(usdaSubSampleResultPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UsdaSubSampleResult{}
	if err = randomize.Struct(seed, &o, usdaSubSampleResultDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UsdaSubSampleResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UsdaSubSampleResult: %s", err)
	}

	count, err := UsdaSubSampleResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, usdaSubSampleResultDBTypes, false, usdaSubSampleResultPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsdaSubSampleResult struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UsdaSubSampleResult: %s", err)
	}

	count, err = UsdaSubSampleResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
